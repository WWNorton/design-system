import { BaseDetailsProps } from '../BaseDetails';
import { IconVariant, SVGIcon } from '../Icon';

type LifecycleCallback = () => boolean | void | Promise<boolean | void>;

export interface DisclosureProps extends Omit<BaseDetailsProps, 'open'> {
	/** The content for the summary element generated by the disclosure component. */
	summary: string;
	/**
	 * The marker icon that indicates the disclosure's current state. Similar to the
	 * [CSS `::marker`](https://developer.mozilla.org/en-US/docs/Web/CSS/%3A%3Amarker).
	 * The default is `caret-right`. When `panel` is `true`, the default is
	 * `chevron-down`.
	 */
	marker?: IconVariant | SVGIcon | null | ((panel?: boolean) => IconVariant | SVGIcon | null);
	/** The position of the marker. `right` when `panel={true}` and `left` otherwise. */
	markerPosition?: 'left' | 'right' | null | ((panel?: boolean) => 'left' | 'right' | null);
	/** How the marker should move when it opens. Default is `"rotate-90"`. */
	markerTransform?: 'rotate-90' | 'flip-3d' | 'none';
	/** Used to set the initial open state or fully control it. */
	isOpen?: boolean;
	/**
	 * Indicates that the disclosure should be in "panel" mode, which has a few
	 * effects:
	 *
	 * - The default `marker` will be `chevron-down`
	 * - The default `markerPosition` will be `right`
	 * - The default `markerTransform` will be `flip-3d`
	 * - The disclosure will be given the `nds-disclosure--panel` modifier class
	 */
	panel?: boolean;
	/** Indicates that animations should be disabled. */
	reducedMotion?: boolean;
	/** The base `className` according to BEM conventions. */
	baseName?: string;
	/** The `className` that will be applied to the `<summary>`. */
	summaryClass?: string;
	/** The `className` for the outer contents `<div>`. */
	contentsOuterClass?: string;
	/** The `className` that will be applied to the inner contents `<div>`. */
	contentsInnerClass?: string;
	/**
	 * The `className` that will be applied to the summary's icon indicator,
	 * which takes the place of the native `summary::marker` pseudo element.
	 */
	markerClass?: string;
	/**
	 * Lifecycle method that is triggered when the disclosure begins to close.
	 * Returning `false` will prevent the disclosure from beginning to close.
	 */
	onCloseStart?: LifecycleCallback;
	/**
	 * Lifecycle method that is triggered when the user clicks on the disclosure
	 * as it's closing. Returning `false` will cause the disclosure to continue
	 * closing.
	 */
	onCloseCancel?: LifecycleCallback;
	/**
	 * Lifecycle method that is triggered when the disclosure has finished closing.
	 */
	onCloseEnd?: LifecycleCallback;
	/**
	 * Lifecycle method that is triggered when the disclosure begins to open.
	 * Returning `false` will prevent the disclosure from beginning to open.
	 */
	onOpenStart?: LifecycleCallback;
	/**
	 * Lifecycle method that is triggered when the user clicks on the disclosure
	 * as it's opening. Returning `false` will cause the disclosure to continue
	 * opening.
	 */
	onOpenCancel?: LifecycleCallback;
	/**
	 * Lifecycle method that is triggered when the disclosure has finished opening.
	 */
	onOpenEnd?: LifecycleCallback;
}
