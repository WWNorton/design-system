////
/// @group Typography
////

@use 'sass:list';
@use 'sass:map';
@use '../device';
@use '../spacing';
@use '../util';

// FUNCTIONS

@function system-stack($font-family, $generic) {
	$system: '';

	@if $generic == 'sans' {
		$system: var(--nds-font-family-system-sans);
	}
	@else if $generic == 'serif' {
		$system: var(--nds-font-family-system-sans);
	}
	@else if $generic == 'mono' {
		$system: var(--nds-font-family-system-mono);
	}

	@return list.join($font-family, $system, $separator: comma);
}

/// Set a sans-serif font with the system stack fallback.
@function sans($font-family) {
	@return system-stack($font-family, 'sans');
}

/// Set a serif font with the system stack fallback.
@function serif($font-family) {
	@return system-stack($font-family, 'serif');
}

/// Set a monospace font with the system stack fallback.
@function mono($font-family) {
	@return system-stack($font-family, 'mono');
}

/// Get a font size using rem spacers.
/// @param {Number} $px - The font size in pixels.
/// @return {String} The font size spacer and rem conversion string.
@function size($px) {
	@return #{$px / $font-size-root}rem;
}

$-lh-roles: (
	(
		keys: (1, null, 'null', 'reset'),
		token: 'line-height-1',
	),
	(
		keys: (2, 'heading-large', 'h1', 'h2', 'lead'),
		token: 'line-height-2',
	),
	(
		keys: (3, 'heading', 'display', 'h3', 'h4', 'h5', 'h6', 'ui'),
		token: 'line-height-3',
	),
	(
		keys: (4, 'short', 'short-text'),
		token: 'line-height-4',
	),
	(
		keys: (5, 'body', 'paragraph', 'p', 'reading'),
		token: 'line-height-5',
	),
	(
		keys: (6, 'pull', 'pull-quote', 'pullquote'),
		token: 'line-height-6',
	),
);

@function line-height($role: 'body') {
	@return var(--nds-#{util.from-role($role, 'line-height', $-lh-roles)});
}

@function lh($role) {
	@return line-height($role);
}


// MIXINS

/// Apply font smoothing.
/// @link https://usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/
@mixin font-smoothing {
	@include device.media-hd {
		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
	}
}

/// Create a composed set of typography design tokens. Explicitly specifying a
/// value of `null` values will result in the property not being set.
/// @param {font-family} $family [font-family-base] - The font size, which should be a `font-size-*` token.
/// @param {line-height} $height [line-height-base] - The line height, which should be a `line-height-*` token.
/// @param {font-size} $size [font-size-base] - The font size, which should be a `font-size-*` token.
/// @param {font-size} $size [null] - The font weight, which should be a `font-weight-*` token.
@mixin typeset(
	$family: var(--nds-font-family-base),
	$size: var(--nds-font-size-base),
	$height: var(--nds-line-height-base),
	$weight: null,
) {
	font-family: $family;
	font-size: $size;
	font-weight: $weight;
	line-height: $height;
}

/// The "base" body typeset uses all `-base` tokens.
/// @example
///   .my-selector {
///     @include nds.body-base;
///   }
///
///   // CSS output
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-base);
///     line-height: var(--nds-line-height-base);
///   }
///
@mixin body-base {
	@include typeset;
}

/// A `typeset` suitable for extra small body text.
/// @example
///   .my-selector {
///     @include body-xs;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-xs);
///     line-height: var(--nds-line-height-base);
///   }
///
@mixin body-xs {
	@include typeset($size: var(--nds-font-size-xs));
}

/// A `typeset` suitable for small body text.
/// @example
///   .my-selector {
///     @include body-sm;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-sm);
///     line-height: var(--nds-line-height-base);
///   }
///
@mixin body-sm {
	@include typeset($size: var(--nds-font-size-sm));
}

/// A `typeset` suitable for medium body text.
/// @example
///   .my-selector {
///     @include body-md;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-md);
///     line-height: var(--nds-line-height-base);
///   }
///
@mixin body-md {
	@include typeset($size: var(--nds-font-size-md));
}

/// A `typeset` suitable for large body text.
/// @example
///   .my-selector {
///     @include body-lg;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-lg);
///     line-height: var(--nds-line-height-base);
///   }
///
@mixin body-lg {
	@include typeset($size: var(--nds-font-size-lg));
}

/// The "base" UI typeset uses the `ui` line height and `-base` tokens for
/// everything else.
/// @example
///   .my-selector {
///     @include ui-base;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-base);
///     line-height: var(--nds-line-height-3);
///   }
///
@mixin ui-base($size: var(--nds-font-size-base)) {
	@include typeset($height: lh('ui'), $size: $size);
}

/// A `typeset` suitable for extra small UI text.
/// @example
///   .my-selector {
///     @include ui-xs;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-xs);
///     line-height: var(--nds-line-height-3);
///   }
///
@mixin ui-xs {
	@include ui-base($size: var(--nds-font-size-xs));
}

/// A `typeset` suitable for small UI text.
/// @example
///   .my-selector {
///     @include ui-sm;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-sm);
///     line-height: var(--nds-line-height-3);
///   }
///
@mixin ui-sm {
	@include ui-base($size: var(--nds-font-size-sm));
}

/// A `typeset` suitable for medium UI text.
/// @example
///   .my-selector {
///     @include ui-md;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-md);
///     line-height: var(--nds-line-height-3);
///   }
///
@mixin ui-md {
	@include ui-base($size: var(--nds-font-size-md));
}

/// A `typeset` suitable for large UI text.
/// @example
///   .my-selector {
///     @include ui-lg;
///   }
///
///   // CSS output with default config
///   .my-selector {
///     font-family: var(--nds-font-family-base);
///     font-size: var(--nds-font-size-lg);
///     line-height: var(--nds-line-height-3);
///   }
///
@mixin ui-lg {
	@include ui-base($size: var(--nds-font-size-lg));
}

/// A `typeset` intended for text that is meant to convey hierarchy (i.e., a heading).
/// @param {font-size} $size - The font size. Required.
/// @param {Number} $height - The line height. Required.
/// @example
///   .my-selector {
///     @include typeset-heading($size: 3rem, $height: 1.25);
///   }
///
///   // CSS output with default config
///   .my-selector {
///     margin-top: 0;
///     margin-bottom: var(--nds-spacing-4);
///     font-family: var(--nds-font-family-headings);
///     font-size: 3rem;
///     font-style: var(--nds-font-style-headings);
///     font-weight: var(--nds-font-weight-headings);
///     line-height: 1.25;
///   }
///
@mixin typeset-heading($size, $height) {
	margin-top: 0;
	margin-bottom: spacing.spacer('block-base');
	font-style: var(--nds-font-style-headings);

	@include typeset(
		$size: $size,
		$height: $height,
		$family: var(--nds-font-family-headings),
		$weight: var(--nds-font-weight-headings),
	);
}

/// A `typeset` suitable for text that is meant to convey the top level of
/// content hierarchy, such as an `h1`.
@mixin heading-1 {
	@include typeset-heading(
		$size: var(--nds-font-size-h1),
		$height: lh('h1'),
	);
}

/// A `typeset` suitable for text that is meant to convey the second level of
/// content hierarchy, such as an `h2`.
@mixin heading-2 {
	@include typeset-heading(
		$size: var(--nds-font-size-h2),
		$height: lh('h2'),
	);
}

/// A `typeset` suitable for text that is meant to convey the third level of
/// content hierarchy, such as an `h3`.
@mixin heading-3 {
	@include typeset-heading(
		$size: var(--nds-font-size-h3),
		$height: lh('h3'),
	);
}

/// A `typeset` suitable for text that is meant to convey the fourth level of
/// content hierarchy, such as an `h4`.
@mixin heading-4 {
	@include typeset-heading(
		$size: var(--nds-font-size-h4),
		$height: lh('h4'),
	);
}

/// A `typeset` suitable for text that is meant to convey the fifth level of
/// content hierarchy, such as an `h5`.
@mixin heading-5 {
	@include typeset-heading(
		$size: var(--nds-font-size-h5),
		$height: lh('h5'),
	);
}

/// A `typeset` suitable for text that is meant to convey the sixth (and lowest)
/// level of content hierarchy, such as an `h6`.
@mixin heading-6 {
	@include typeset-heading(
		$size: var(--nds-font-size-h6),
		$height: lh('h6'),
	);
}
