////
/// @group Utilities
////

@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

@use 'config';

$-declared: ();

@mixin declare($name) {
	@if config.$enable-duplicate-declarations {
		@content;
	}
	@else if list.index($-declared, $name) == null {
		$-declared: list.append($-declared, $name) !global;

		@content;
	}
}

/// Flatten a nested map.
/// @param {Map} $map - The map that should be flattened. The `#root` key will
/// be treated use the name as its key.
/// @param {String} $name [null] - The name of the map. Resulting keys will use this as a prefix.
/// @param {String} $key-separator [-] - The separator that will be used to join map names.
/// @return {Map} The flattened map. Key names will reflect the nesting structure.
/// @example
///   @debug flatten((a: (b: (c: 'd'))));
///   // ("a-b-c": "d")
/// @example named
///   @debug flatten((a: (b: (c: 'd'))), 'foo');
///   // ("foo-a-b-c": "d")
/// @example named and a `#root` key
///   @debug flatten(('a': ('b': 'c', '#root': 'd')), 'foo');
///   // ("foo-a-b": "c", "foo-a": "d")
///
@function flatten($map, $name: null, $key-separator: '-') {
	$flattened: ();

	@each $key in map.keys($map) {
		$val: map.get($map, $key);
		$full-key: if($name, prefix($key, $name, $key-separator), $key);

		@if $key == '#root' {
			$full-key: $name;
		}

		@if not $full-key {
			@error 'When flattening #root keys, ensure that the #root is either '
				+ 'nested or a valid $name argument is included.';
		}

		@if meta.type-of($val) == 'map' {
			$flattened: map.merge($flattened, flatten($val, string.quote($full-key)));
		}
		@else {
			$flattened: map.merge($flattened, (string.quote($full-key): $val));
		}
	}

	@return $flattened;
}

/// Recursively merge a list of maps. Similar to `map.merge` but takes many maps
/// and merges any sub-maps recursively.
/// @param {Map[]} $maps... - A list of maps that will be merged.
/// @return {Map} - A deeply merged map.
@function deep-merge($maps...) {
	$merged: list.nth($maps, 1);
	$length: list.length($maps);

	@if $length <= 1 { @return $merged; }

	@for $i from 2 through $length {
		$map: list.nth($maps, $i);
		$map-type: meta.type-of($map);

		@if $map-type == 'map' or ($map-type == 'list' and list.length($map) == 0) {
			@each $key in map.keys($map) {
				$new-val: map.get($map, $key);
				$cur-val: map.get($merged, $key);

				@if meta.type-of($new-val) == 'map' and meta.type-of($cur-val) == 'map' {
					$new-val: deep-merge($cur-val, $new-val);
				}

				$merged: map.merge($merged, ($key: $new-val));
			}
		}
		@else {
			@error 'All arguments must be maps.';
		}
	}

	@return $merged;
}

/// Set a list of properties as CSS custom properties.
/// @param {Arglist | Map[]} $prop-maps... - Either an arglist of key: value
/// pairs or a list of maps with key: value pairs. Note that if the key does not
/// begin with `--`, it will be added.
/// @example Sass variables
///   .button {
///     // set properties local to .button with Sass variables as parameters
///     @include set($button-border-radius: 2px);
///     // use the property
///     border-radius: var(--button-border-radius);
///   }
///   // CSS output
///   .button {
///     --button-border-radius: 2px;
///     border-radius: var(--nds-button-border-radius, 2px);
///   }
///
/// @example CSS custom properties map
///   .button {
///     // set properties local to .button with a map of CSS custom properties
///     @include set((
///       --button-border-radius: 2px,
///     ));
///     // use the property
///     border-radius: var(--button-border-radius);
///   }
///   // CSS output
///   .button {
///     --button-border-radius: 2px;
///     border-radius: var(--button-border-radius, 2px);
///   }
///
@mixin set($prop-maps...) {
	$keywords: meta.keywords($prop-maps);

	$props: ();

	@if list.length($keywords) > 0 {
		$props: $keywords;
	}
	@else {
		@each $prop-map in $prop-maps {
			@if meta.type-of($prop-map) != 'map' {
				@error 'All arguments must be maps';
			}
			@else {
				$props: map.merge($props, $prop-map);
			}
		}
	}

	@each $token, $value in $props {
		@if $value {
			@if meta.type-of($value) == 'map' {
				@include set(flatten($value, $token));
			}
			@else {
				$css-prop: if(string.index($token, '--') == 1, $token, --#{$token});

				#{string.unquote($css-prop)}: #{$value};
			}
		}
	}
}

@function from-role($role, $property, $role-map) {
	$keys: ();

	@each $map in $role-map {
		$current: map.get($map, 'keys');

		@if list.index($current, $role) {
			@return map.get($map, 'token');
		}

		@each $key in $current {
			$keys: list.append($keys, $key, comma);
		}
	}

	@error '#{$role} is not a valid #{$property} role. Options are #{$keys}.';
}

@function get-roles($token, $property, $role-map) {
	$token: ();

	@each $map in $role-map {
		$current: map.get($map, 'token');

		@if list.index($current, $token) {
			@return map.get($map, 'keys');
		}

		@each $key in $current {
			$token: list.append($token, $key, comma);
		}
	}

	@error '#{token} is not a token in the #{$property} role map. Options are #{$token}.';
}

@function prefix($item, $namespace, $separator: '-') {
	@if meta.type-of($item) == 'string' {
		@return if($namespace, $namespace + $separator + $item, $item);
	}
	@else if meta.type-of($item) == 'number' {
		@return if($namespace, '#{$namespace}#{$separator}#{$item}', $item);
	}
	@else if meta.type-of($item) == 'map' {
		@return -prefix-map($item, $namespace, $separator);
	}
}

@function -prefix-map($map, $prefix, $separator) {
	$prefixed: ();

	@each $key, $value in $map {
		$prefixed: map.merge($prefixed, (#{prefix($key, $prefix, $separator)}: $value));
	}

	@return $prefixed;
}

/// Get the key that corresponds to a value in a map.
/// @param {Map} $map - The map that will be used for lookup.
/// @param {String} $value - The value of the corresponding key.
/// @return {String} - The map's key name corresponding to the provided value.
/// @example scss
///   $my-map: ('red': #f00, 'yellow': #ba7);
///   @debug get-key($my-map, #ba7);
///   // yellow
@function get-key($map, $value) {
	$keys: map.keys($map);
	$values: map.values($map);
	$index: list.index($values, $value);

	@if $index {
		@return list.nth($keys, $index);
	}

	@return $value;
}

@function px2rem($px, $browser-font-size: config.$browser-font-size) {
	@return math.div($px, $browser-font-size);
}

@function rem2px($rem, $browser-font-size: config.$browser-font-size) {
	@return $rem * $browser-font-size;
}

@function min-max($val, $min, $max) {
	@return math.max($min, math.min($max, $val));
}

@function child-selector($parent, $child) {
	@if $parent {
		@if meta.type-of($parent) == 'string' {
			@return $parent $child;
		}

		@if meta.type-of($parent) == 'list' {
			$list: ();

			@each $selector in $parent {
				$list: list.append($list, string.unquote('#{$selector} #{$child}'), 'comma');
			}

			@return $list;
		}
	}
}
