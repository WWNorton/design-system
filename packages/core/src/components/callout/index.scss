@forward 'tokens';

@use 'tokens';
@use 'sass:map';
@use 'sass:list';
@use '../../color';
@use '../../type';
@use '../../util';

@mixin base {
	--nds-callout-border-width: #{tokens.$border-width};
	--nds-callout-padding-x: #{tokens.$padding-x};
	--nds-callout-padding-y: #{tokens.$padding-y};
	--nds-callout-icon-margin-right: #{tokens.$icon-margin-right};
	--nds-callout-header-bottom-margin: #{tokens.$header-margin-bottom};
	--nds-callout-header-no-title-bottom-margin: #{tokens.$header-no-title-bottom-margin};
	--nds-callout-no-title-padding: #{tokens.$no-title-padding};
	--nds-callout-close-button-color: #{tokens.$close-button-color};
	--nds-callout-icon-size: #{tokens.$icon-size};
	--nds-callout-background-color: var(--nds-callout-color-#{tokens.$background-grade});
	--nds-callout-border-color: var(--nds-callout-color-#{tokens.$border-grade});

	position: relative;
	display: block;
	padding: var(--nds-callout-padding-y) var(--nds-callout-padding-x);
	background-color: var(--nds-callout-background-color);
	border-color: var(--nds-callout-border-color);

	@include util.set(
		$nds-callout-color: color.family('callout-color', tokens.$color),
	);
}

@mixin no-title {
	padding-top: var(--nds-callout-no-title-padding);
}

@mixin border(
	$placement: 'left',
	$color: var(--nds-base-color-#{tokens.$border-grade}),
	$width: var(--nds-callout-border-width),
	$padding: var(--nds-callout-padding-y),
) {
	@if list.index('top' 'left', #{$placement}) == null {
		@error '$placement must be either "top" or "left"';
	}

	$pad: $padding;

	@if not $padding {
		@if $placement == 'top' { $pad: var(--nds-callout-padding-y); }

		@if $placement == 'left' { $pad: var(--nds-callout-padding-x); }
	}

	border-#{$placement}: #{$width} solid #{$color};
	padding-#{$placement}: calc(#{$pad} - #{$width});
}

@mixin header {
	position: relative;
	display: flex;
	min-height: 1.375rem;
	align-items: flex-start;
	margin-bottom: var(--nds-callout-header-bottom-margin);

	&--no-title {
		margin-bottom: var(--nds-callout-header-no-title-bottom-margin);
	}
}

@mixin icon {
	min-width: var(--nds-callout-icon-size);
	min-height: var(--nds-callout-icon-size);
	margin-right: var(--nds-callout-icon-margin-right);
}

@mixin title {
	@include type.heading-4;

	&:not(:last-child) {
		padding-right: calc(var(--nds-callout-padding-x) + #{tokens.$header-right-padding});
	}
}

@mixin close-button {
	position: absolute;
	top: 0;
	right: 0;
	color: var(--nds-callout-close-button-color);
	transform: translate(18%, -18%);

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		background-color: var(--nds-callout-color-#{tokens.$background-grade + 10});
		border-color: var(--nds-callout-color-#{tokens.$background-grade + 10});
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		background-color: var(--nds-callout-color-#{tokens.$background-grade + 20});
		border-color: var(--nds-callout-color-#{tokens.$background-grade + 20});
	}
}

@mixin callout-body {
	> :last-child {
		margin-bottom: 0;
	}
}

@mixin preset($color-family) {
	@include util.set($nds-callout-color: color.family('callout-color', #{$color-family}));

	.nds-callout__icon {
		color: var(--nds-callout-color-#{tokens.$icon-grade});
	}
}

@mixin style {
	@include util.declare('callout') {
		.nds-callout {
			@include base;
		}

		.nds-callout--border-left {
			@include border('left', var(--nds-callout-color-#{tokens.$border-grade}), var(--nds-callout-border-width));
		}

		.nds-callout--border-top {
			@include border('top', var(--nds-callout-color-#{tokens.$border-grade}), var(--nds-callout-border-width));

			&.nds-callout--no-title {
				@include border('top', var(--nds-callout-color-#{tokens.$border-grade}), var(--nds-callout-border-width), var(--nds-callout-no-title-padding));
			}
		}

		.nds-callout--no-title {
			@include no-title;
		}

		.nds-callout__header {
			@include header;
		}

		.nds-callout__title {
			@include title;
		}

		.nds-callout__icon {
			@include icon;
		}

		.nds-callout__close-button {
			@include close-button;
		}

		.nds-callout__body {
			@include callout-body;
		}

		.nds-callout--warning {
			@include preset('warning-color');
		}

		.nds-callout--error {
			@include preset('error-color');
		}

		.nds-callout--success {
			@include preset('success-color');
		}

		@each $name, $val in color.$families {
			.nds-callout--#{$name} {
				@include util.set(
					$nds-callout-color: color.family('callout-color', $name),
				);
			}
		}

		@each $map in color.$roles {
			$name: map.get($map, 'name');

			.nds-callout--#{$name} {
				@include util.set(
					$nds-callout-color: color.family('callout-color', '#{$name}-color'),
				);
			}
		}
	}
}
