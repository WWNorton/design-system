@forward 'tokens';

@use 'tokens';
@use 'sass:map';
@use 'sass:list';
@use '../../color';
@use '../../config';
@use '../../spacing';
@use '../../util';

@mixin border(
	$position: 'left',
	$color: var(--nds-callout-border-color),
	$width: var(--nds-callout-border-width),
	$padding: var(--nds-callout-padding-y),
) {
	@if list.index('top' 'right' 'bottom' 'left', #{$position}) == null {
		@error '$position must be either "top," "right," "bottom," or "left"';
	}

	$pad: $padding;

	@if not $padding {
		@if list.index('top' 'bottom', #{$position}) != null {
			$pad: var(--nds-callout-padding-y);
		}

		@if list.index('right' 'left', #{$position}) != null {
			$pad: var(--nds-callout-padding-x);
		}
	}

	border-#{$position}: #{$width} solid #{$color};
	padding-#{$position}: calc(#{$pad} - #{$width});
}

@mixin base {
	--nds-callout-border-width: #{tokens.$border-width};
	--nds-callout-padding-x: #{tokens.$padding-x};
	--nds-callout-padding-y: #{tokens.$padding-y};
	--nds-callout-icon-size: #{tokens.$icon-size};
	--nds-callout-background-color: var(--nds-callout-color-#{tokens.$background-grade});
	--nds-callout-border-color: var(--nds-callout-color-#{tokens.$border-grade});
	--nds-callout-icon-color: var(--nds-callout-color-#{tokens.$icon-grade});
	--nds-callout-color-dark: var(--nds-callout-color-#{tokens.$background-grade + 10});
	--nds-callout-color-darker: var(--nds-callout-color-#{tokens.$background-grade + 20});

	// stylelint-disable order/order
	@include util.set($nds-callout-color: color.family('callout-color', tokens.$color));

	position: relative;
	padding: var(--nds-callout-padding-y) var(--nds-callout-padding-x);
	margin-bottom: spacing.spacer('block-base');
	background-color: var(--nds-callout-background-color);
	border-color: var(--nds-callout-border-color);

	@each $pos in ('top', 'right', 'bottom', 'left') {
		&[data-border~='#{$pos}'] {
			@include border(#{$pos});
		}
	}

	&--no-title {
		padding-top: calc(var(--nds-callout-padding-y) / 2);

		//stylelint-disable-next-line selector-no-qualifying-type
		&[data-border~='top'] {
			@include border($position: 'top', $padding: calc(var(--nds-callout-padding-y) / 2));
		}
	}

	@if config.$enable-dark-scheme {
		@media screen and (prefers-color-scheme: 'dark') {
			--nds-callout-color-dark: var(--nds-callout-color-#{tokens.$background-grade-dark - 10});
			--nds-callout-color-darker: var(--nds-callout-color-#{tokens.$background-grade-dark - 20});
			--nds-callout-background-color: var(--nds-callout-color-#{tokens.$background-grade-dark});
			--nds-callout-border-color: var(--nds-callout-color-#{tokens.$border-grade-dark});
			--nds-callout-icon-color: var(--nds-callout-color-#{tokens.$icon-grade-dark});
		}

		[data-color-scheme='dark'] & {
			--nds-callout-color-dark: var(--nds-callout-color-#{tokens.$background-grade-dark - 10});
			--nds-callout-color-darker: var(--nds-callout-color-#{tokens.$background-grade-dark - 20});
			--nds-callout-background-color: var(--nds-callout-color-#{tokens.$background-grade-dark});
			--nds-callout-border-color: var(--nds-callout-color-#{tokens.$border-grade-dark});
			--nds-callout-icon-color: var(--nds-callout-color-#{tokens.$icon-grade-dark});
		}

		[data-color-scheme='light'] & {
			--nds-callout-color-dark: var(--nds-callout-color-#{tokens.$background-grade + 10});
			--nds-callout-color-darker: var(--nds-callout-color-#{tokens.$background-grade + 20});
			--nds-callout-background-color: var(--nds-callout-color-#{tokens.$background-grade});
			--nds-callout-border-color: var(--nds-callout-color-#{tokens.$border-grade});

			color: unset;
		}
	}
}

@mixin header {
	display: flex;
	margin-bottom: spacing.spacer('1.5rem');
}

@mixin icon {
	width: var(--nds-callout-icon-size);
	height: var(--nds-callout-icon-size);
	margin-right: spacing.spacer('0.75rem');
	color: var(--nds-callout-icon-color);
	flex-grow: 0;
}

@mixin title {
	margin-right: spacing.spacer('2rem');
	font-family: var(--nds-font-family-headings);
	font-size: var(--nds-font-size-h4);
	font-style: var(--nds-font-style-headings);
	font-weight: var(--nds-font-weight-headings);
	line-height: var(--nds-line-height-3);
	flex-grow: 1;
	align-self: center;
}

@mixin dismiss-button {
	position: absolute;
	top: 0;
	right: 0;
	color: var(--nds-callout-dismiss-button-color);
	background-color: transparent;
	transform:
		translateY(calc(var(--nds-callout-padding-y) - var(--nds-button-padding-y)))
		translateX(calc(-1 * (var(--nds-callout-padding-x) - var(--nds-button-padding-x) + 2px)));

	.nds-callout--no-title & {
		position: relative;
		left: 100%;
		margin-bottom: spacing.spacer('0.25rem');
		transform: translateX(calc(-100% + var(--nds-button-padding-x) - 2px));
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		background-color: var(--nds-callout-color-dark);
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		background-color: var(--nds-callout-color-darker);
	}
}

@mixin callout-body {
	&:first-child {
		margin-top: calc(var(--nds-callout-padding-y) / 2);
	}

	> :last-child {
		margin-bottom: 0;
	}
}

// presets set a custom color family, set the icon's color to grade `60`, and
// modify the dark scheme
@mixin preset($color-family) {
	@include util.set($nds-callout-color: color.family('callout-color', #{$color-family}));

	--nds-callout-icon-color: var(--nds-callout-color-60);

	.nds-callout__icon {
		color: var(--nds-callout-icon-color);
	}

	@if config.$enable-dark-scheme {
		@media screen and (prefers-color-scheme: 'dark') {
			--nds-callout-color-dark: var(--nds-callout-color-60);
			--nds-callout-color-darker: var(--nds-callout-color-50);
			--nds-callout-background-color: var(--nds-callout-color-70);
			--nds-callout-border-color: var(--nds-callout-color-50);
			--nds-callout-icon-color: var(--nds-callout-color-40);

			color: var(--nds-text-color-inverse);
		}

		[data-color-scheme='dark'] & {
			--nds-callout-color-dark: var(--nds-callout-color-60);
			--nds-callout-color-darker: var(--nds-callout-color-50);
			--nds-callout-background-color: var(--nds-callout-color-70);
			--nds-callout-border-color: var(--nds-callout-color-50);
			--nds-callout-icon-color: var(--nds-callout-color-40);

			color: var(--nds-text-color-inverse);
		}

		[data-color-scheme='light'] & {
			--nds-callout-icon-color: var(--nds-callout-color-60);
		}
	}
}

@mixin style {
	@include util.declare('callout') {
		.nds-callout {
			@include base;
		}

		.nds-callout__header {
			@include header;
		}

		.nds-callout__title {
			@include title;
		}

		.nds-callout__icon {
			@include icon;
		}

		.nds-callout__dismiss {
			@include dismiss-button;
		}

		.nds-callout__body {
			@include callout-body;
		}

		.nds-callout--warning {
			@include preset('warning-color');
		}

		.nds-callout--error {
			@include preset('error-color');
		}

		.nds-callout--success {
			@include preset('success-color');
		}

		@each $name in color.$families {
			.nds-callout--#{$name} {
				@include util.set(
					$nds-callout-color: color.family('callout-color', $name),
				);

				@if config.$enable-dark-scheme {
					@media screen and (prefers-color-scheme: 'dark') {
						@include util.set(
							$nds-callout-color: color.family('callout-color', $name, null, true),
						);
					}

					[data-color-scheme='dark'] & {
						@include util.set(
							$nds-callout-color: color.family('callout-color', $name, null, true),
						);
					}

					[data-color-scheme='light'] & {
						@include util.set(
							$nds-callout-color: color.family('callout-color', $name),
						);
					}
				}
			}
		}

		@each $map in color.$roles {
			$name: map.get($map, 'name');

			.nds-callout--#{$name} {
				@include util.set($nds-callout-color: color.family('callout-color', '#{$name}-color'));
			}
		}
	}
}
