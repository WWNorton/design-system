"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3261],{4814:function(e,t,o){o.r(t),o.d(t,{contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return m}});var n=o(5773),r=o(808),i=(o(7378),o(5318)),a=o(6432),s=o(1010),c=["components"],p={title:"React Providers"},d=void 0,l={unversionedId:"components/react-providers",id:"components/react-providers",title:"React Providers",description:"The React implementation of the design system uses React context to make certain aspects configurable through context providers.",source:"@site/docs/components/react-providers.mdx",sourceDirName:"components",slug:"/components/react-providers",permalink:"/design-system/docs/components/react-providers",editUrl:"https://github.com/wwnorton/design-system/edit/main/website/docs/components/react-providers.mdx",tags:[],version:"current",lastUpdatedBy:"Evan Yamanishi",lastUpdatedAt:1620167301,formattedLastUpdatedAt:"5/4/2021",frontMatter:{title:"React Providers"},sidebar:"components",previous:{title:"Tooltip",permalink:"/design-system/docs/components/tooltip"}},m=[{value:"App Provider",id:"app-provider",children:[],level:2},{value:"Theme Provider",id:"theme-provider",children:[{value:"useTheme hook",id:"usetheme-hook",children:[],level:3}],level:2}],h={toc:m};function u(e){var t=e.components,o=(0,r.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The React implementation of the design system uses ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React context")," to make certain aspects configurable through ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html#contextprovider"},"context providers"),"."),(0,i.kt)("h2",{id:"app-provider"},"App Provider"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<AppProvider>")," is used to configure the design system at the application level and should wrap your whole application if used.\nBecause it extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>"),", it will be treated as the ",(0,i.kt)("a",{parentName:"p",href:"#root-theme"},"root theme configuration"),"."),(0,i.kt)("p",null,"For instance, to use your own router link and force a light color scheme:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Example: light scheme and custom router link"',title:'"Example:',light:!0,scheme:!0,and:!0,custom:!0,router:!0,'link"':!0},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Link } from 'react-router-dom';\nimport { AppProvider } from '@wwnds/react';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider\n            linkComponent={Link}\n            colorScheme=\"light\"\n            ignoreOSColorScheme\n        >\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    rootElement,\n);\n")),(0,i.kt)(s._A,{from:a.AppProvider,mdxType:"PropsTable"}),(0,i.kt)("h2",{id:"theme-provider"},"Theme Provider"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," sets a color scheme context, setting a ",(0,i.kt)("inlineCode",{parentName:"p"},"data-color-scheme")," attribute (",(0,i.kt)("inlineCode",{parentName:"p"},'"light"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'"dark"'),") that can be used to theme children.\n",(0,i.kt)("inlineCode",{parentName:"p"},"@wwnds/core")," uses this to set color role token assignments, but you can use it however you like with a ",(0,i.kt)("inlineCode",{parentName:"p"},"[data-color-scheme='light|dark']")," selector."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>")," can be nested, and the highest-level provider will be used as the root provider.\nWhen ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", the root provider will use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"},"the color scheme that the user prefers"),".\nAnd by default, the root color scheme will update whenever the user changes their preferred color scheme in their operating system settings.\nThis can be disabled by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"ignoreOSColorScheme"),"."),(0,i.kt)("p",null,"When nested inside a parent ",(0,i.kt)("inlineCode",{parentName:"p"},"<ThemeProvider>"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},'"inverse"')," value will use the inverse of the parent color scheme context."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ThemeProvider colorScheme="dark">\n    <p className="themed">Dark</p>\n    <ThemeProvider colorScheme="inverse">\n        <p className="themed">Inverted</p>\n        <ThemeProvider colorScheme="inverse">\n            <p className="themed">Double inverted</p>\n        </ThemeProvider>\n    </ThemeProvider>\n</ThemeProvider>\n')),(0,i.kt)(s._A,{from:a.ThemeProvider,mdxType:"PropsTable"}),(0,i.kt)("h3",{id:"usetheme-hook"},"useTheme hook"),(0,i.kt)("p",null,"In addition to the theme provider, the ",(0,i.kt)("inlineCode",{parentName:"p"},"useTheme")," hook can be used by components to update the current context's color scheme."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Example: toggle dark mode with a switch"',title:'"Example:',toggle:!0,dark:!0,mode:!0,with:!0,a:!0,'switch"':!0},"import { Switch, useTheme } from '@wwnds/react';\n\nexport const SchemeToggle = () => {\n    const { colorScheme, setColorScheme } = useTheme();\n    const isDark = colorScheme === 'dark';\n\n    const onToggleChange = (checked: boolean) => {\n        setColorScheme((checked) ? 'dark' : 'light');\n    };\n\n    return (\n        <Switch\n            label=\"Dark mode\"\n            checked={isDark}\n            onToggle={onToggleChange}\n        />\n    );\n}\n")))}u.isMDXComponent=!0}}]);