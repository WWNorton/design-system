[{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Welcome to the Norton Design System blog! Keep an eye out here for a deeper look at some of the systems, components, and design decisions that might not make as much sense elsewhere. That's all for now.","keywords":""},{"title":"Components","type":0,"sectionRef":"#","url":"docs/components","content":"Components Components are the building blocks of the design system. A component describes a common pattern that can be composed together with other components and content to create larger things like pages or applications. In order to facilitate composition, components seek to do one thing well and be as simple as possible while still providing options for customization. Badge A badge brings attention to information about a related component. Button A button allows the user to perform an action. Callout A callout brings attention to important information that is related to the main content. Checkbox A checkbox allows the user to check or uncheck an option. Choice Field A choice field allows the user to choose one or more option from a set of related options. Disclosure A disclosure allows the user to show and hide additional content. Dropdown A dropdown allows the user to select an option from a list of options in an expandable overlay. Link A link allows the user to navigate to another place. Modal A modal presents important information or simple tasks to the user in an overlay. Popover A popover allows the user to reveal more information or non-critical tasks in an overlay. Progress Bar A progress bar lets the user know that something is processing or progressing. Radio Group A radio group allows the user to select one option from a set of related options. Spinner A spinner lets the user know that something is processing or progressing. Step Indicator A step indicator allows users to know where they are in a long process or form while they focus on completing discrete steps. Switch A switch allows the user to immediately turn an option on or off. Table A table allows users to view data organized in rows and columns. Tag A tag allows the user to interact with or dismiss a status or classification. Text Field A text field allows the user to enter and edit text. Tooltip A tooltip displays the name of or description for a related element on demand.","keywords":""},{"title":"Accordion","type":0,"sectionRef":"#","url":"docs/components/accordion","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Accordion","url":"docs/components/accordion#anatomy","content":"An accordion includes two or more vertically stacked disclosures. "},{"title":"Usage​","type":1,"pageTitle":"Accordion","url":"docs/components/accordion#usage","content":"Use an accordion to allow users to expand/collapse related sections of content.Down Arrow/Up Arrow moves focus to the next/previous section summaries, respectively.Home and End move focus to the first/last section summaries, respectively. Dos Do use accordions if users only need to see specific section(s) of content on the page.Do ensure that the entire section summary (label and icon) is clickable. Don'ts Don’t display all disclosures within an accordion in an expanded state by default. Caution Use an accordion if users might need to view more than one section at a time.If users are likely to want all sections open most of the time, consider using standard document structure (headings and paragraphs) instead.If users only need to view one section at a time, consider using tabs. "},{"title":"Badge","type":0,"sectionRef":"#","url":"docs/components/badge","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Badge","url":"docs/components/badge#anatomy","content":"A container - an outline or background sets the badge apart from adjacent text.A label - the badge's label conveys a single piece of metadata about the component it references. "},{"title":"Usage​","type":1,"pageTitle":"Badge","url":"docs/components/badge#usage","content":"Use a badge to communicate notifications or other outstanding items. A badge can be overlaid at the top right of another component, such as an icon, or next to another component, such as a label.Badges are usually found next to a component they’re describing and in these cases should be placed as close as possible. Badges are occasionally used to describe an entire screen or product (i.e. the Beta product badge).Badges are not interactive but may be used in conjunction with interactive components.A dot badge (a small dot with no visible label) can be used on an interactive component to communicate something has been updated or needs attention. When the user interacts with the component, it should be clear what update is being communicated by the dot badge. Dos Do use approximate numbers larger than 999 (ie. 1K).Do use for static, non-dismissible information. Don'ts Don’t use a badge for specific numbers longer than 3 places.Don’t use a badge if users need to interact with or dismiss this information. Instead, use a tag for that. "},{"title":"React API​","type":1,"pageTitle":"Badge","url":"docs/components/badge#react-api","content":"We expose one component for the badge API, the Badge. "},{"title":"Badge​","type":1,"pageTitle":"Badge","url":"docs/components/badge#badge","content":"The Badge component extends the React.HTMLAttributes&lt;HTMLSpanElement&gt; interface. import { Badge } from '@wwnds/react'; Copy Live Editor &lt;Badge&gt;Beta&lt;/Badge&gt; &lt;Badge&gt;Beta&lt;/Badge&gt; Result Loading... Name\tDescription\tType dot When set, renders as a notification dot.\tboolean color The badge's color family.\tSystemColors baseName The base class name according to BEM conventions.\tstring "},{"title":"Callout","type":0,"sectionRef":"#","url":"docs/components/callout","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Callout","url":"docs/components/callout#anatomy","content":"Container - the container sets the contents of the callout apart from the main content.Icon (optional) - an icon can be used to add character or emphasize the title.Title (recommended) - the title of a callout summarizes its contents.Dismiss button (optional) - a control that allows the user to dismiss the callout.Body - the contents of the callout. "},{"title":"Usage​","type":1,"pageTitle":"Callout","url":"docs/components/callout#usage","content":"Use a callout to bring attention to important information that is related but set apart from the main content. Effective callouts emphasize, summarize, or provide additional information about the main content, but they should also be clear as standalone snippets of information. In other words, callouts should make sense both in context and out of context. Callouts vs. Alerts Callouts are meant to be part of the main document and should exist on the page when it first loads. It is not recommended to use a callout to alert the user of something that just happened, as screen reader users will not be alerted to the change. "},{"title":"Presets​","type":1,"pageTitle":"Callout","url":"docs/components/callout#presets","content":"Three preset callouts are provided to emphasize &quot;success,&quot; &quot;warning,&quot; and &quot;error&quot; in a consistent way. Be careful to always provide a title for these presets, as color and icons alone will never convey meaning to everyone. A clear title will ensure that screen reader users and users with color blindness can still understand the role of the callout. Success Use the success preset to call attention to positive things, such as a correct answer or a good practice. Warning Use the warning preset to caution or warn the reader. Error Use the error preset to call attention to negative things, such as incorrect answers or a bad practice. "},{"title":"React API​","type":1,"pageTitle":"Callout","url":"docs/components/callout#react-api","content":""},{"title":"Callout​","type":1,"pageTitle":"Callout","url":"docs/components/callout#callout","content":"import { Callout } from '@wwnds/react'; Copy Live Editor &lt;Callout title=&quot;Lorem Ipsum&quot; icon=&quot;star&quot; border=&quot;left&quot; dismissible&gt; &lt;p&gt; Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type. &lt;/p&gt; &lt;/Callout&gt; &lt;Callout title=&quot;Lorem Ipsum&quot; icon=&quot;star&quot; border=&quot;left&quot; dismissible&gt; &lt;p&gt; Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type. &lt;/p&gt; &lt;/Callout&gt; Result Loading... Name\tDescription\tType title The title summarizes the callout's contents.\tstring icon An icon can be added for character or to emphasize the callout's title.\tIconVariant | SVGIcon color The callout's color family.\tSystemColors | &quot;warning&quot; | &quot;primary&quot; | &quot;base&quot; | &quot;error&quot; | &quot;success&quot; border The position of the border.\t&quot;top&quot; | &quot;right&quot; | &quot;bottom&quot; | &quot;left&quot; dismissible Indicates whether callout can be dismissed.\tboolean tag The HTML element used for the callout. This will default toasidewhen a title is provided, making it alandmarkwith an accessible name of title. If no title is provided, this will default to div to ensure that it is not a landmark. This behavior can be overridden by providing an explicit tag. &quot;div&quot; | &quot;aside&quot; onDismiss Callback function that is called when the callout is dismissed.\t(() =&gt; void) baseName The base class name according to BEM conventions.\tstring iconClass The className that will be applied to the callout icon.\tstring headerClass The className that will be applied to the callout header element.\tstring titleClass The className that will applied to the callout title.\tstring dismissClass The className that will be applied to the close Button.\tstring bodyClass The className that will be applied to the callout's body container\tstring "},{"title":"Callout Presets​","type":1,"pageTitle":"Callout","url":"docs/components/callout#callout-presets","content":"Each of the three presets use the main Callout's props but sets a default border, color, icon, and title for your convenience. import { CalloutError, CalloutSuccess, CalloutWarning } from '@wwnds/react'; Copy CalloutSuccess This preset is equivalent to: &lt;Callout border=&quot;left&quot; color=&quot;success&quot; icon=&quot;check-circle&quot; title=&quot;Success&quot; /&gt; Copy CalloutWarning This preset is equivalent to: &lt;Callout border=&quot;left&quot; color=&quot;warning&quot; icon=&quot;warning&quot; title=&quot;Warning&quot; /&gt; Copy CalloutError This preset is equivalent to: &lt;Callout border=&quot;left&quot; color=&quot;error&quot; icon=&quot;exclamation-circle&quot; title=&quot;Error&quot; /&gt; Copy "},{"title":"Button","type":0,"sectionRef":"#","url":"docs/components/button","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Button","url":"docs/components/button#anatomy","content":"Text - button text lets the user know what will happen when they click the button. If a button's text is not displayed inside the button, it should be displayed in a related tooltip. Icon (optional) - an icon can be added either before or after a button to emphasize the button text or character. "},{"title":"Usage​","type":1,"pageTitle":"Button","url":"docs/components/button#usage","content":"A button is a standalone call-to-action with space or visual emphasis around it.A button has a meaningful label that communicates the action that users can take.Space (keyup) and Enter (keydown) activates the button. Do Do indicate the most important action on a page or region with a high-emphasis Primary button.Do indicate less important actions with medium-emphasis Secondary buttons or low-emphasis Tertiary buttons. Don't Don't wrap text inside a button.Don't use labels that are too long. A button's label should be very concise.Don't choose default button colors that could be confused with disabled buttons.Don't create links that look like buttons. If dictation software users say &quot;show buttons&quot;, the actions will not be listed. Keyboard users may try to press Space to activate, which will do nothing. "},{"title":"Buttons vs. links​","type":1,"pageTitle":"Button","url":"docs/components/button#buttons-vs-links","content":"Links are similar to buttons but the two are not interchangeable. The following should help differentiate when a link may be a better fit for your control. Consider using links if... You are navigating to another place, either on the same page or on a different page.The action will change the URL.It would be useful to &quot;Copy&quot;, &quot;Open in a new tab&quot;, or &quot;Bookmark&quot; the destination URL.The label is embedded in a sentence, and does not need margins or padding.The label conveys location, not an action (for example: a link that references a resource).Only Enter (keydown) should activate the link. Links always move focus when activated. Use a button if the component is styled like a button. (See Don't create links that look like buttons, above).If a button navigates the user to a new page or section, it might not meet the user's expectations.A button will not record the navigation in the user's browser history, so they will not be able to return to the previous location using their browser's back button.Consider the overall navigation of the site. Links help define the structure, architecture and hierarchy of the site—buttons don't. "},{"title":"React API​","type":1,"pageTitle":"Button","url":"docs/components/button#react-api","content":"We expose two components for the button API, the Button and the IconButton. Both extend the React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt; interface, meaning any prop that is valid on a &lt;button&gt; is a valid prop on our &lt;Button&gt; or &lt;IconButton&gt;. "},{"title":"Button​","type":1,"pageTitle":"Button","url":"docs/components/button#button","content":"import { Button } from '@wwnds/react'; Copy Live Editor &lt;Button variant=&quot;solid&quot;&gt;Solid&lt;/Button&gt; &lt;Button variant=&quot;solid&quot;&gt;Solid&lt;/Button&gt; Result Loading... Name\tDescription\tType children (required) Button children are required because they are used to provide an accessible label for the button. When rendering with iconOnly, the children will be rendered as an accessible Tooltip that labels the button. ReactNode variant Button variant conveys the button's level of visual emphasis.\tButtonVariant icon An icon to include in the button.\tIconVariant | SVGIcon iconRight Indicates whether the icon should be to the right of the text. By default, the icon is to the left of the text. boolean iconOnly Indicates whether the button's contents should only be the icon. Whentrue, the button's text is still required but will be used as the icon'saria-label. If no icon is specified, this prop has no effect. boolean color The button's color, restricted to design system colors, excluding disabled (prefer the disabled prop). Note that an undefinedcolor will result in the &quot;primary&quot; color being used. SystemColors | &quot;warning&quot; | &quot;primary&quot; | &quot;base&quot; | &quot;error&quot; | &quot;success&quot; buttonRef A reference to the inner &lt;button&gt; element.\tRef&lt;HTMLButtonElement&gt; baseName The base class name according to BEM conventions.\tstring iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a &lt;span&gt;\tstring tooltipProps Tooltip props that should be included when the button's children are rendered as a tooltip. Partial&lt;TooltipCoreProps&gt; active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"IconButton​","type":1,"pageTitle":"Button","url":"docs/components/button#iconbutton","content":"The IconButton is a simplified way to set an iconOnly button. These two are identical: &lt;Button variant=&quot;ghost&quot; iconOnly icon=&quot;info&quot;&gt;More information&lt;/Button&gt; &lt;IconButton icon=&quot;info&quot;&gt;More information&lt;/IconButton&gt; Copy import { IconButton } from '@wwnds/react'; Copy Live Editor &lt;IconButton icon=&quot;info&quot;&gt;More information&lt;/IconButton&gt; &lt;IconButton icon=&quot;info&quot;&gt;More information&lt;/IconButton&gt; Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring children (required) Button children are required because they are used to provide an accessible label for the button. When rendering with iconOnly, the children will be rendered as an accessible Tooltip that labels the button. ReactNode color The button's color, restricted to design system colors, excluding disabled (prefer the disabled prop). Note that an undefinedcolor will result in the &quot;primary&quot; color being used. SystemColors | &quot;warning&quot; | &quot;primary&quot; | &quot;base&quot; | &quot;error&quot; | &quot;success&quot; variant Button variant conveys the button's level of visual emphasis.\tButtonVariant icon An icon to include in the button.\tIconVariant | SVGIcon tooltipProps Tooltip props that should be included when the button's children are rendered as a tooltip. Partial&lt;TooltipCoreProps&gt; iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a &lt;span&gt;\tstring buttonRef A reference to the inner &lt;button&gt; element.\tRef&lt;HTMLButtonElement&gt; active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"Choice Field","type":0,"sectionRef":"#","url":"docs/components/choice-field","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#anatomy","content":"Label: text that conveys how the choices are related and prompts the user to choose one or more choice.Current selection: a selected choice indicates that it will be included when the field is submitted.Choices: the available choices. If the Choice Field is single-choice, all choices should be radio buttons.If the Choice Field is multiple-choice, all choices should be checkboxes. "},{"title":"Usage​","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#usage","content":"In most cases, this component should not be used directly. Rather, you should choose ahead of time whether your field should be single-choice or multi-choice and use the corresponding implementation. For single-choice, use the Radio Group.For multi-choice, use the Checkbox Group. "},{"title":"React API​","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#react-api","content":"import { Choice, ChoiceField } from '@wwnds/react'; Copy "},{"title":"ChoiceField​","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#choicefield","content":"To switch a ChoiceField between single- and multi-choice, add or remove the multiple prop. Live Editor &lt;ChoiceField label=&quot;Choose your favorite fruits.&quot; name=&quot;fruit&quot; multiple&gt; &lt;Choice&gt;Apple&lt;/Choice&gt; &lt;Choice&gt;Banana&lt;/Choice&gt; &lt;Choice&gt;Kiwi&lt;/Choice&gt; &lt;Choice&gt;Orange&lt;/Choice&gt; &lt;/ChoiceField&gt; &lt;ChoiceField label=&quot;Choose your favorite fruits.&quot; name=&quot;fruit&quot; multiple&gt; &lt;Choice&gt;Apple&lt;/Choice&gt; &lt;Choice&gt;Banana&lt;/Choice&gt; &lt;Choice&gt;Kiwi&lt;/Choice&gt; &lt;Choice&gt;Orange&lt;/Choice&gt; &lt;/ChoiceField&gt; Result Loading... Name\tDescription\tType label (required) Text that conveys how the choices are related and prompts the user to choose one or more choice. ReactNode multiple Whether the field is multi-select or single-select.\tboolean name The name that will be assigned to all child &lt;input&gt; elements.\tstring fieldName The name that will be assigned to the parent &lt;fieldset&gt;.\tstring baseName The base class name according to BEM conventions.\tstring choiceClass The class name that will be used on all Choice elements.\tstring required Indicates whether a selection must be made or not.\tboolean requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"Choice​","type":1,"pageTitle":"Choice Field","url":"docs/components/choice-field#choice","content":"Live Editor &lt;Choice&gt;Apple&lt;/Choice&gt; &lt;Choice&gt;Apple&lt;/Choice&gt; Result Loading... Name\tDescription\tType type &quot;checkbox&quot; | &quot;radio&quot; indeterminate Mark the checkbox as indeterminate. Has no effect when type=&quot;radio&quot;. Reference: DOM - indeterminateMDN - indeterminate boolean requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean thumbnail The thumbnail element.\tReactNode baseName The base class name according to BEM conventions.\tstring controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's &lt;input&gt; element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: MDN - change eventMDN - input event ((e: Event) =&gt; void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) =&gt; void) "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"docs/components/checkbox","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#anatomy","content":"The anatomy for both the standalone checkbox and a group of related checkboxes are outlined here. "},{"title":"Checkbox​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkbox","content":"Control - the input control that conveys the current state of the checkbox to the user.Label - a short name that lets the user know what the checkbox is checking. Clicking the label should toggle the checkbox.Description (optional) - additional text that can be used to add clarity or context to the checkbox label. Clicking the description should do nothing. "},{"title":"Checkbox Group​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkbox-group","content":"Label - text that conveys how the checkboxes are related and prompts the user to check one or more checkbox.Current selection: a checked checkbox indicates that it will be included when the field is submitted.Choices - the available checkboxes. Clicking a checkbox will check or uncheck it. "},{"title":"Usage​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#usage","content":"A single checkbox has two mutually exclusive states: checked or unchecked.Space toggles the state of the checkbox.Use a group of checkboxes to allow a user to check zero, one or multiple options from a list, and display all available options.Checkboxes may allow users to sub-select options from a nested list (see tri-state checkboxes).Checkboxes work independently of other checkboxes, unless they are controlled by a tri-state checkbox.Avoid setting default options, because pre-checking an option makes it more likely that users will not make a conscious choice and submit an option unintentionally.Consider the most logical order to list options. Options may be listed alphabetically, by popularity, or some other ordered system that should be clear to the user. Do Do allow users to check an option by clicking the checkbox or its label.Do position the checkbox to the left of its label.Do separate groups of checkboxes with group labels.Do display options in a vertical layout for easier scanning.Do define a label for the checkbox, even if it is not visible (example: when checking a row in a table). Don't Don’t use checkboxes if only one item can be checked from a list. Use radio buttons or a dropdown instead.Don’t use a checkbox if an action will take immediate effect when the user checks or unchecks it. Add a Submit button to confirm, or use a toggle instead.Don’t use negative statements for a checkbox, because taking action to check it is confusing and counter-intuitive. (example: “I don’t want to receive email…”) "},{"title":"Tri-state Checkbox​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#tri-state-checkbox","content":"A tri-state checkbox can be used to represent and control the state of a group of other checkboxes. This type of checkbox adds an &quot;indeterminate&quot; state that conveys to the user that some—but not all—of the related checkboxes are checked. If all options in the group are checked, the tri-state checkbox displays as checked.If some of the options in the group are checked, the tri-state checkbox displays as indeterminate (partially checked).If none of the options in the group are checked, the tri-state checkbox displays as unchecked.If a user checks a tri-state checkbox, then all the options in the group are checked.If a user unchecks a tri-state checkbox, then all the options in the group are unchecked. "},{"title":"React API​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#react-api","content":"import { Checkbox, CheckboxGroup } from '@wwnds/react'; Copy "},{"title":"Checkbox​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkbox-1","content":"A single checkbox component. Live Editor &lt;Checkbox description=&quot;Additional information about this checkbox.&quot; required requiredIndicator &gt; Checkbox &lt;/Checkbox&gt; &lt;Checkbox description=&quot;Additional information about this checkbox.&quot; required requiredIndicator &gt; Checkbox &lt;/Checkbox&gt; Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: MDN - change eventMDN - input event ((e: Event) =&gt; void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) =&gt; void) indeterminate Mark the checkbox as indeterminate. Has no effect when type=&quot;radio&quot;. Reference: DOM - indeterminateMDN - indeterminate boolean requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean thumbnail The thumbnail element.\tReactNode controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's &lt;input&gt; element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"CheckboxGroup​","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#checkboxgroup","content":"A container for a set of related Checkbox components and its associated prompt (label). Live Editor &lt;CheckboxGroup label=&quot;Select your favorite fruits.&quot; name=&quot;fruit&quot;&gt; &lt;Checkbox thumbnail=&quot;🍎&quot; description=&quot;A classic choice&quot;&gt;Apple&lt;/Checkbox&gt; &lt;Checkbox thumbnail=&quot;🍌&quot; description=&quot;A taste of the tropics&quot;&gt;Banana&lt;/Checkbox&gt; &lt;Checkbox thumbnail=&quot;🥝&quot; description=&quot;A bit more exotic&quot;&gt;Kiwi&lt;/Checkbox&gt; &lt;Checkbox thumbnail=&quot;🍊&quot; description=&quot;Tangy and juicy&quot;&gt;Orange&lt;/Checkbox&gt; &lt;/CheckboxGroup&gt; &lt;CheckboxGroup label=&quot;Select your favorite fruits.&quot; name=&quot;fruit&quot;&gt; &lt;Checkbox thumbnail=&quot;🍎&quot; description=&quot;A classic choice&quot;&gt;Apple&lt;/Checkbox&gt; &lt;Checkbox thumbnail=&quot;🍌&quot; description=&quot;A taste of the tropics&quot;&gt;Banana&lt;/Checkbox&gt; &lt;Checkbox thumbnail=&quot;🥝&quot; description=&quot;A bit more exotic&quot;&gt;Kiwi&lt;/Checkbox&gt; &lt;Checkbox thumbnail=&quot;🍊&quot; description=&quot;Tangy and juicy&quot;&gt;Orange&lt;/Checkbox&gt; &lt;/CheckboxGroup&gt; Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring name The name that will be assigned to all child &lt;input&gt; elements.\tstring label (required) Text that conveys how the choices are related and prompts the user to choose one or more choice. ReactNode description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] required Indicates whether a selection must be made or not.\tboolean requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring fieldName The name that will be assigned to the parent &lt;fieldset&gt;.\tstring choiceClass The class name that will be used on all Choice elements.\tstring "},{"title":"Disclosure","type":0,"sectionRef":"#","url":"docs/components/disclosure","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#anatomy","content":"Summary button - a control that opens or closes the disclosure and conveys to the user what is contained in the disclosure body.Summary marker - an icon that indicates that the disclosure can be opened or closed. When displayed before the label, the marker should point to the right when closed and down when open.When displayed after the label, the marker should point down when closed and up when open. Body - the disclosed contents, as summarized by the summary button. "},{"title":"Usage​","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#usage","content":"Use a disclosure when you want to help the user manage their attention on the page. Disclosures allow the user to skip over secondary content or features by not expanding the disclosure, while still giving them the option to delve deeper should they choose to expand it. The disclosure is named for the principle of progressive disclosure. A disclosure has two states: collapsed and expanded. A disclosure is collapsed by default.A disclosure should include an icon that conveys that it can be activated for more information.A disclosure’s label should clearly and succinctly describe its hidden content, so that the user can choose to expand it.When a disclosure has focus, Enter and Space activate the disclosure and toggle the visibility of content.All focusable elements inside a disclosure are included in the tab order, if the disclosure is expanded. Do Do use a disclosure to make the page easier to scan, and hide lower-priority information that only some users will need.Do ensure that the entire expandable button (label and icon) is clickable.Do display the expanded content directly after the expandable button. Don't Don’t use a disclosure if most or all users need to see the content. When content is hidden, users may ignore that information.Don’t display a disabled disclosure if there is no content to reveal. Instead, do not display the disclosure at all, or include a message explaining why there is no content when the user activates it.Don’t use an icon that has multiple meanings within the same system. Notes If there is only one section of content, then use a disclosure.If there are multiple sections of content, then use an accordion or tabs. "},{"title":"React API​","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#react-api","content":"import { Disclosure } from '@wwnds/react'; Copy "},{"title":"Disclosure​","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#disclosure","content":"Live Editor &lt;Disclosure panel summary=&quot;Default disclosure&quot;&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. &lt;/Disclosure&gt; &lt;Disclosure panel summary=&quot;Default disclosure&quot;&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. &lt;/Disclosure&gt; Result Loading... Name\tDescription\tType summary (required) The content for the summary element generated by the disclosure component.\tstring marker The marker icon that indicates the disclosure's current state. Similar to theCSS ::marker. The default is caret-right. When panel is true, the default ischevron-down. IconVariant | SVGIcon | ((panel?: boolean) =&gt; IconVariant | SVGIcon | null) | null | undefined markerPosition The position of the marker. right when panel={true} and left otherwise.\t&quot;right&quot; | &quot;left&quot; | ((panel?: boolean) =&gt; &quot;right&quot; | &quot;left&quot; | null) | null | undefined markerTransform How the marker should move when it opens. Default is &quot;rotate-90&quot;.\t&quot;none&quot; | &quot;rotate-90&quot; | &quot;flip-3d&quot; isOpen Used to set the initial open state or fully control it.\tboolean panel Indicates that the disclosure should be in &quot;panel&quot; mode, which has a few effects: The default marker will be chevron-downThe default markerPosition will be rightThe default markerTransform will be flip-3dThe disclosure will be given the nds-disclosure--panel modifier class boolean reducedMotion Indicates that animations should be disabled.\tboolean baseName The base className according to BEM conventions.\tstring summaryClass The className that will be applied to the &lt;summary&gt;.\tstring contentsOuterClass The className for the outer contents &lt;div&gt;.\tstring contentsInnerClass The className that will be applied to the inner contents &lt;div&gt;.\tstring markerClass The className that will be applied to the summary's icon indicator, which takes the place of the native summary::marker pseudo element. string onCloseStart Lifecycle method that is triggered when the disclosure begins to close. Returning false will prevent the disclosure from beginning to close. LifecycleCallback onCloseCancel Lifecycle method that is triggered when the user clicks on the disclosure as it's closing. Returning false will cause the disclosure to continue closing. LifecycleCallback onCloseEnd Lifecycle method that is triggered when the disclosure has finished closing.\tLifecycleCallback onOpenStart Lifecycle method that is triggered when the disclosure begins to open. Returning false will prevent the disclosure from beginning to open. LifecycleCallback onOpenCancel Lifecycle method that is triggered when the user clicks on the disclosure as it's opening. Returning false will cause the disclosure to continue opening. LifecycleCallback onOpenEnd Lifecycle method that is triggered when the disclosure has finished opening.\tLifecycleCallback "},{"title":"Layout Grid","type":0,"sectionRef":"#","url":"docs/components/layout-grid","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#anatomy","content":"A Layout Grid includes: ColumnsGuttersMarginsBreakpoint Ranges "},{"title":"Usage​","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#usage","content":"Columns set the widths of page regions and align content to consistent guides. All columns are of equal width.Gutters are the spaces between columns that help separate content. All gutters are of equal width.Margins are the spaces between the content and the left/right edges of the screen. Left and right margins should be the same width.Margins can be adjusted to ensure appropriate line length at each breakpoint range. Gutters and margins can be different widths.A Breakpoint Range is a range of screen sizes that have the same layout. At each breakpoint, the layout may adjust to better fit the screen size.The number of columns and the width of the margins and gutters is determined by each breakpoint range. Dos Do align major content areas or regions of the page to the layout grid.Do design layouts for the smallest screen sizes first.Do set a maximum width for the layout grid or content areas within the grid, to avoid long line lengths. Don'ts Don’t set margins so large that there isn’t enough room for content.Don’t include fixed-width sidebars in the layout grid.Don’t visually reorder columns independently from their position in the markup. "},{"title":"Types​","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#types","content":""},{"title":"Fluid Grid​","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#fluid-grid","content":"By default, use a fluid grid so that content areas flexibly scale to fit any screen width.Column widths are set as percentages of the overall screen width.Margins and gutters have a fixed width at each breakpoint range. "},{"title":"Fixed Grid​","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#fixed-grid","content":"Use a fixed grid if it is important for the width of the content area to be static within a breakpoint range.Gutters and column widths have a fixed width at each breakpoint range, so the content only changes at each breakpoint.Margins scale fluidly as the overall screen width changes. "},{"title":"Link","type":0,"sectionRef":"#","url":"docs/components/link","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Link","url":"docs/components/link#anatomy","content":"Text - link text should succinctly describe its destination.Destination - where the link will navigate when clicked. This is typically the address (URL) of another page, or a fragment identifier on the current page. "},{"title":"Usage​","type":1,"pageTitle":"Link","url":"docs/components/link#usage","content":"Links (formally &quot;hyperlinks&quot;) are foundational to the web, allowing documents to be connected. These connections can be thought of as the webbing between sites, which is why we call it &quot;the web.&quot; Because links form the basis for how we navigate the web, great care should be taken not to override their core behavior. Clicking a link navigates the user to another place on the same page or to a different page.A link should always affect the browser history. In other words, after a user clicks a link to navigate to a new location, they should be able to return by pressing the browser's back button. A link allows the user to return to the previous location by pressing the browser's back button.Activating the link changes the URL in the same tab or opens a new tab with the link URL.Links should open in the same tab when users are navigating within the same page, product or user flow.Links can open in a new tab when it is taking the user to another website and/or it is in the user's interest not to lose their place in the current flow. Users don't usually expect links to open in a new tab and they can manually choose to open a link in a new tab or window, so when in doubt default to opening in the same tab.All links that open in a new tab display the launch icon after the link text.A link's href value must be a valid URL or URL fragment.Enter (keydown) activates the link. Links always move focus when activated.Links in body copy should always be underlined and displayed in a different color.Links add cognitive load, as every link presents the user with a decision to activate it or not. For this reason, links should be used sparingly and include as few words as possible while accurately and clearly describing the destination.A destination should only be linked once in a given page or section.When linking to the same destination on different pages, the link text should be the same. Do Do use a link when… It would be useful to &quot;Copy&quot;, &quot;Open in a new tab&quot;, or &quot;Bookmark&quot; the destination URL.The text content is embedded in a sentence, and does not need margins or padding.The text content conveys location, not an action (for example: a link that references a resource).You want to record the navigation in the user's browser history. Do style links so that they are visually different from plain text, and indicate that they can be clicked. Don't Don't create links that look like buttons. If dictation software users say &quot;show buttons&quot;, the actions will not be listed. Keyboard users may try to press Space to activate, which will do nothing.Don't use an ambiguous label like “click here”. The link's text content should clearly describe its destination or purpose.Don't include the punctuation if a link is at the end of a sentence or before a comma.Don't use Javascript to simulate links. Use a valid href instead. Consider using buttons if... The component is styled like a button. (See Don't create links that look like buttons, above).The label communicates an action that the user can take.If the action taken will change or manipulate data on the page. "},{"title":"Interactions​","type":1,"pageTitle":"Link","url":"docs/components/link#interactions","content":"Links are focusable so that they can be activated by all users.Links are activated with Enter or pointer click. "},{"title":"React API​","type":1,"pageTitle":"Link","url":"docs/components/link#react-api","content":"We expose one component for the link API, the Link. "},{"title":"Link​","type":1,"pageTitle":"Link","url":"docs/components/link#link","content":"The &lt;Link&gt; component extends the React.AnchorHTMLAttributes&lt;HTMLAnchorElement&gt; interface. If defined, our &lt;Link&gt; will use the link component provided by the nearest AppProvider context. This allows you to use our Link wrapper for your application's router link component, such as the React Router &lt;Link&gt;. If the nearest link component context is undefined, the rendered link will be a normal anchor element with the added external prop that can be used to make the link open in an external window/tab. "},{"title":"","type":1,"pageTitle":"Link","url":"docs/components/link##","content":"import { Link } from '@wwnds/react'; Copy Live Editor &lt;AppProvider linkComponent={null}&gt; &lt;Link external={true} href=&quot;https://github.com/wwnorton/design-system&quot;&gt; Norton Design System &lt;/Link&gt; &lt;/AppProvider&gt; &lt;AppProvider linkComponent={null}&gt; &lt;Link external={true} href=&quot;https://github.com/wwnorton/design-system&quot;&gt; Norton Design System &lt;/Link&gt; &lt;/AppProvider&gt; Result Loading... Name\tDescription\tType external Indicates that the link should open in a new window or tab.\tany "},{"title":"Dropdown","type":0,"sectionRef":"#","url":"docs/components/dropdown","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#anatomy","content":"Label - a short description or prompt that lets the user know what they will be selecting.Button - a button that opens the dropdown listbox and displays the currently selected option. Default text before selection should be &quot;Select&quot;.A marker should be displayed to the right of the button's text to convey whether the dropdown listbox is open or closed. Listbox - a container for the list of options that only appears when opened by the dropdown button.Selected option - the currently selected option.Options - the available options. Clicking an unselected option will select that option, deselect the currently selected option, and close the listbox. "},{"title":"Usage​","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#usage","content":"Use a dropdown to select one option from a collapsed set of available options.By default, dropdown options are mutually exclusive. The user can only select 1 option.When an option is selected, the dropdown closes and the selected option updates to display that item.On load, the dropdown should display default text of &quot;Select&quot;. The user should be able to change it back to &quot;Select&quot; if they wish.Down Arrow/Up Arrow moves focus to the next/previous options, respectively.Home and End moves focus to the first/last options, respectively. Do Do keep dropdown options very concise. If long options are unavoidable, then they can truncate when the dropdown is in a closed state, but they should wrap fully in the open state. Do ensure that the clickable area includes the entire selected option area and the icon.Consider the most logical order to list options. Options could be listed alphabetically, chronologically, by popularity, etc. Don't Do not start all of the options in a dropdown with the same word or phrase.If there are more than 6 options, consider using a combo box instead.If there are 2 options, consider using [radio group](radio-group) or [switch](switch) instead. If your interface needs to contain many of these selections, use dropdowns over radio buttons. Do not use a dropdown when the user can multi-select options. Use checkboxes instead.If it is not absolutely necessary for a user to choose from a predefined set of options, then consider a [text field](text-field) for users to type their own information. "},{"title":"React API​","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#react-api","content":"We expose two components for the dropdown API: the Dropdownand the Option, which uses the BaseOption. import { Dropdown, Option } from '@wwnds/react'; Copy "},{"title":"Dropdown​","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#dropdown","content":"The Dropdown component does not expose a ref or extend a full DOM interface. Live Editor &lt;Dropdown label=&quot;Choose a sitcom&quot; sort=&quot;ascending&quot;&gt; &lt;Dropdown.Option&gt;The Office&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Community&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Friends&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Parks and Recreation&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;How I Met Your Mother&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Modern Family&lt;/Dropdown.Option&gt; &lt;Dropdown.Option disabled&gt;The Big Bang Theory&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Arrested Development&lt;/Dropdown.Option&gt; &lt;/Dropdown&gt; &lt;Dropdown label=&quot;Choose a sitcom&quot; sort=&quot;ascending&quot;&gt; &lt;Dropdown.Option&gt;The Office&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Community&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Friends&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Parks and Recreation&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;How I Met Your Mother&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Modern Family&lt;/Dropdown.Option&gt; &lt;Dropdown.Option disabled&gt;The Big Bang Theory&lt;/Dropdown.Option&gt; &lt;Dropdown.Option&gt;Arrested Development&lt;/Dropdown.Option&gt; &lt;/Dropdown&gt; Result Loading... Name\tDescription\tType label (required) The name of the dropdown. Required.\tReactNode children The options for the listbox. Each will be rendered inside an Optioncomponent. When specifying an option as an OptionProps object, the option's value must be the OptionProps['children']. ReactChild[] &amp; ReactNode sort Sort options by value. undefined will leave the options unsorted.\t&quot;ascending&quot; | &quot;descending&quot; selected A list of selected options.\tReactText buttonContents The contents of the button. Default is 'Select' on load and then it will match the contents of the currently selected option if no onChangecallback is provided. ReactNode isOpen Indicates whether the listbox is open.\tboolean closeOnExternalClick Indicates whether clicking outside the listbox should close the listbox.\tboolean closeOnDocumentEscape Indicates whether the dropdown should be closed on Escape.\tboolean matchWidth Indicates that the button and listbox should match widths. button the listbox will match the width of the button. listbox the button will match the width of the listbox. undefined no width matching should be done. &quot;button&quot; | &quot;listbox&quot; buttonWidth Set the width of the button. Use when matchWidth=&quot;button&quot; and the button's width is not set with CSS. string | number name The name attribute for the internal &lt;select&gt;.\tstring baseName The base class name according to BEM conventions. Default is &quot;dropdown&quot;.\tstring labelClass The class name for the label.\tstring buttonClass The class name for the button.\tstring listboxClass The class name for the listbox.\tstring optionClass The class name for all listbox options.\tstring popperClass The class name for the popper.\tstring buttonId An id for the button.\tstring listboxId An id for the listbox.\tstring onRequestClose Callback function that is called when the dropdown attempts to close its listbox. This will occur under the following conditions: The user clicks outside of the listbox and closeOnExternalClick istrue.The user presses Escape and closeOnDocumentEscape is true.The user presses Tab while the listbox is open. (() =&gt; void) onRequestOpen Callback function that is called when the dropdown attempts to open its listbox. This will occur under the following conditions: The user clicks the dropdown button (default: .dropdown__button).The user presses ArrowUp or ArrowDown while on the dropdown button. (() =&gt; void) onChange Callback function that is called when an option is selected. This will occur under the following conditions: When the user clicks an option.When the user presses Enter on the currently focused option.When the user releases the space bar on the currently focused option. ((payload: { value: ReactText; contents: ReactNode; }) =&gt; void) autofocus If set, the focusable dropdown option should be focused when it is rendered.\tboolean description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring transition The animation transition class applied to the popper as it enters or exits. A single name can be provided and it will be suffixed for each stage. For example, transition=&quot;fade&quot; applies: fade-enterfade-enter-activefade-exitfade-exit-activefade-appearfade-appear-active Each individual stage can also be specified independently: transition={{ appear: 'my-appear', appearActive: 'my-appear-active', appearDone: 'my-appear-done', enter: 'my-enter', enterActive: 'my-enter-active', enterDone: 'my-enter-done', exit: 'my-exit', exitActive: 'my-exit-active', exitDone: 'my-exit-done' }} Reference: react-transition-group's CSSTransition. string | CSSTransitionClassNames distance The offset distance(in pixels) from the reference. Will only be used if offset is undefined. number placement The Popper.js placement option.\tPlacement modifiers The Popper.js modifiers option.\tPartial&lt;Modifier&lt;any, any&gt;&gt;[] strategy The Popper.js strategy option.\tPositioningStrategy onFirstUpdate The Popper.js onFirstUpdate option.\t((arg0: Partial&lt;State&gt;) =&gt; void) "},{"title":"Option​","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#option","content":"The Option component extends the React.LiHTMLAttributes&lt;HTMLLIElement&gt; interface, and uses the ARIA option role. Note that the Dropdown also exposes the Option as a static member (Dropdown.Option) for your convenience. Live Editor &lt;Option&gt;Community&lt;/Option&gt; &lt;Option&gt;Community&lt;/Option&gt; Result Loading... Name\tDescription\tType disabled If set, this option is not selectable.\tboolean label The displayed option name. This will override children.\tReactNode selected Indicates that this option is currently selected.\tboolean value (required) The value of the option that will be submitted. If undefined, the labelor children will be used as the value. string | number marker An element that comes before the label/children, similar to CSS ::marker. Default is &lt;Icon variant=&quot;check&quot; /&gt;. Disable it entirely with null. ReactNode optionClass string "},{"title":"Modal","type":0,"sectionRef":"#","url":"docs/components/modal","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Modal","url":"docs/components/modal#anatomy","content":"Modal container - the modal container provides a boundary for the contents of the modal.Backdrop overlay - an overlay that prevents the user from interacting with the page's main content.Title (recommended) - the name of the modal lets the user know what to expect from it and functions as a header for the body of the modal.Body - the main content of the modal presents important information to the user or asks them to perform simple tasks before exiting the modal.Close button (optional) - a button that will always close the modal. This should always be included when no other controls exist inside the modal. Action buttons (optional) - one or more actions that will result in the dismissal of the modal. "},{"title":"Usage​","type":1,"pageTitle":"Modal","url":"docs/components/modal#usage","content":"Use modals to present important information or simple tasks to the user, disabling all access to the main content while the modal is active. Modals are sometimes called &quot;modal dialogs&quot; because they create a dialog between the application and the user in a different modality from the main content. Do Do use a modal to confirm irreversible actions, such as deleting content.Do use a modal to interrupt the user when it will help them accomplish their tasks.Do be careful about ambiguous action buttons, such as &quot;Yes&quot; or &quot;No&quot;. Don't Don't overuse modals. They should be used sparingly and thoughtfully.Don't write long titles for modals. They should be clear and concise. "},{"title":"React API​","type":1,"pageTitle":"Modal","url":"docs/components/modal#react-api","content":"import { Modal } from '@wwnds/react'; Copy "},{"title":"Modal​","type":1,"pageTitle":"Modal","url":"docs/components/modal#modal","content":"Live Editor function ModalWithButton() { const [isOpen, setIsOpen] = React.useState(false); const open = () =&gt; setIsOpen(true); const close = () =&gt; setIsOpen(false); return ( &lt;&gt; &lt;Button variant=&quot;solid&quot; onClick={open}&gt;Open the modal&lt;/Button&gt; &lt;Modal title=&quot;Confirm the prompt&quot; isOpen={isOpen} onRequestClose={close} actions={[ &lt;Button variant=&quot;outline&quot; color=&quot;base&quot; onClick={close}&gt; Also confirm &lt;/Button&gt;, &lt;Button variant=&quot;solid&quot; onClick={close}&gt; Confirm &lt;/Button&gt;, ]} &gt; &lt;p&gt; This is a demo modal. Real modals should have useful information here. &lt;/p&gt; &lt;/Modal&gt; &lt;/&gt; ); } function ModalWithButton() { const [isOpen, setIsOpen] = React.useState(false); const open = () =&gt; setIsOpen(true); const close = () =&gt; setIsOpen(false); return ( &lt;&gt; &lt;Button variant=&quot;solid&quot; onClick={open}&gt;Open the modal&lt;/Button&gt; &lt;Modal title=&quot;Confirm the prompt&quot; isOpen={isOpen} onRequestClose={close} actions={[ &lt;Button variant=&quot;outline&quot; color=&quot;base&quot; onClick={close}&gt; Also confirm &lt;/Button&gt;, &lt;Button variant=&quot;solid&quot; onClick={close}&gt; Confirm &lt;/Button&gt;, ]} &gt; &lt;p&gt; This is a demo modal. Real modals should have useful information here. &lt;/p&gt; &lt;/Modal&gt; &lt;/&gt; ); } Result Loading... Name\tDescription\tType isOpen Indicates whether the Modal dialog is open.\tboolean title (required) The name of the Modal dialog. Required for accessibility but can be visually hidden with the hideTitle prop. string hideTitle Indicates that the title should be visually hidden. It will still be accessible to screen reader users. boolean hideCloseButton Indicates that the built-in close button in the top right should not be rendered. boolean actions A list of actions or React Fragment that will be set inside an action bar at the bottom of the Modal dialog. ReactFragment | ReactElement&lt;ButtonProps, string | JSXElementConstructor&lt;any&gt;&gt;[] stickyHeader Indicates whether the header should stick to the top of the screen. Only has an effect when the modal's content is longer than the window height and the user scrolls enough to move the header above to top of the screen. boolean stickyActionBar Indicates whether the footer should stick to the bottom of the screen. Only has an effect when the modal's content is longer than the window height and the footer is below the bottom of the screen. boolean focusOnOpen An element that should be focused on open. If none is specified, the first focusable element in the Modal will be focused. If none can be found, the header or content will be focused. HTMLElement closeOnBackdropClick Indicates whether clicking the backdrop should close the Modal dialog.\tboolean closeOnEscape Indicates whether Escape should close the Modal dialog.\tboolean mountPoint A function that returns an element where the Modal dialog should be attached to the DOM. Default is the body. (() =&gt; HTMLElement) baseName string backdropClass string headerClass string titleClass string closeButtonClass string contentClass string actionBarClass string portalClass string onRequestClose Callback function that is called when the Modal would like to close. This will happen under the following conditions: if closeOnBackdropClick is true and the user clicks the backdrop.if closeOnEscape is true and the user presses Escape.if hideCloseButton is not true and the user clicks the close button. To close the Modal when onRequestClose triggers, simply update theisOpen prop to false. (() =&gt; void) onOpen (() =&gt; void) headerRef Ref&lt;HTMLElement&gt; contentRef Ref&lt;HTMLElement&gt; actionBarRef Ref&lt;HTMLElement&gt; modal boolean "},{"title":"Progress Bar","type":0,"sectionRef":"#","url":"docs/components/progress-bar","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Progress Bar","url":"docs/components/progress-bar#anatomy","content":"Track - a fixed width track for the progress indicator to travel along.Progress indicator - an animated bar that conveys processing or progress toward completion.Label - a description of what is progressing. "},{"title":"Usage​","type":1,"pageTitle":"Progress Bar","url":"docs/components/progress-bar#usage","content":"Use a progress bar when there will be a delay of more than 1 second in loading or completing an action.A progress bar can be used both when the amount of time is determined and when it is indeterminate.If an application is loading, then the progress bar will display and the user will be blocked from interacting with the application until it is loaded.You can also use a spinner. Do Do use only 1 progress bar on the screen at a time.Do start the progressive animation slower and allow it to move faster as it approaches the end. It is always a better user experience to exceed customer expectations. Don't Don't use a progress bar for an immediate process (less than 1 second). Nothing should display in that situation.Don't use a progress bar if most of the application can load very quickly except for some text or data elements. Use a skeleton instead.Don't use a progress bar inside of a button. Use a spinner or loading state instead. Indeterminate vs. Determinate The progress bar is in &quot;indeterminate&quot; mode if it does not have a set value. This conveys to users that something is processing without communicating how close it is to being complete. Loading... When a progress bar does have a set value, it is in &quot;determinate&quot; mode. This gives the user an estimate of the percentage of time remaining until completion. Downloading... "},{"title":"React API​","type":1,"pageTitle":"Progress Bar","url":"docs/components/progress-bar#react-api","content":"We expose one component for the progress bar API, the ProgressBar. Related concepts HTML element: &lt;progress&gt;DOM interface: HTMLProgressElementARIA role: progressbar "},{"title":"ProgressBar​","type":1,"pageTitle":"Progress Bar","url":"docs/components/progress-bar#progressbar","content":"The ProgressBar component extends the React.HTMLAttributes&lt;HTMLDivElement&gt; interface. import { ProgressBar } from '@wwnds/react'; Copy Live Editor /* set progress to a value between 0 and 1 to make determinate */ &lt;ProgressBar label=&quot;Loading...&quot; progress={undefined} /&gt; /* set progress to a value between 0 and 1 to make determinate */ &lt;ProgressBar label=&quot;Loading...&quot; progress={undefined} /&gt; Result Loading... Name\tDescription\tType size The hight of the progress bar. This sets a className of nds-progressbar--${size}, which can be used to change the size. @wwnds/core's default stylings will correspond to: small 4px undefined 8px large 16px &quot;small&quot; | &quot;large&quot; buffer A buffered value between 0 and 1.\tnumber reversed Indicates that the progress bar should grow right to left.\tboolean progress Indicates how much of the task has been completed.\tnumber max Describes how much work is required to complete the progress. If defined, it must be greater than 0 and be a valid floating point number. The default is 1. number label (required) The progress bar's label describes what is progressing. It is required and recommended to be visible. string hideLabel Indicates that the label should not be visible. Note that the label will still be accessible to assistive technologies even when it is not visible. boolean baseName The base class name according to BEM conventions.\tstring labelClass The className for the progress indicator's label. Default is ${baseName}__label.\tstring "},{"title":"Popover","type":0,"sectionRef":"#","url":"docs/components/popover","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Popover","url":"docs/components/popover#anatomy","content":"Container - the popover's container overlays the main page's content.Arrow - a visual indicator that points to the related element.Title (recommended) - the title of a callout summarizes its contents.Close button (optional) - a button that will always close the popover.Body - the contents of the popover.Action buttons (optional) - one or more custom actions that will result in the popover closing. "},{"title":"Usage​","type":1,"pageTitle":"Popover","url":"docs/components/popover#usage","content":"Use a popover for progressive disclosure of complex related information or actions that don't belong on the main page. Do - Open a popover by clicking a button or with a timed trigger. - Display the popover near the triggering button to clearly convey the relationship between the trigger and the popover. Don't - Don't open a popover on focus. Popovers must be focused when they open, which means that opening one by focusing the trigger element would cause focus to move twice in one action. This is a violation of [WCAG 3.2.1: On Focus](https://www.w3.org/WAI/WCAG21/Understanding/on-focus.html). - Don't use a popover to label an element. Use a [tooltip](https://wwnorton.github.io/design-system/docs/components/tooltip) instead. "},{"title":"React API​","type":1,"pageTitle":"Popover","url":"docs/components/popover#react-api","content":"We expose one component for the popover API, the Popover. "},{"title":"Popover​","type":1,"pageTitle":"Popover","url":"docs/components/popover#popover","content":"The Popover component extends the React.HTMLAttributes&lt;HTMLElement&gt; interface and uses Popper.js for positioning. import { Popover } from '@wwnds/react'; Copy Live Editor function PopoverExample() { const [isOpen, setIsOpen] = React.useState(false); const [ref, setRef] = React.useState(); return ( &lt;&gt; &lt;Button variant=&quot;solid&quot; ref={setRef}&gt; Show popover &lt;/Button&gt; &lt;Popover title=&quot;Title&quot; hideTitle={false} hideCloseButton={false} placement=&quot;top&quot; reference={ref} isOpen={isOpen} onRequestClose={() =&gt; setIsOpen(false)} onRequestOpen={() =&gt; setIsOpen(true)} &gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco &lt;/Popover&gt; &lt;/&gt; ); } function PopoverExample() { const [isOpen, setIsOpen] = React.useState(false); const [ref, setRef] = React.useState(); return ( &lt;&gt; &lt;Button variant=&quot;solid&quot; ref={setRef}&gt; Show popover &lt;/Button&gt; &lt;Popover title=&quot;Title&quot; hideTitle={false} hideCloseButton={false} placement=&quot;top&quot; reference={ref} isOpen={isOpen} onRequestClose={() =&gt; setIsOpen(false)} onRequestOpen={() =&gt; setIsOpen(true)} &gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco &lt;/Popover&gt; &lt;/&gt; ); } Result Loading... Name\tDescription\tType title The name of the Modal dialog. Required for accessibility but can be visually hidden with the hideTitle prop. string hideTitle Indicates that the title should be visually hidden. It will still be accessible to screen reader users. boolean hideCloseButton Indicates that the built-in close button in the top right should not be rendered. boolean actions A list of actions or React Fragment that will be set inside an action bar at the bottom of the Modal dialog. ReactFragment | ReactElement&lt;ButtonProps, string | JSXElementConstructor&lt;any&gt;&gt;[] baseName The base class name according to BEM conventions.\tstring headerClass A className for the popover's header. Default will be ${baseName}__header.\tstring titleClass A className for the popover's title, which goes inside the header. Default will be ${baseName}__title. string closeButtonClass A className for the popover's close button, which goes inside the header. Default will be ${baseName}__close. string bodyClass A className for the body of the popover, where the children go. Default will be ${baseName}__content. string actionBarClass A className for the popover's action bar footer. Default will be ${baseName}__actionbar.\tstring arrowClass A className for the popover's arrow. Default will be ${baseName}__arrow. @deprecated - Use arrowElement. string onOpen Callback function that is called after the popover opens. The default function will focus the popover. Use this callback to focus something else inside the popover. ((popoverElement: HTMLElement) =&gt; void) onClose Callback function that is called after the popover closes. The default function will focus the reference element that opened the popover. ((shouldFocusReference: boolean) =&gt; void) isOpen Used to control whether the popper is open or closed.\tboolean transition The animation transition class applied to the popper as it enters or exits. A single name can be provided and it will be suffixed for each stage. For example, transition=&quot;fade&quot; applies: fade-enterfade-enter-activefade-exitfade-exit-activefade-appearfade-appear-active Each individual stage can also be specified independently: transition={{ appear: 'my-appear', appearActive: 'my-appear-active', appearDone: 'my-appear-done', enter: 'my-enter', enterActive: 'my-enter-active', enterDone: 'my-enter-done', exit: 'my-exit', exitActive: 'my-exit-active', exitDone: 'my-exit-done' }} Reference: react-transition-group's CSSTransition. string | CSSTransitionClassNames reference The reference element that the popper will be attached to. Popper.js - createPopper Element | VirtualElement | null arrowElement The element that should be used for the arrow. See the arrow modifier's element optionfor more details. string | HTMLElement | null distance The offset distance(in pixels) from the reference. Will only be used if offset is undefined. number boundary The element or area where the popper will be checked against for overflow. See the preventOverflow modifier's boundary optionfor more details. Boundary placement The Popper.js placement option.\tPlacement modifiers The Popper.js modifiers option.\tPartial&lt;Modifier&lt;any, any&gt;&gt;[] strategy The Popper.js strategy option.\tPositioningStrategy onFirstUpdate The Popper.js onFirstUpdate option.\t((arg0: Partial&lt;State&gt;) =&gt; void) hideDelay The duration in milliseconds that should elapse before closing, beginning after the pointer exits the reference's bounding box. Only has an effect for the mouseenter or pointerenter triggers. number showDelay The duration in milliseconds that should elapse before opening, beginning after isOpen is set to true. number onRequestClose A callback that occurs when the popper wants to close. The reason it is making this request is given by the first parameter. &quot;click.reference&quot; the reference element was clicked. &quot;click.internal&quot; something inside the popper was clicked. &quot;click.external&quot; something outside the popper or reference was clicked. &quot;escape&quot; the Escape key was pressed. &quot;blur&quot; the reference element lost focus. See blur event. &quot;pointerleave&quot; a pointer (mouse or touch) left the bounding box of the reference. See pointerenter event. ((triggeredBy: PopperTriggersClose) =&gt; void) onRequestOpen A callback that occurs when the popper wants to open. The reason it is making this request is given by the first parameter. &quot;click.reference&quot; the reference element was clicked. &quot;focus&quot; the reference was focused. See focus event. &quot;focusin&quot; the reference is about to be focused. See focusin event. &quot;pointerenter&quot; a pointer (mouse or touch) entered the bounding box of the reference. See pointerenter event. ((triggeredBy: PopperTriggersOpen) =&gt; void) "},{"title":"Radio Group","type":0,"sectionRef":"#","url":"docs/components/radio-group","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#anatomy","content":"The anatomy for both a group of related radio buttons and a single radio button are outlined here. "},{"title":"Radio Group​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radio-group","content":"Label - text that conveys how the radio buttons are related and prompts the user to select a single radio button.Current selection: a selected radio button indicates that it will be the option that is submitted.Choices - the available radio buttons. Clicking or arrowing to an unselected radio button will deselect the currently selected radio button. "},{"title":"Radio Button​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radio-button","content":"Control - the input control that conveys the current state of the radio button to the user.Label - a short name that lets the user know what the radio button is selecting. Clicking the label should select the radio button.Description (optional) - additional text that can be used to add clarity or context to the radio button label. Clicking the description should do nothing. Single Radio Button Usage Radio buttons must always be part of a radio group. Using a single radio button by itself would allow the user to check the option but not uncheck it. If that is desired, use a [checkbox](checkbox) instead to ensure that the user can uncheck it. "},{"title":"Usage​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#usage","content":"Use radio buttons to allow a user to select exactly one item from a set of options, and display all available options.Radio buttons should have between 2-5 options. If you have more than 5 options, use a dropdown or combo box. The options in a group of radio buttons must be mutually exclusive. The user can only select 1 Radio.Only use radio buttons when the field is required. If all radio buttons are in an unselected state on load, a user must select one of the radio buttons before proceeding.Arrow keys move focus within the group, uncheck the previously focused button, and check the newly focused button.Space selects the focused radio button if it is not already selected. Do Do allow users to select a Radio by clicking the radio button or its text label.Do position the radio button to the left of its label.Do display options in a vertical layout, by default, for easier scanning.Consider the most logical order to display options, such as alphabetical, chronological or by popularity. Don't Don’t use radio buttons if a user could select multiple options. Use [checkboxes](checkbox) instead.Don't use radio buttons if a user could select NO Radio. Use [checkboxes](checkbox) instead.Don’t use radio buttons if an action will take immediate effect when the user selects or deselects it. Use a [switch](switch) if there are two opposite options (example: YES/NO, ON/OFF).Otherwise, use a group of regular [buttons](button). "},{"title":"React API​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#react-api","content":"import { Radio, RadioGroup } from '@wwnds/react'; Copy "},{"title":"RadioGroup​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radiogroup","content":"Live Editor &lt;RadioGroup label=&quot;Select your favorite fruit.&quot; name=&quot;fruit&quot;&gt; &lt;Radio thumbnail=&quot;🍎&quot; description=&quot;A classic choice&quot;&gt;Apple&lt;/Radio&gt; &lt;Radio thumbnail=&quot;🍌&quot; description=&quot;A taste of the tropics&quot;&gt;Banana&lt;/Radio&gt; &lt;Radio thumbnail=&quot;🥝&quot; description=&quot;A bit more exotic&quot;&gt;Kiwi&lt;/Radio&gt; &lt;Radio thumbnail=&quot;🍊&quot; description=&quot;Tangy and juicy&quot;&gt;Orange&lt;/Radio&gt; &lt;/RadioGroup&gt; &lt;RadioGroup label=&quot;Select your favorite fruit.&quot; name=&quot;fruit&quot;&gt; &lt;Radio thumbnail=&quot;🍎&quot; description=&quot;A classic choice&quot;&gt;Apple&lt;/Radio&gt; &lt;Radio thumbnail=&quot;🍌&quot; description=&quot;A taste of the tropics&quot;&gt;Banana&lt;/Radio&gt; &lt;Radio thumbnail=&quot;🥝&quot; description=&quot;A bit more exotic&quot;&gt;Kiwi&lt;/Radio&gt; &lt;Radio thumbnail=&quot;🍊&quot; description=&quot;Tangy and juicy&quot;&gt;Orange&lt;/Radio&gt; &lt;/RadioGroup&gt; Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring name The name that will be assigned to all child &lt;input&gt; elements.\tstring label (required) Text that conveys how the choices are related and prompts the user to choose one or more choice. ReactNode description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] required Indicates whether a selection must be made or not.\tboolean requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring fieldName The name that will be assigned to the parent &lt;fieldset&gt;.\tstring choiceClass The class name that will be used on all Choice elements.\tstring "},{"title":"Radio​","type":1,"pageTitle":"Radio Group","url":"docs/components/radio-group#radio","content":"Note: there is no scenario where you would use a single Radio alone. Live Editor &lt;Radio&gt;Apple&lt;/Radio&gt; &lt;Radio&gt;Apple&lt;/Radio&gt; Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: MDN - change eventMDN - input event ((e: Event) =&gt; void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) =&gt; void) indeterminate Mark the checkbox as indeterminate. Has no effect when type=&quot;radio&quot;. Reference: DOM - indeterminateMDN - indeterminate boolean requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean thumbnail The thumbnail element.\tReactNode controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's &lt;input&gt; element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"Spinner","type":0,"sectionRef":"#","url":"docs/components/spinner","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Spinner","url":"docs/components/spinner#anatomy","content":"Progress circle - the circle spins to convey that something is processing and fills clockwise to convey progress toward completion.Label - a description of what is processing or progressing. "},{"title":"Usage​","type":1,"pageTitle":"Spinner","url":"docs/components/spinner#usage","content":"Use a spinner when there will be a delay of more than 1 second in loading or completing an action.A spinner can be used both when the amount of time is determined and when it is indeterminate.If an application is loading, then the spinner will display and the user will be blocked from interacting with the application until it is loaded.You can also use a progress bar. Do Do use only 1 spinner on the screen at a time.For buttons with spinners, the button should always be disabled until the action completes and the spinner no longer displays on the button. Don't Don’t use a spinner for an immediate process (less than 1 second); nothing should display in that situation.Don’t use a spinner if most of the application can load very quickly except for some text or data elements; use a skeleton instead. Indeterminate vs. Determinate The spinner is in &quot;indeterminate&quot; mode if it does not have a set value. This conveys to users that something is processing without communicating how close it is to being complete. Loading... When a spinner does have a set value, it is in &quot;determinate&quot; mode. This gives the user an estimate of the percentage of time remaining until completion. Downloading... "},{"title":"React API​","type":1,"pageTitle":"Spinner","url":"docs/components/spinner#react-api","content":"We expose one component for the spinner API, the Spinner. Related concepts HTML element: &lt;progress&gt;DOM interface: HTMLProgressElementARIA role: progressbar "},{"title":"Spinner​","type":1,"pageTitle":"Spinner","url":"docs/components/spinner#spinner","content":"The Spinner component extends the React.HTMLAttributes&lt;HTMLDivElement&gt; interface. import { Spinner } from '@wwnds/react'; Copy Live Editor /* set progress to a value between 0 and 1 to make determinate */ &lt;Spinner label=&quot;Loading...&quot; progress={undefined} /&gt; /* set progress to a value between 0 and 1 to make determinate */ &lt;Spinner label=&quot;Loading...&quot; progress={undefined} /&gt; Result Loading... Name\tDescription\tType labelPosition Where the label should be positioned relative to the spinner.\t&quot;right&quot; | &quot;bottom&quot; color The spinner's color, restricted tosystem colors. SystemColors size The width and height of the spinner. A number value will be interpreted as pixels. A string value should include its unit (e.g., 2rem). string | number strokeWidth The width of the spinner circle. Default is 4.\tnumber progress Indicates how much of the task has been completed.\tnumber max Describes how much work is required to complete the progress. If defined, it must be greater than 0 and be a valid floating point number. The default is 1. number label The progress bar's label describes what is progressing. It is required and recommended to be visible. string hideLabel Indicates that the label should not be visible. Note that the label will still be accessible to assistive technologies even when it is not visible. boolean baseName The base class name according to BEM conventions.\tstring labelClass The className for the progress indicator's label. Default is ${baseName}__label.\tstring "},{"title":"React Providers","type":0,"sectionRef":"#","url":"docs/components/react-providers","content":"","keywords":""},{"title":"App Provider​","type":1,"pageTitle":"React Providers","url":"docs/components/react-providers#app-provider","content":"The &lt;AppProvider&gt; is used to configure the design system at the application level and should wrap your whole application if used. Because it extends the &lt;ThemeProvider&gt;, it will be treated as the root theme configuration. For instance, to use your own router link and force a light color scheme: Example: light scheme and custom router link import React from 'react'; import ReactDOM from 'react-dom'; import { Link } from 'react-router-dom'; import { AppProvider } from '@wwnds/react'; import App from './App'; const rootElement = document.getElementById('root'); ReactDOM.render( &lt;React.StrictMode&gt; &lt;AppProvider linkComponent={Link} colorScheme=&quot;light&quot; ignoreOSColorScheme &gt; &lt;App /&gt; &lt;/AppProvider&gt; &lt;/React.StrictMode&gt;, rootElement, ); Copy Name\tDescription\tType colorScheme The desired color scheme. &quot;light&quot; – dark text on light background.&quot;dark&quot; – light text on dark background.&quot;inverse&quot; – the opposite color scheme from the parent &lt;ThemeProvider&gt;. Cannot be used on the root &lt;ThemeProvider&gt;.undefined – use the user's preferred color scheme. If ignoreOSColorSchemeis true, &quot;light&quot; will be used as a fallback. Reference: prefers-color-scheme media query. ColorScheme | &quot;inverse&quot; ignoreOSColorScheme If set, the user's operating system color scheme setting will be ignored.\tboolean onColorSchemeChange A callback function that will trigger any time the colorScheme changes. Use to update the color scheme store when it's changed by the user. ((scheme: ColorScheme) =&gt; void) linkComponent When defined, the design system &lt;Link&gt; component will render with the provided link component instead of its own render function. LinkComponent "},{"title":"Theme Provider​","type":1,"pageTitle":"React Providers","url":"docs/components/react-providers#theme-provider","content":"The &lt;ThemeProvider&gt; sets a color scheme context, setting a data-color-scheme attribute (&quot;light&quot; or &quot;dark&quot;) that can be used to theme children.@wwnds/core uses this to set color role token assignments, but you can use it however you like with a [data-color-scheme='light|dark'] selector. The &lt;ThemeProvider&gt; can be nested, and the highest-level provider will be used as the root provider. When undefined, the root provider will use the color scheme that the user prefers. And by default, the root color scheme will update whenever the user changes their preferred color scheme in their operating system settings. This can be disabled by setting ignoreOSColorScheme. When nested inside a parent &lt;ThemeProvider&gt;, the &quot;inverse&quot; value will use the inverse of the parent color scheme context. Live Editor &lt;ThemeProvider colorScheme=&quot;dark&quot;&gt; &lt;p className=&quot;themed&quot;&gt;Dark&lt;/p&gt; &lt;ThemeProvider colorScheme=&quot;inverse&quot;&gt; &lt;p className=&quot;themed&quot;&gt;Inverted&lt;/p&gt; &lt;ThemeProvider colorScheme=&quot;inverse&quot;&gt; &lt;p className=&quot;themed&quot;&gt;Double inverted&lt;/p&gt; &lt;/ThemeProvider&gt; &lt;/ThemeProvider&gt; &lt;/ThemeProvider&gt; &lt;ThemeProvider colorScheme=&quot;dark&quot;&gt; &lt;p className=&quot;themed&quot;&gt;Dark&lt;/p&gt; &lt;ThemeProvider colorScheme=&quot;inverse&quot;&gt; &lt;p className=&quot;themed&quot;&gt;Inverted&lt;/p&gt; &lt;ThemeProvider colorScheme=&quot;inverse&quot;&gt; &lt;p className=&quot;themed&quot;&gt;Double inverted&lt;/p&gt; &lt;/ThemeProvider&gt; &lt;/ThemeProvider&gt; &lt;/ThemeProvider&gt; Result Loading... Name\tDescription\tType colorScheme The desired color scheme. &quot;light&quot; – dark text on light background.&quot;dark&quot; – light text on dark background.&quot;inverse&quot; – the opposite color scheme from the parent &lt;ThemeProvider&gt;. Cannot be used on the root &lt;ThemeProvider&gt;.undefined – use the user's preferred color scheme. If ignoreOSColorSchemeis true, &quot;light&quot; will be used as a fallback. Reference: prefers-color-scheme media query. ColorScheme | &quot;inverse&quot; ignoreOSColorScheme If set, the user's operating system color scheme setting will be ignored.\tboolean onColorSchemeChange A callback function that will trigger any time the colorScheme changes. Use to update the color scheme store when it's changed by the user. ((scheme: ColorScheme) =&gt; void) "},{"title":"useTheme hook​","type":1,"pageTitle":"React Providers","url":"docs/components/react-providers#usetheme-hook","content":"In addition to the theme provider, the useTheme hook can be used by components to update the current context's color scheme. Example: toggle dark mode with a switch import { Switch, useTheme } from '@wwnds/react'; export const SchemeToggle = () =&gt; { const { colorScheme, setColorScheme } = useTheme(); const isDark = colorScheme === 'dark'; const onToggleChange = (checked: boolean) =&gt; { setColorScheme((checked) ? 'dark' : 'light'); }; return ( &lt;Switch label=&quot;Dark mode&quot; checked={isDark} onToggle={onToggleChange} /&gt; ); } Copy "},{"title":"Step Indicator","type":0,"sectionRef":"#","url":"docs/components/step-indicator","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#anatomy","content":"A step indicator contains: Steps - a list of steps, each of which is individually called a step.Connector (optional) - a purely presentational line that visually connects the individual steps. A step contains: A step marker - the marker visually indicates whether the step is complete or incomplete.Contents - the step's contents function as an accessible name for the step. "},{"title":"States and properties​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#states-and-properties","content":"Each individual Step has two types of state: Current - a property that shows the user's current step. Only one step can be current at a time. Note: this should be conveyed with the aria-current=&quot;step&quot; to ensure that it is accessible. Completion - a property that indicates whether the step has been completed or not. It can be either &quot;complete&quot; or &quot;incomplete&quot;. "},{"title":"Usage​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#usage","content":"Use a step indicator to give users context through a long process or form.Use a step indicator for onboarding, creation, or other processes that are done infrequently.Use a step indicator to break up long processes or forms that include dependent fields.A process that uses a step indicator should include at least 2 steps. The recommended range is 3–7 steps.Steps outlined in a step indicator are often done in a particular order, and users must complete each step before moving on to the next, like in an onboarding flow. However, the steps can sometimes be done out of order or left incomplete, like in interactive assignments.Step indicators are often displayed horizontally at the top of a page or modal, but they can sometimes be displayed vertically along the left margin. "},{"title":"Dos and Don'ts​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#dos-and-donts","content":"Do make sure that the process is broken up into logical, discrete steps.Do show the steps in a logical order from left to right or top to bottom.Don't use more than one step indicator on a single page or screen. "},{"title":"React API​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#react-api","content":"We expose two components for the step indicator API, StepIndicator and Step. import { StepIndicator, Step } from '@wwnds/react'; Copy Related concepts HTML elements: &lt;ol&gt;, &lt;li&gt;ARIA property: aria-current "},{"title":"StepIndicator​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#stepindicator","content":"The StepIndicator component extends the React.HTMLAttributes&lt;HTMLOListElement&gt; interface and renders an &lt;ol&gt; element. It is composed using multiple Step components, which each render a &lt;li&gt; element. When isConnected, a line will visually connect each step. Live Editor &lt;StepIndicator isConnected&gt; &lt;Step isCompleted&gt;Order details&lt;/Step&gt; &lt;Step isCurrent&gt;Payment&lt;/Step&gt; &lt;Step&gt;Delivery&lt;/Step&gt; &lt;/StepIndicator&gt; &lt;StepIndicator isConnected&gt; &lt;Step isCompleted&gt;Order details&lt;/Step&gt; &lt;Step isCurrent&gt;Payment&lt;/Step&gt; &lt;Step&gt;Delivery&lt;/Step&gt; &lt;/StepIndicator&gt; Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring isConnected When set, a connector line will be shown between the steps\tboolean "},{"title":"Step​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#step","content":"The Step component extends the React.HTMLAttributes&lt;HTMLLIElement&gt; interface and renders an &lt;li&gt; element. It represents a single step. Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring markerClass The className for the step marker circle\tstring markerContainerClass The className for the container that includes the step marker and it's adjacent connectors\tstring contentsClass The className for the children's container (step label)\tstring isCompleted When set, this step is visually marked as complete\tboolean isCurrent When set, this step is visually marked as the current step\tboolean "},{"title":"Styling API​","type":1,"pageTitle":"Step Indicator","url":"docs/components/step-indicator#styling-api","content":"The Step Indicator component exposes the following design tokens as CSS custom properties that allow for visual customization. Token Name\tDescription\tDefault--nds-stepindicator-primary-color\tThe color for the currently active step marker halo and the background of completed steps\tprimary-color-50 --nds-stepindicator-base-color\tThe background base color for incomplete step markers and connector line\tbase-color-90 --nds-stepindicator-step-marker-size\tThe width and height of the (non-current) step markers circle\t1.5rem --nds-stepindicator-max-step-width\tMax-width for the specific steps, can be useful when the number of steps is dynamic\tnull "},{"title":"Switch","type":0,"sectionRef":"#","url":"docs/components/switch","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Switch","url":"docs/components/switch#anatomy","content":" Label - a short name that lets the user know what the switch will turn on or off.Description (optional) - a description that can be used to add clarity to the role of the switch.Control - an indicator that lets the user know the current state of the switch. "},{"title":"Usage​","type":1,"pageTitle":"Switch","url":"docs/components/switch#usage","content":"When a user toggles a switch, its corresponding action takes effect right away.A switch has two mutually exclusive states—on and off. Do Do use a switch to mimic a physical on/off switch in the interface.Do allow users to select the switch by clicking the control or its text label. Don't Don’t use the words &quot;on/off&quot; in the switch’s text label. The option that the switch controls should be clear from its label. A tooltip/title attribute may be added to convey the on/off state.Don’t use a switch if the option is part of a larger flow, with a final confirmation step or Submit button. Use a [checkbox](checkbox) instead.Don’t use a switch if users can select multiple options from a list. Use [checkboxes](checkbox) instead. "},{"title":"React API​","type":1,"pageTitle":"Switch","url":"docs/components/switch#react-api","content":"import { Switch } from '@wwnds/react'; Copy "},{"title":"Switch​","type":1,"pageTitle":"Switch","url":"docs/components/switch#switch","content":"Live Editor &lt;Switch label=&quot;Switch&quot; /&gt; &lt;Switch label=&quot;Switch&quot; /&gt; Result Loading... Name\tDescription\tType label (required) The name of the Switch. Required.\tReactNode children Children are set inside the Switch control. Default is 'ON' when checkedand OFF when unchecked. Disable default with displayDefault={false}. ReactNode tipped Indicates that the label should be rendered as a tooltip.\tboolean checked The switch's initial &quot;on&quot; state.\tboolean onToggle A function to call when the switch is toggled.\t((checked: boolean) =&gt; void) displayDefault Indicates whether the default control text should be used when no children are provided. &quot;ON&quot; when checked=true and &quot;OFF&quot; when checked=false. boolean baseName The base class name according to BEM conventions.\tstring tooltipProps Tooltip props that should be included when the switch's label is rendered as a tooltip. Partial&lt;TooltipCoreProps&gt; description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring color The button's color, restricted to design system colors, excluding disabled (prefer the disabled prop). Note that an undefinedcolor will result in the &quot;primary&quot; color being used. SystemColors | &quot;warning&quot; | &quot;primary&quot; | &quot;base&quot; | &quot;error&quot; | &quot;success&quot; iconOnly Indicates whether the button's contents should only be the icon. Whentrue, the button's text is still required but will be used as the icon'saria-label. If no icon is specified, this prop has no effect. boolean variant Button variant conveys the button's level of visual emphasis.\tButtonVariant icon An icon to include in the button.\tIconVariant | SVGIcon iconRight Indicates whether the icon should be to the right of the text. By default, the icon is to the left of the text. boolean iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a &lt;span&gt;\tstring buttonRef A reference to the inner &lt;button&gt; element.\tRef&lt;HTMLButtonElement&gt; active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"Table","type":0,"sectionRef":"#","url":"docs/components/table","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Table","url":"docs/components/table#anatomy","content":"Tables contain cells of data arranged in a grid. Header row - the first row of a table contains cells that act as labels for the columns. Sort indicator (required when sortable) - sortable header cells must convey their current sort state, which can be ascending, descending, or unsorted. Rows - a horizontal slice of the table groups related cells.Columns - a vertical slice of the table groups cells related by the label in the header cell. "},{"title":"Usage​","type":1,"pageTitle":"Table","url":"docs/components/table#usage","content":"Use a table to organize and display long lists of data or content, or to help users find a specific piece of information in a large data set. Columns should be in a logical order from left to right based on the content. The farthest left content column should meaningfully label the row. For example, in a student set the first column should be the student's name.Search and filters can be used in conjunction with tables to help users find informationTable content can include: TextNumbersCheckboxes or radio buttonsCustom content, such as buttons Checkboxes or radio buttons should be the farthest left column. They're used to take bulk actions on the selected items in a table.Tables must have at least 2 columns.Column titles in the header row should be as short as possible but can wrap to 2 rows and then truncate if necessary.Table content should ideally fit on one row but may wrap to multiple lines.The data within the table should be related in a meaningful way.Column titles should accurately label the data within the column, and include units of measurement in the column title if applicable.All content within a column is the same level of hierarchy as all other content within that column. A table shouldn't be used to communicate hierarchy.If a table has no content, it should display an empty state or not display the table at all.Use an alternating striped background for tables with a lot of complex data to help users keep track of the rows. Do Do always include a header row that clearly labels each column. Don't Don't use a table purely for layout purposes. "},{"title":"Tag","type":0,"sectionRef":"#","url":"docs/components/tag","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Tag","url":"docs/components/tag#anatomy","content":"A container - an outline or background sets the tag apart from adjacent text.A label - the tag's label conveys a status or classification.A dismiss indicator - an icon that appears when the tag is dismissible. "},{"title":"Usage​","type":1,"pageTitle":"Tag","url":"docs/components/tag#usage","content":"Use a tag to communicate status, denote active filter selection(s), or as a content tag. A tag may or may not be associated with another component. When it is, it should be placed as close as possible to the component it is referencing. Do Do use a tag if this component should be dismissible or if users need to select or interact with it for any reason. Don't Don’t use a tag to communicate a temporary or permanent state if users cannot interact with or dismiss it. Use a [badge](badge) instead. Caution In most contexts, a series of several tags can be overwhelming and create visual clutter. Use tags sparingly (1–3 tags) wherever possible.A tag should be styled with minimal padding around the text inside the container to distinguish it from a button. "},{"title":"React API​","type":1,"pageTitle":"Tag","url":"docs/components/tag#react-api","content":"We expose one component for the tag API, the Tag. "},{"title":"Tag​","type":1,"pageTitle":"Tag","url":"docs/components/tag#tag","content":"The Tag component extends the React.HTMLAttributes&lt;HTMLElement&gt; interface and renders either as a &lt;span&gt; or &lt;button&gt;, depending on its configuration. When dismissible, the tag will render as a &lt;span&gt; with a dismiss &lt;button&gt; inside of it.When the tag contains a link (Link or a[href]), it will render as a &lt;span&gt; to ensure that the link is clickable.The rest of the time, the tag will render as a &lt;button&gt; and can be reacted to by attaching an onClick callback. import { Tag } from '@wwnds/react'; Copy Live Editor &lt;Tag&gt;Norton Design System&lt;/Tag&gt; &lt;Tag&gt;Norton Design System&lt;/Tag&gt; Result Loading... Name\tDescription\tType color The tag color family.\tSystemColors dismissible Indicates whether tag can be dismissed.\tboolean baseName The base class name according to BEM conventions.\tstring contentsClass The className for the span that wraps children.\tstring dismissClass The className for the dismiss button.\tstring onDismiss Callback function that is called when the dismiss button is clicked.\t(() =&gt; void) "},{"title":"Tooltip","type":0,"sectionRef":"#","url":"docs/components/tooltip","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#anatomy","content":"Text - tooltip text names or describes a related element. If the related element does not have a name, the tooltip text is used to name it.If the related element already has a name, the tooltip text is used to add description to the related element. Arrow - a visual indicator that points to the related element. "},{"title":"Usage​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#usage","content":"Use tooltips when there is not enough physical space to display the name or description of an interactive element. Tooltips provide a mechanism for a simplifying the visual design of an interface. But in exchange, users will have a harder time understanding and discovering the role of the tooltipped element, so use them sparingly and thoughtfully. Do Do use a tooltip to label an interactive element with no visible text such as a button with no text.Do use a tooltip to provide add additional descriptive information to a named element. Don't Don't use a tooltip if the contents of the tooltip contain any meaningful markup such as italics, headings, or lists.Don't use a tooltip if the contents of the tooltip contain interactive elements, such as links, buttons, or form controls. Use a tooltip... to name a control when there isn't enough space to display the label inline.to display an additional description about a control or element that already has an accessible name. "},{"title":"Naming and describing​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#naming-and-describing","content":"In the Norton design system, a tooltip can only be used to nameor describe its related element. This restriction ensures that the user experience of the tooltip is consistent for everyone. "},{"title":"Naming​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#naming","content":"A tooltip is said to be naming its related element when it is acting as a label for that element. For instance, an icon button's call to action could be captured as a tooltip to ensure that the purpose of the icon button is clear to everyone. If the element contains textual content and you also want to use a tooltip to add additional context, the tooltip should be a describing tooltip. Naming tooltips &amp; screen reader experience When a tooltip names its related element, screen readers will read the value of the tooltip when they encounter the related element, entirely ignoring any textual content inside the element. For this reason, naming tooltips should only be used for elements that do not already contain textual content. "},{"title":"Describing​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#describing","content":"A tooltip is said to be describing its related element when it is acting as additional or supplemental information about an element that already has a name. For instance, an &lt;input&gt; that already has an associated &lt;label&gt; could use a tooltip to display help text about the expected input format. Describing tooltips &amp; screen reader experience When a tooltip describes its related element, many screen readers will read the name of the related element, pause briefly, and then read the description contained in the tooltip. "},{"title":"React API​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#react-api","content":"import { Tooltip } from '@wwnds/react'; Copy "},{"title":"Tooltip​","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#tooltip","content":"Live Editor function ButtonWithTooltip() { const [button, setButton] = React.useState(null); return ( &lt;div style={{ margin: '2rem 0' }}&gt; &lt;Button variant=&quot;solid&quot; ref={setButton}&gt;I'm a reference element&lt;/Button&gt; &lt;Tooltip isOpen placement=&quot;top&quot; reference={button} &gt; I'm a tooltip! &lt;/Tooltip&gt; &lt;/div&gt; ); } function ButtonWithTooltip() { const [button, setButton] = React.useState(null); return ( &lt;div style={{ margin: '2rem 0' }}&gt; &lt;Button variant=&quot;solid&quot; ref={setButton}&gt;I'm a reference element&lt;/Button&gt; &lt;Tooltip isOpen placement=&quot;top&quot; reference={button} &gt; I'm a tooltip! &lt;/Tooltip&gt; &lt;/div&gt; ); } Result Loading... Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring bodyClass A className to apply to the body of the tooltip.\tstring contentClass A className to apply to the content. Default will be ${baseName}__content. @deprecated Use the bodyClass. string arrowClass A className to apply to the arrow. Default will be ${baseName}__arrow. @deprecated - Use arrowElement. string asLabel Indicates that the tooltip is labelling the reference. If false, the tooltip will be used as description. Reference: ARIA Practices - Providing Accessible Names and Descriptions boolean trigger A space-separated string of events. Triggers can be any combination of the following: clickfocusfocusinmouseenterpointerentermanual string isOpen Used to control whether the popper is open or closed.\tboolean transition The animation transition class applied to the popper as it enters or exits. A single name can be provided and it will be suffixed for each stage. For example, transition=&quot;fade&quot; applies: fade-enterfade-enter-activefade-exitfade-exit-activefade-appearfade-appear-active Each individual stage can also be specified independently: transition={{ appear: 'my-appear', appearActive: 'my-appear-active', appearDone: 'my-appear-done', enter: 'my-enter', enterActive: 'my-enter-active', enterDone: 'my-enter-done', exit: 'my-exit', exitActive: 'my-exit-active', exitDone: 'my-exit-done' }} Reference: react-transition-group's CSSTransition. string | CSSTransitionClassNames reference The reference element that the popper will be attached to. Popper.js - createPopper Element | VirtualElement | null arrowElement The element that should be used for the arrow. See the arrow modifier's element optionfor more details. string | HTMLElement | null distance The offset distance(in pixels) from the reference. Will only be used if offset is undefined. number boundary The element or area where the popper will be checked against for overflow. See the preventOverflow modifier's boundary optionfor more details. Boundary placement The Popper.js placement option.\tPlacement modifiers The Popper.js modifiers option.\tPartial&lt;Modifier&lt;any, any&gt;&gt;[] strategy The Popper.js strategy option.\tPositioningStrategy onFirstUpdate The Popper.js onFirstUpdate option.\t((arg0: Partial&lt;State&gt;) =&gt; void) hideDelay The duration in milliseconds that should elapse before closing, beginning after the pointer exits the reference's bounding box. Only has an effect for the mouseenter or pointerenter triggers. number showDelay The duration in milliseconds that should elapse before opening, beginning after isOpen is set to true. number "},{"title":"Foundations","type":0,"sectionRef":"#","url":"docs/foundations","content":"Foundations Foundations are guidelines for using elements of visual design and interaction. Our foundations provide guidance on using visual elements like color and typography, as well as framing for broad design concepts such as design tokens and accessibility. Accessibility Designing for accessibility ensures that interfaces and content are meaningful and effective for everyone. Design Tokens Reusable elements of design are captured as design tokens to ensure consistency without sacrificing flexibility. Color A color system defines visual hierarchy and identity through a consistent experience of color. Typography Effective typography adds clarity and purpose to the flow of your content. Spacing Consistent spacing within and between visual elements balances a design and makes it easier to scan. Motion Careful use of motion can highlight important information and relationships in an expressive way.","keywords":""},{"title":"Accessibility","type":0,"sectionRef":"#","url":"docs/foundations/accessibility","content":"","keywords":""},{"title":"Focus​","type":1,"pageTitle":"Accessibility","url":"docs/foundations/accessibility#focus","content":"Focus indicates the point of regard for keyboard input. In other words, it gives you a visual clue to where keyboard input will be directed on the page. We provide two focus indicators for you to use: a focus &quot;halo&quot; and a focus &quot;ring,&quot; both of which are captured as design tokens (focus-halo and focus-ring). Both focus indicators use the box-shadow property rather than the typical outline to ensure that the indicator matches the shape of its element. "},{"title":"Focus Halo​","type":1,"pageTitle":"Accessibility","url":"docs/foundations/accessibility#focus-halo","content":"The focus halo is our global focus indicator and should be used in most cases. It contains two rings: a 2px outer ring with a color of focus-halo-outer-colora 1px inner ring with a color of focus-halo-inner-color The resulting effect looks like a halo around the focused element. Example: focus halo To see the focus halo in action, tab to the following button. Focus halo Using the focus halo for most elements ensures a few things that are key to a well-designed focus indicator: Color contrast can always be assured against both the background and the element's background.It is more visually apparent than a normal outline. Focus cannot be visually tracked from point to point like mouse movement can, so it needs to be more visually obvious than most visual elements on a page. It meets WCAG 2.2 Focus Appearance (Enhanced) under most circumstances by including the following: A focus indication area of 2px + a 1px offset.High contrast between the background color and the element's color under nearly every scenario.A high on-focus z-index to ensure that it is never obscured by other content. "},{"title":"Focus ring​","type":1,"pageTitle":"Accessibility","url":"docs/foundations/accessibility#focus-ring","content":"The focus ring is more akin to the typical focus outline seen on the web. It contains a 2px ring with a color of focus-color. It is used in situations where some other focus affordance is included. Most notably, this is seen in &lt;input&gt; fields, which provide an additional indication of focus via the insertion caret. Example: focus ring To see the focus ring in action, tab to the following text field. Focus ring "},{"title":"Text Field","type":0,"sectionRef":"#","url":"docs/components/text-field","content":"","keywords":""},{"title":"Anatomy​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#anatomy","content":"Label - a short name that lets the user know what to type in the field.Field indicator (optional) - a parenthetical that lets the user know whether the field is required or optional. Use this to bring attention to a field that is the &quot;odd one out.&quot; For instance, if there are five fields in a form and only one is optional, the field indicator should say &quot;(optional)&quot; for that one instead of &quot;(required)&quot; for the other four. Description (optional) - additional text that can be used to add clarity to the role of the text field or help the user understand the expected input format.Input container - a container that outlines the boundary of text field's input area and addons.Input area - where the user enters text.Addon(s) (optional) - field addons help the user control the state of the text field. Addons can be included before or after the input area. Error feedback (optional) - feedback that lets the user know that their current input is invalid and why.Character count feedback (optional) - an indicator that lets the user know how many characters they have remaining. "},{"title":"Usage​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#usage","content":"A text field allows a user to freeform type or paste their own response to a prompt.A text field has a label that describes what the user should type.A text field’s label must be visible at all times.A text field’s label must be associated with its input. To associate a label with an input, either use the for attribute or wrap the input in the label element. "},{"title":"Usage: Search​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#usage-search","content":"A basic search field uses the text field component.The search field should always include a button with a magnifying glass icon. This icon is the universally recognizable symbol for search and what people will look for when they want to find the search field. The button submits the search query and gives the user the search results.For search that allows users to find information or links within an entire website or application, the field should always be at the top right of the screen, usually contained within the top navigation bar or header. The search bar should be at the top of almost every screen/page, except for processes where searching would interrupt the user’s flow or progress, such as checkout.Search can also be used to help users find information within a specific section of the website/application or within a component, like a table. In this case, the search bar should be clearly associated with the section or component it applies to so users don’t confuse it with Do Do let the size of the input area indicate the amount of content you expect the user to enter. By default, the text field should be full width, defined by the size of its container.Only use a fixed-width input area if the text entry has a specific, known length. The width should remain fixed unless it is wider than its container—then shrink width to fit. Don't Don’t use labels that are too long. Labels should be very concise.Don’t include instructions in a label—use help text instead.Don’t disable the user’s ability to select, copy or paste.Don’t require users to write paragraphs of text in a single-line text field. "},{"title":"Content Guidelines​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#content-guidelines","content":"The search field should have a clear and meaningful label. For search within a section or component, the label should add context, such as “Search books.”Use the description if necessary for example search queries, especially if the format is important, such as dates. "},{"title":"Interactions​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#interactions","content":"Enter submits the search query. Character Counter A text field may have a character counter, but it is not an intuitive way for users to understand content length.Use a character counter only if it is important for users to know how long their text entry can be, or to clarify if the user surpasses the character limit.By default, a text field does not have a character limit. If necessary, set a limit higher than most users will need.Allow users to enter more than the character limit, and then display an error. This lets a user type or copy and paste their full text entry, then edit it down.The character count should be announced to assistive technology users after they stop typing. Placeholder A text field may have placeholder text to provide hints or examples, but placeholder text should not contain important information.Don’t use placeholder text in place of a label, because it will disappear once the user starts typing in the field.Set an accessible color for placeholder text. Most browsers’ default rendering of placeholder text does not provide a high enough contrast ratio. Required Text Fields By default, a text field should be optional unless there is a significant reason to mark it as required.If using both required and optional text fields in a form, include a clear signifier to differentiate required fields from optional fields. Error Validation By default, display error validation on a text field as soon as the user has moved to the next field.Use caution if displaying error validation before the user has finished entering text.Use caution if displaying error validation on Save or Submit, especially if the text field will not be visible on screen when Save or Submit is activated. Autosize Multi-line Text Fields Autosize multi-line text fields should be used sparingly only when necessary.The content on the screen below an autosize multi-line text field must be able to adjust accordingly and the screen must increase in size as necessary.Never use an autosize multi-line text field in a modal or overlay.Always set a maximum height. "},{"title":"Types​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#types","content":"Text field types are based on the HTML input types that do not require a separate interface for entry, such as a date picker. Where possible, they should be implemented with their corresponding &lt;input&gt; type. "},{"title":"Number​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#number","content":"Allows the user to enter a number, and can display step arrows on focus.Includes built-in validation to reject non-numeric text entry.The default step value is 1, but can be set with more or less granularity, including decimal values.Allow users to use the up and down arrows on their keyboard to adjust the value typed into the field. "},{"title":"Email​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#email","content":"Allows the user to enter an email address or list of email addresses.Includes built-in validation to ensure text entry is a properly formatted email address.Some devices may display an email-specific keyboard for easier entry.Can allow the user's browser to automatically fill out the field, if enabled. "},{"title":"Password​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#password","content":"Allows the user to securely enter a password by obscuring the text entry.Can allow the user’s browser or password manager to automatically fill out the field. "},{"title":"URL​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#url","content":"Allows the user to enter a URL.Includes built-in validation to ensure text entry is a properly formatted URL.Some devices may display a URL keyboard for easier entry. "},{"title":"Tel​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#tel","content":"Allows the user to enter a telephone number.The text entry is not automatically validated, because telephone numbers vary around the world.Some devices may display a telephone keyboard for easier entry. "},{"title":"Text Wrapping Variants​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#text-wrapping-variants","content":"If the user inputs text that cannot fit inside the visible text field container, the text must either wrap or the container must scroll with the text. Three options are provided to address this need. "},{"title":"Single line text field​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#single-line-text-field","content":"A single-line text field displays only one line of text.As the cursor reaches the right edge of the input area, text longer than the input area automatically scrolls left.Use single-line text fields for: Number, Email, Password, and Tel inputs. "},{"title":"Multi-line text field: Fixed height (default)​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#multi-line-text-field-fixed-height-default","content":"Multi-line text fields have a fixed height by defaultText longer than the input area wraps onto a new line, and scrolls vertically when the cursor reaches the bottom of the input area.The large size of the input area indicates that longer responses are possible and encouraged.Use fixed height multi-line text fields for: free response inputs with additional formatting capabilities. "},{"title":"Multi-line text field: Autosize (optional alternative)​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#multi-line-text-field-autosize-optional-alternative","content":"Autosize multi-line text fields grow to accommodate multiple lines of text and show all text entry at once.Autosize multi-line text fields initially appear as single-line fields, which is useful for compact layouts that need to accommodate large amounts of text.Text longer than the input area wraps to a new line. The input area expands vertically and shifts any screen elements below it.Use autosize multi-line text fields for: free response input and URLs. "},{"title":"React API​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#react-api","content":"import { TextField } from '@wwnds/react'; Copy "},{"title":"TextField​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#textfield","content":"TextField provides a single interface for a complete &lt;input&gt; field. Internally, it uses the FieldInfo, FieldFeedback, and FieldAddon components. Live Editor &lt;TextField maxLength={30} description=&quot;Use the description to display hints about entry.&quot; required requiredIndicator validateOnChange &gt; Default text field &lt;/TextField&gt; &lt;TextField maxLength={30} description=&quot;Use the description to display hints about entry.&quot; required requiredIndicator validateOnChange &gt; Default text field &lt;/TextField&gt; Result Loading... Name\tDescription\tType type Text fields can be a limited subset of &lt;input&gt; types.\tTextFieldType addonBefore One or more addon that should be included before the &lt;input&gt;.\tReactNode addonAfter One or more addon that should be included after the &lt;input&gt;.\tReactNode feedback Feedback about the user's current input value. By default, this will contain validation errors and the counter, if maxLength is specified. string | ReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; counterStart When the character counter should begin showing.\tnumber counter A function that takes the remaining number of characters and the maximum number of characters and returns the string or element that will be rendered in the character counter slot. false | (({ remaining, max }: { remaining: number; max: number; }) =&gt; ReactNode) baseName The base class name according to BEM conventions.\tstring inputClass The className for the TextField's &lt;input&gt; element.\tstring addonClass The className for all of the addons (before and after).\tstring groupClass The className for the wrapper that contains the &lt;input&gt; &amp; addons.\tstring feedbackClass The className for the TextField's feedback section, which contains the error text and character count. string counterClass The className for the TextField's character counter element.\tstring invalidClass A className that will be applied to the base element when the &lt;input&gt;is invalid. string inputRef A reference to the internal &lt;input&gt; element.\tRef&lt;HTMLInputElement | HTMLTextAreaElement&gt; requiredIndicator Indicates that the indicator should be &quot;required&quot; when required=true.\tboolean optionalIndicator Indicates that the indicator should be &quot;optional&quot; when required=false.\tboolean onCount Triggered any time the number of characters remaining is updated.\t((remaining?: number) =&gt; void) | undefined multiline Allow for multiple lines of input\tnumber | boolean autoSize If true increase the height of textarea automatically only works when multiline prop it's enable boolean description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. A list of validation errors. When the input is submitted in a form, the list will be concatenated into a single string with a new line separator. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean maxLengthRestrictsInput Indicates that a maxLength value should prevent input beyond the maxLength.\tboolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: MDN - change eventMDN - input event (((e: Event) =&gt; void) &amp; ((e: Event) =&gt; void)) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. (((errors: string[]) =&gt; void) &amp; ((errors: string[]) =&gt; void)) "},{"title":"FieldInfo​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#fieldinfo","content":"The FieldInfo component is used to information about a related field. It will always contain a label for the field and can contain an optional description. Make sure to include a valid htmlFor prop when used with form controls such as an &lt;input&gt;. Live Editor &lt;FieldInfo description=&quot;Use the description to display hints about entry.&quot;&gt; Default text field &lt;/FieldInfo&gt; &lt;FieldInfo description=&quot;Use the description to display hints about entry.&quot;&gt; Default text field &lt;/FieldInfo&gt; Result Loading... Name\tDescription\tType baseName string label (required) The name of the field. Required.\tReactNode indicator An additional label indicator, displayed as a parenthetical inside the label container. For instance, indicator=&quot;required&quot; would result in label text content of &quot;{label} (required)&quot;. string | null indicatorClass A className for the indicator &lt;span&gt;.\tstring labelTag The HTML element name for the label. If htmlFor is included, this will automatically be label. If undefined, this will be div. &quot;div&quot; | &quot;label&quot; | &quot;legend&quot; description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a &lt;label&gt; if htmlForis included and a &lt;div&gt; otherwise. string descriptionClass A className for the description &lt;div&gt;.\tstring labelId An id for the label element.\tstring descriptionId An id for the description &lt;div&gt;.\tstring "},{"title":"FieldFeedback​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#fieldfeedback","content":"A container for field feedback. Use to display content based on field input. Live Editor &lt;FieldFeedback errors={['Something went wrong', 'Another thing isn\\'t right']}&gt; Generic feedback goes here &lt;/FieldFeedback&gt; &lt;FieldFeedback errors={['Something went wrong', 'Another thing isn\\'t right']}&gt; Generic feedback goes here &lt;/FieldFeedback&gt; Result Loading... Name\tDescription\tType liveErrors Indicates whether errors should be a live region. Default is true. Only set to false if you intend to communicate errors to screen reader users through some other mechanism. boolean baseName The base class name according to BEM conventions.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"FieldAddon​","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#fieldaddon","content":"The FieldAddon is a simple container for input addons. It is used by the TextField component to render addons before or after the &lt;input&gt;. Live Editor &lt;FieldAddon&gt; &lt;IconButton icon=&quot;check&quot;&gt;Correct&lt;/IconButton&gt; &lt;/FieldAddon&gt; &lt;FieldAddon&gt; &lt;IconButton icon=&quot;check&quot;&gt;Correct&lt;/IconButton&gt; &lt;/FieldAddon&gt; Result Loading... Name\tDescription\tType baseName string "},{"title":"Design Tokens","type":0,"sectionRef":"#","url":"docs/foundations/design-tokens","content":"","keywords":""},{"title":"Types of Design Tokens​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#types-of-design-tokens","content":"The Norton Design System contains three types of design tokens: system, role, and component tokens, which are used in conjunction to capture the entire design of an application. Inheritance The three types of tokens use the following system of inheritance in the Norton Design System. Abstract: component token → role token → system tokenConcrete: button-color → primary-color → teal-60 And in CSS as implemented by @wwnds/core: :root { --nds-teal-60: #1a8082; /* system token */ --nds-primary-color: var(--nds-teal-60); /* role token */ } .my-button { --nds-button-color: var(--nds-primary-color); /* component token */ background-color: var(--nds-button-color); /* token usage */ } Copy "},{"title":"System Tokens​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#system-tokens","content":"A system token is associated with one of our various subsystems, such as the color, motion, spacing, or typography systems. System tokens are immutable—their values cannot be changed—because they are intended to act as a value store rather than part of the theming system.System token names don't give hints as to how they should be used. This is because they are simply property values and could be used in a variety of ways.System tokens should rarely be used directly. "},{"title":"Role Tokens​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#role-tokens","content":"A role token has a semantic purpose in an application's design. Role tokens are customizable and together constitute the primary way to theme a Norton Design System application.Role token names do give hints about how they should be used.Role tokens are the primary interface for theming and should therefore be used directly whenever possible. "},{"title":"Component Tokens​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#component-tokens","content":"A component token is scoped to a specific component. Component tokens are customizable but changing their values may result in inconsistency across components.Component token names generally follow the pattern of {component}-{property}, where component is the name of the component and property captures the CSS property where the token is used. Examples: button-border-width or tooltip-offset-y. Component tokens can and should be used directly when creating custom components based on a Norton Design System component. "},{"title":"Token Conventions​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#token-conventions","content":"In addition to the system of inheritance that our design tokens use, we follow a few key conventions that help you to better understand how to use them in your application. "},{"title":"Base Tokens​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#base-tokens","content":"Base tokens always have the -base suffix, denoting that they are used as the default value for the corresponding property across the application. Customizing these will have the most wide-ranging impact on the design language of your application. Example: custom base border-radius @use '@wwnds/core' as nds with ( $radius-base: var(--nds-radius-lg), ); // buttons, text fields, and other inline components will all have more rounded corners Copy "},{"title":"T-Shirt Sizing​","type":1,"pageTitle":"Design Tokens","url":"docs/foundations/design-tokens#t-shirt-sizing","content":"For tokens that fall on a linear scale such as font size, we sometimes use t-shirt sizing suffixes of -xs, -sm, -md, and -lg to capture a normalized subset of values. Customizing these will allow you to change the sense of scale across your application. "},{"title":"Color","type":0,"sectionRef":"#","url":"docs/foundations/color","content":"","keywords":""},{"title":"Accessibility​","type":1,"pageTitle":"Color","url":"docs/foundations/color#accessibility","content":"The Norton color system is designed to ensure consistent color contrast across all color families. To accomplish this, grades are normalized across color families to have a similar level of color contrast against black or white. Grades of 60 and higher are designed to meet the minimum color contrast ratio for WCAG AA when used with pure white (#fff). Conversely, grades of 50 and lower are designed to meet WCAG AA requirements against pure black (#000). "},{"title":"Design Tokens​","type":1,"pageTitle":"Color","url":"docs/foundations/color#design-tokens","content":"The Norton color system uses role tokens for theming and system tokens as a basis for all color families. Color system tokens use a naming pattern of {family}-{grade}, such as cyan-30. Color role tokens use a naming pattern of {role}-color-{grade}, such as primary-color-70. "},{"title":"System Tokens​","type":1,"pageTitle":"Color","url":"docs/foundations/color#system-tokens","content":"The following table lists all the system colors in the Norton Design System, as well as their contrast ratio against pure white and pure black. Avoid direct use Using system color tokens directly will make your application more difficult to theme. Rather than using system colors directly, use role colors in your designs. Role colors can be mapped to system colors to modify your design more broadly and consistently. For instance, if you want a component's border color to be gray-40, set your base-color to use the gray family and then set your border color to base-color-40. The role—or purpose—of the base-color is to be used for backgrounds, borders, and other neutral design features. Token name\tHex value\tContrast ratio against white\tContrast ratio against blackred-10 red-20 red-30 red-40 red-50 red-60 red-70 red-80 red-90 red-100 yellow-10 yellow-20 yellow-30 yellow-40 yellow-50 yellow-60 yellow-70 yellow-80 yellow-90 yellow-100 green-10 green-20 green-30 green-40 green-50 green-60 green-70 green-80 green-90 green-100 teal-10 teal-20 teal-30 teal-40 teal-50 teal-60 teal-70 teal-80 teal-90 teal-100 cyan-10 cyan-20 cyan-30 cyan-40 cyan-50 cyan-60 cyan-70 cyan-80 cyan-90 cyan-100 blue-10 blue-20 blue-30 blue-40 blue-50 blue-60 blue-70 blue-80 blue-90 blue-100 purple-10 purple-20 purple-30 purple-40 purple-50 purple-60 purple-70 purple-80 purple-90 purple-100 navy-10 navy-20 navy-30 navy-40 navy-50 navy-60 navy-70 navy-80 navy-90 navy-100 gray-10 gray-20 gray-30 gray-40 gray-50 gray-60 gray-70 gray-80 gray-90 gray-100\t "},{"title":"Role Tokens​","type":1,"pageTitle":"Color","url":"docs/foundations/color#role-tokens","content":"All color roles reference either a single color or a family of colors. When a role color references an entire family, its grades will map one-to-one. Single-value role tokens​ The following role tokens map to a single value. Token\tDefault value\tUsagebackground-color\twhite\tThe main background color text-color\tbase-color-90\tThe main text color text-color-inverse\tbackground-color\tA contrasting text color subdued-color\tbase-color-60\tDe-emphasized, muted, or subdued content selection-background-color\tnull (unset)\tThe background color of user-selected text selection-text-color\tnull (unset)\tThe text color of user-selected text focus-color\tblue-50\tThe color used when an element has been focused (:focus) focus-halo-inner-color\tbackground-color\tThe inner color of the focus halo focus-halo-outer-color\tfocus-color\tThe outer color of the focus halo Family role tokens​ Role tokens that map to an entire family use two configuration options to determine the mapping: A family that references a color family's name (e.g., &quot;cyan&quot;). Configured with the ${role}-family Sass option. An optional grade that defines the midpoint of the shade map. Configured with the ${role}-grade Sass option. Role\tDefault family\tDefault grade\tUsageprimary-color\t&quot;teal&quot;\t60\tThe family used in components that have a default color base-color\t&quot;navy&quot;\tundefined\tBackground, border, or shadow gradients disabled-color\t&quot;base&quot;\t30\tNot currently usable, non-interactive error-color\t&quot;red&quot;\t60\tError, danger, or incorrect success-color\t&quot;green&quot;\t60\tSuccess, passing, or correct warning-color\t&quot;yellow&quot;\t60\tWarning or caution The result will include an entire 10-grade family for the role, plus a shade map if a midpoint grade is defined. For example, setting $primary-family to &quot;purple&quot; and $primary-grade to 70 results in the following shade and family map. Shade\tValueprimary-color-lighter\tprimary-color-50 primary-color-light\tprimary-color-60 primary-color\tprimary-color-70 primary-color-dark\tprimary-color-80 primary-color-darker\tprimary-color-90 primary-color-10\tpurple-10 primary-color-20\tpurple-20 primary-color-30\tpurple-30 primary-color-40\tpurple-40 primary-color-50\tpurple-50 primary-color-60\tpurple-60 primary-color-70\tpurple-70 primary-color-80\tpurple-80 primary-color-90\tpurple-90 primary-color-100\tpurple-100 In Sass, these options can be configured globally on use: @use '@wwnds/core' with ( $primary-family: 'purple', $primary-grade: 70, ); Copy Or you can apply them with the provided Sass utilities: @use '@wwnds/core' as nds; .my-purple-element { // .set() applies a list or map of values as CSS custom properties @include nds.set( $nds-primary-color: nds.family(&quot;primary-color&quot;, &quot;purple&quot;, 70) ); } Copy Shade maps​ When mapping color families to other color families, you can choose to include a midpoint grade, resulting in a 5-grade shade map. Shade\tDescription\tExample{role}-lighter\ttwo grades lighter (-20)\tprimary-color-lighter {role}-light\tone grade lighter (-10)\tprimary-color-light {role}\tthe midpoint shade\tprimary-color {role}-dark\tone grade darker (+10)\tprimary-color-dark {role}-darker\ttwo grades darker (+20)\tprimary-color-darker "},{"title":"Color Schemes​","type":1,"pageTitle":"Color","url":"docs/foundations/color#color-schemes","content":"Customizing the color system's role tokens is one of the easiest ways to begin theming an application. We ship default light and dark and color schemes, but you are encouraged to create your own scheme(s) to suit your needs. By default, the dark color scheme uses the same color families as the light scheme but simply inverts the grade scale. See the $light-scheme and $dark-scheme maps in thecolor tokens stylesheetfor a closer look at how this is accomplished. Work in progress The dark color scheme is still being tested and must be turned on with the $enable-dark-scheme flag at this time. @use '@wwnds/core' as nds with ( $enable-dark-scheme: true, ); Copy "},{"title":"Spacing","type":0,"sectionRef":"#","url":"docs/foundations/spacing","content":"Spacing Work in progress This page still being written. Please submit feedback on GitHub if you would like to contribute.","keywords":""},{"title":"Motion","type":0,"sectionRef":"#","url":"docs/foundations/motion","content":"","keywords":""},{"title":"Design Tokens​","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#design-tokens","content":"Token\tDefault Value\tUsageduration-scalar1\t1\ta multiplier used for increasing/decreasing all motion speed duration-simple\t100ms\tsimple animations such as selection controls duration-simple-enter\t150ms\tsimple entrances such as fade-ins duration-simple-exit\t75ms\tsimple exits such as fade-outs duration-complex\t200ms\tcomplex animations such as shape changes duration-detailed\t500ms\tdetailed animations such as icon transformations duration-open\t250ms\telements that open from a closed state, such as a sidebar duration-close\t200ms\telements that close from an opened state, such as a sidebar duration-expand\t300ms\tused when an element expands (grows) duration-collapse\t250ms\tused when an element collapses (shrinks) duration-small\tduration-simple\telements with small transition areas, such as icons and selection controls, have short durations duration-medium-expand\tduration-open\texpanding elements with larger transition areas, such as bottom sheets and expanding chips duration-medium-collapse\tduration-close\tcollapsing elements with larger transition areas, such as bottom sheets and expanding chips duration-large-expand\tduration-expand\texpanding elements that traverse a large portion of the screen duration-large-collapse\tduration-collapse\tcollapsing elements that traverse a large portion of the screen easing-standard\tcubic-bezier(0.4, 0, 0.2, 1)\telements that begin and end at rest easing-deceleration\tcubic-bezier(0, 0, 0.2, 1)\tincoming elements that end at rest easing-acceleration\tcubic-bezier(0.4, 0, 1, 1)\telements that begin at rest and exit the screen easing-sharp\tcubic-bezier(0.4, 0, 0.6, 1)\telements that temporarily exit "},{"title":"Duration Scalar​","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#duration-scalar","content":"We've introduced the duration-scalar token to help modify transition durations on the fly. It is highly recommend that you use the transition Sass function in @wwnds/coreto set your transitions, as it will automatically multiply your duration by theduration-scalar token. @use '@wwnds/core' as nds; .my-sidebar { /* * Easing is omitted because the transition function uses * var(--nds-easing-standard) by default. */ transition: nds.transition(transform, var(--nds-duration-close)); } .my-sidebar.open { transition: nds.transition(transform, var(--nds-duration-open)); } Copy Alternatively, if you'd like to skip the transition function, you can multiply your durations by the duration-scalar yourself. @use '@wwnds/core' as nds; .my-sidebar { transition: transform calc(var(--nds-duration-scalar) * var(--nds-duration-close)) var(--nds-easing-standard); } .my-sidebar.open { transition: transform calc(var(--nds-duration-scalar) * var(--nds-duration-open)) var(--nds-easing-standard); } Copy "},{"title":"Reduced Motion​","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#reduced-motion","content":"To ensure that prefers-reduced-motionis always followed, the duration-scalar value is automatically set to 0 when the user prefers reduced motion. Manually setting a duration that isn't multiplied by the duration-scalar token will result in that duration not being 0 when the user prefers reduced motion. If you'd like to set reduced motion manually, you can also do so with the.nds-reduced-motion utility class or the reduce-motion Sass mixin. @use '@wwnds/core/full' as nds; .no-motion { @include nds.reduce-motion; } Copy "},{"title":"Debugging motion​","type":1,"pageTitle":"Motion","url":"docs/foundations/motion#debugging-motion","content":"During development, it can be useful to slow down durations and easings to ensure so that you can see the animations in greater detail. Because the duration-scalar token is set as a CSS custom property, it can be used to increase or decrease all motion speeds across your application. To modify it during development, simply open your dev tools, click on the&lt;html&gt; element, and change the value of the --nds-duration-scalar CSS custom property to any number greater than 1 to slow down and less than 1 to speed up. The duration-scalar token is not part of Material Design's motion system.↩ "},{"title":"Guides","type":0,"sectionRef":"#","url":"docs/guides","content":"Guides Guides are a focused and directed way to help you get the most out of the Norton Design System. Development How to write code with the Norton Design System. Usable Writing Guidelines How to write usable and accessible interface copy.","keywords":""},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/guides/dev","content":"","keywords":""},{"title":"Core package​","type":1,"pageTitle":"Getting started","url":"docs/guides/dev#core-package","content":"The core package is a Sass implementation of the foundations and styling for all components. It includes the following features: An implementation of the design tokens for all foundational elements (color, typography, etc.) set as CSS custom properties.Modular styling for all components via Sass mixins.A global reset stylesheet, forked from the Bootstrap reboot to use the Norton Design System foundations.A Sass API for theming and customizing every aspect of the library, built on Sass modules. NPMYarn npm install @wwnds/core Copy Links NPM: @wwnds/coreGitHub: packages/core "},{"title":"React package​","type":1,"pageTitle":"Getting started","url":"docs/guides/dev#react-package","content":"The React package is a React implementation of the components with no styling applied. It includes the following features: A React Typescript implementation of the Norton Design System components.A rich developer experience powered by the comprehensive typings and descriptions for all top-level components and their props.Useful React hooks to help you build stateless, functional applications. NPMYarn npm install @wwnds/react Copy Links NPM: @wwnds/reactGitHub: packages/react "},{"title":"Independent package usage​","type":1,"pageTitle":"Getting started","url":"docs/guides/dev#independent-package-usage","content":"Neither the core package nor the react package depend on one another and can therefore be used fully independently of each other. For instance, you could use @wwnds/core to style a Vue.js application, or you could apply your own styling to @wwnds/react without using anything from @wwnds/core. However, this guide fill focus on combined usage, as the packages work best when used together. "},{"title":"Typography","type":0,"sectionRef":"#","url":"docs/foundations/typography","content":"","keywords":""},{"title":"Typesets​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#typesets","content":"A typeset is a composed set of typographical styles that are used for specific purposes. We include three categories of typesets to be used with body text, UI text, and headings. All three come in a variety of sizing variants, but you can also define your own typesets as needed. The default typeset, which is used as the default body typeset, utilizes all base tokens. The default typeset @use '@wwnds/core' as nds; .my-selector { @include nds.typeset; } // CSS output // .my-selector { // font-family: var(--nds-font-family-base); // font-size: var(--nds-font-size-base); // line-height: var(--nds-line-height-base); // } Copy "},{"title":"Body Typesets​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#body-typesets","content":"Used for content, the body typesets are typically set at the document body to define the defaults for most content. They always use a font family of font-family-base and a line height of line-height-base. body-xs\tbody-sm\tbody-md\tbody-lg Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Additionally, the body-base typeset uses the base font size token (font-size-base). "},{"title":"UI Typesets​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#ui-typesets","content":"Used for user interface elements where text doesn't typically reflow, the UI typesets have a smaller default line height than body typesets. They always use a font family of font-family-base and a line height of line-height-3. ui-xs\tui-sm\tui-md\tui-lg Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Additionally, the ui-base typeset uses the base font size token (font-size-base). "},{"title":"Heading Typesets​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#heading-typesets","content":"Used to convey hierarchy, the heading typesets create greater vertical separation while still adhering to a consistent vertical rhythm. Heading\tExampleheading-1 Lorem ipsum dolor sit heading-2 Lorem ipsum dolor sit heading-3 Lorem ipsum dolor sit heading-4 Lorem ipsum dolor sit heading-5 Lorem ipsum dolor sit heading-6 Lorem ipsum dolor sit "},{"title":"Font Family​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#font-family","content":"Our font family system provides design tokens for sans serif, serif, and monospace font family types, all defaulting to their respective system stack. System stack defaults help us keep the size of the design system down while ensuring that all devices use a font that looks good on that device. To customize the font family and ensure a more consistent typographic experience for your users, simply override the font family design tokens. Token\tCustomizable\tUsagefont-family-system-sans\tno\ta sans serif system font stack font-family-system-serif\tno\ta serif system font stack font-family-system-mono\tno\ta monospace system font stack font-family-sans\tyes\tthe main sans serif font family font-family-serif\tyes\tthe main serif font family font-family-mono\tyes\tthe main monospace font family font-family-base\tyes\tthe main font family that will be used throughout your application font-family-headings\tyes\tthe font family that will be used for headings "},{"title":"Usage Examples​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#usage-examples","content":"Use a font family token @use '@wwnds/core' as nds; .my-serif-selector { font-family: var(--nds-font-family-serif); } Copy Set custom serif font as base @use '@wwnds/core' with ( $font-family-serif: 'Lora', $font-family-base: var(--nds-font-family-serif), ); // --nds-font-family-base will resolve to &quot;'Lora', var(--nds-font-family-system-serif)&quot; Copy "},{"title":"Font Size​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#font-size","content":"The main way to control font sizing in the Norton Design System is with the font size role tokens. These tokens capture the base font size for your content, sizes suitable to convey hierarchy (in other words: headings), and a small subset of t-shirt sizes to help create a consistent sense of scale for typography in your application. Role Token\tDefault value\tPx equivalent1font-size-base\tfont-size-md\t16px font-size-xs\tfont-size-12\t12px font-size-sm\tfont-size-14\t14px font-size-md\tfont-size-16\t16px font-size-lg\tfont-size-18\t18px font-size-h1\tfont-size-32\t32px font-size-h2\tfont-size-24\t24px font-size-h3\tfont-size-20\t20px font-size-h4\tfont-size-18\t18px font-size-h5\tfont-size-16\t16px font-size-h6\tfont-size-14\t14px Font size system tokens form the basis of the font sizing system. Note that these cannot be modified and always use rem units to ensure that the user is in charge of text size. System Token\tValue\tPx equivalent1font-size-10\t0.625rem\t10px font-size-12\t0.75rem\t12px font-size-14\t0.875em\t14px font-size-16\t1rem\t16px font-size-18\t1.125rem\t18px font-size-20\t1.25rem\t20px font-size-24\t1.5rem\t24px font-size-32\t2rem\t32px font-size-40\t2.5rem\t40px font-size-48\t3rem\t48px  "},{"title":"Usage Examples​","type":1,"pageTitle":"Typography","url":"docs/foundations/typography#usage-examples-1","content":"Using a font size token @use '@wwnds/core' as nds; .my-large-text { font-size: var(--nds-font-size-lg); } Copy Use larger font sizes across your application @use '@wwnds/core' with ( $font-size-xs: var(--nds-font-size-14), $font-size-sm: var(--nds-font-size-16), $font-size-md: var(--nds-font-size-18), $font-size-lg: var(--nds-font-size-20), ); // --nds-font-size-base is still equal to var(--nds-font-size-md), // making the base font size equivalent to 18px Copy Since all font sizes are set as rem, the computed pixel equivalent assumes a browser font size of 16px.↩ "},{"title":"Core API","type":0,"sectionRef":"#","url":"docs/guides/dev/core-api","content":"","keywords":""},{"title":"Theming variables​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#theming-variables","content":"These variables should be configured in a forwarded stylesheet to ensure the most flexibility. Token\tDefault value\tUsage$primary-family\t&quot;teal&quot;\tThe family used in components that have a default color $primary-grade\t60\tThe grade that defines the midpoint of the primary color $base-family\t&quot;navy&quot;\tBackground, border, or shadow gradients $base-grade\tnull (unset)\tThe grade that defines the midpoint of the base color $disabled-family\t&quot;base-color&quot;\tNot currently usable, non-interactive $disabled-grade\t30\tThe grade that defines the midpoint of the disabled color $error-family\t&quot;red&quot;\tError, danger, or incorrect $error-grade\t60\tThe grade that defines the midpoint of the error color $success-family\t&quot;green&quot;\tSuccess, passing, or correct $success-grade\t60\tThe grade that defines the midpoint of the success color $warning-family\t&quot;yellow&quot;\tWarning or caution $warning-grade\t60\tThe grade that defines the midpoint of the warning color $background-color\twhite\tThe main background color $text-color\tbase-color-90\tThe main text color $text-color-inverse\tbackground-color\tA contrasting text color $subdued-color\tbase-color-60\tDe-emphasized, muted, or subdued content $selection-background-color\tnull (unset)\tThe background color of user-selected text $selection-text-color\tnull (unset)\tThe text color of user-selected text $focus-color\tblue-50\tThe color used when an element has been focused (:focus) $focus-halo-inner-color\tbackground-color\tThe inner color of the focus halo $focus-halo-outer-color\tfocus-color\tThe outer color of the focus halo $radius-base\tvar(--nds-radius-sm)\tThe main border radius used for component shapes $hd-dpi\t200\tThe minimum dots per inch (dpi) of a high-resolution screen $hd-dppx\t125\tThe minimum dots per pixel unit (dppx) for a high-resolution screen $min-xs\t0\tThe minimum width for an extra small screen: a handset $min-sm\t600px\tThe minimum width for a small screen: a large handset or small tablet $min-md\t960px\tThe minimum width for a medium screen: a large tablet or small laptop $min-lg\t1280px\tThe minimum width for a large screen: a desktop $min-xl\t1920px\tThe minimum width for an extra large screen: a high-definition device $duration-scalar\t1\tA multiplier used for increasing/decreasing all motion speed $font-family-sans\tvar(--nds-font-family-system-sans)\tThe main sans serif font family $font-family-serif\tvar(--nds-font-family-system-serif)\tThe main serif font family $font-family-mono\tvar(--nds-font-family-system-mono)\tThe main monospace font family $font-family-base\tvar(--nds-font-family-sans)\tThe main font family that will be used throughout your application $font-family-headings\tvar(--nds-font-family-base)\tThe font family that will be used for all headings $font-size-root\t1em\tThe font size that is used to define 1rem $font-size-xs\tvar(--nds-font-size-12)\tAn extra small font size $font-size-sm\tvar(--nds-font-size-14)\tA small font size $font-size-md\tvar(--nds-font-size-16)\tA medium font size $font-size-lg\tvar(--nds-font-size-18)\tA large font size $font-size-h1\tvar(--nds-font-size-32)\tThe font size used for the highest heading level $font-size-h2\tvar(--nds-font-size-24)\tThe font size used for second-level headings $font-size-h3\tvar(--nds-font-size-20)\tThe font size used for third-level headings $font-size-h4\tvar(--nds-font-size-18)\tThe font size used for fourth-level headings $font-size-h5\tvar(--nds-font-size-16)\tThe font size used for fifth-level headings $font-size-h6\tvar(--nds-font-size-14)\tThe font size used for sixth-level headings $font-size-base\tvar(--nds-font-size-md)\tThe font size used on the body and to set most text $font-weight-base\tvar(--nds-font-weight-regular)\tThe font weight used for body copy $font-weight-headings\tvar(--nds-font-weight-bold)\tThe font weight used for headings "},{"title":"Tokens​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#tokens","content":"The tokens mixin sets the foundations that contain design tokens as global CSS custom properties on the :root element. You will almost always want to set this as a global stylesheet, as most component styles use the CSS custom properties in their styling. Example: src/styles/tokens.scss @use '@wwnds/core'; @include core.tokens; Copy "},{"title":"Reset​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#reset","content":"The reset mixin is meant to be used to create a global stylesheet that ensures that all HTML elements are rendered consistently across browsers. Example: src/styles/reset.scss @use '@wwnds/core'; @include core.reset; Copy "},{"title":"Components​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#components","content":"The component API provides three levels of usage with different levels of customization to suit your needs. "},{"title":"All components​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#all-components","content":"All component declarations can be set at once in one mixin. Example: src/styles/all-components.scss @use '@wwnds/core'; @include core.components; // resulting CSS will contain declarations for all components Copy "},{"title":"Individual components​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#individual-components","content":"Each individual component exposes a style mixin that is namespaced with the component's name on the top-level API (e.g., button-style). Example: src/styles/my-button.scss @use '@wwnds/core'; @include core.button-style; // resulting CSS will contain only button declarations Copy "},{"title":"Fully modular mixins​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#fully-modular-mixins","content":"Each component composes its styles via mixins. Generally, these are applied to the component's anatomy with BEM selectors but you can use them with your own selectors. Example: src/styles/my-button.scss @use '@wwnds/core'; .custom-button { @include core.button-base; @include core.button-solid; // override or add your own styles // border: 2px solid var(--nds-button-color-80); } .custom-button__icon { @include core.button-icon; } // resulting CSS will contain only the above two declarations Copy "},{"title":"Helpers​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#helpers","content":"Helpers are composed declarations that help with common styling needs that are not connected to any component. Unlike utilities, helpers always set multiple properties per declaration or compose styles together to meet a specific need. Helpers are disabled by default and must be turned on by setting $enable-helpers to true. Example: src/styles/helpers.scss @use '@wwnds/core' with ( $enable-helpers: true, ); @include core.helpers; Copy "},{"title":"Utilities​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#utilities","content":"Utilities are declarations that set a single property and are turned off by default. To enable them, they must be turned on with the $enable-utilities map. Note that the utility API is deliberately minimal and is not suited for production usage. If you would like to use a more utility-focused approach, we like Tailwind CSS. Example: src/styles/utilities.scss @use '@wwnds/core' with ( $enable-utilities: ('color', 'spacing'), ); @include core.utilities; Copy "},{"title":"Complete​","type":1,"pageTitle":"Core API","url":"docs/guides/dev/core-api#complete","content":"The complete mixin provides a single way to opt into every declaration. Note that this can also be accessed directly by using @wwnds/core/full. Example: src/styles/norton-design-system.scss @use '@wwnds/core'; @include core.complete; Copy "},{"title":"React API","type":0,"sectionRef":"#","url":"docs/guides/dev/react-api","content":"React API To come This guide is still being written. Please bear with us while we finalize it and open an issue on GitHub if you would like to contribute.","keywords":""},{"title":"Writing CSS","type":0,"sectionRef":"#","url":"docs/guides/dev/writing-css","content":"","keywords":""},{"title":"Theming​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#theming","content":"The Norton Design System's CSS is fully themeable through the use of Sass variables. The variables that capture the foundational style elements constitute the main interface for theming an application. Refer to the variables table to learn more about these customizable variables. "},{"title":"Best practices​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#best-practices","content":"To get the most out of the Norton Design System's CSS, some best practices should be followed for writing your CSS. "},{"title":"Use CSS custom properties, not Sass variables​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#use-css-custom-properties-not-sass-variables","content":"CSS custom properties are live variables that can be modified via JavaScript and will always reference the current value of the token. Sass variables, on the other hand, are hard-coded into the stylesheet when the CSS is compiled and cannot be changed after that point. @use '@wwnds/core'; // 👍 Good: use the CSS custom property .foo { font-family: var(--nds-font-family-serif); } // 👎 Bad: use the Sass variable .foo { font-family: core.$font-family-serif; } Copy Why? CSS custom properties are supported directly in the browser, whereas Sass variables are not. "},{"title":"Use role tokens, not system tokens​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#use-role-tokens-not-system-tokens","content":"Using role tokens will facilitate theming in your application through customization since role tokens can be customized and system tokens cannot. Refer to the design token types inheritance outline for more clarification of this convention. @use '@wwnds/core'; // ✨ Best: modify a known role token at this scope and then use it // (not always possible) .foo { --nds-background-color: var(--nds-base-color-20); background-color: var(--nds-background-color); } // 👍 Good: use the role token .foo { background-color: var(--nds-base-color-20); } // 👎 Bad: use the system token .foo { background-color: var(--nds-navy-20); } Copy Why? System token values are static and cannot be modified, which prevents you from using them to theme your component. "},{"title":"Override token values instead of property values whenever possible​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#override-token-values-instead-of-property-values-whenever-possible","content":"Some tokens, like text-color and background-color are set globally and are designed to use the CSS cascade to style all elements. We encourage you to embrace the cascade—a fundamental feature of CSS—modifying token values at specific scopes to accomplish your goals instead of modifying properties directly. @use '@wwnds/core'; // 👍 Good: override the token value and then use it .foo { --nds-text-color: var(--nds-base-color-10); --nds-background-color: var(--nds-primary-color-80); color: var(--nds-text-color); background-color: var(--nds-background-color); } // Okay: override the property value .foo { color: var(--nds-base-color-10); background-color: var(--nds-primary-color-80); } Copy Why? This will ensure that children of this component that use the role tokens use the locally-scoped values instead of the global ones. For instance, the focus-halo uses --nds-background-color to create the illusion of an offset halo when an element is focused. If your element's background color is hard-coded as --nds-primary-color-80, that focus halo will now have an offset that does not appear to match the background color. It's considered okay to use tokens directly in scenarios where component isolation is favored. "},{"title":"Compose your own CSS custom properties out of existing tokens​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#compose-your-own-css-custom-properties-out-of-existing-tokens","content":"We deliberately provide only a small set of opinionated design tokens but recognize that you may have application-specific styles that would make sense as tokens. @use '@wwnds/core'; // 👍 Good: declare and use your own reusable custom properties out of existing tokens :root { --brand-gradient: linear-gradient( var(--nds-primary-color), var(--nds-primary-color-90), ); } Copy "},{"title":"Use Sass modules​","type":1,"pageTitle":"Writing CSS","url":"docs/guides/dev/writing-css#use-sass-modules","content":"When using the Sass directly, avoid @import, favoring @forward and @use. // ✨ Best: forward a configured version of the core library @forward '@wwnds/core' with ( // configured Sass variables $radius-base: var(--nds-radius-xl), ); // 👍 Good: use the core library directly @use '@wwnds/core'; // 👎 Bad: use the deprecated import syntax @import '@wwnds/core/full'; Copy Why? The @import at-rule is being deprecated by Sass and won't work sometime in the future. See more about this in the guide on stylesheet configuration. "},{"title":"Stylesheet setup","type":0,"sectionRef":"#","url":"docs/guides/dev/stylesheet-setup","content":"","keywords":""},{"title":"Single stylesheet​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#single-stylesheet","content":"The simplest way to use the design system's styling is to use a single global stylesheet. This can be accomplished with either the pre-built CSS or the full Sass entry point. "},{"title":"Pre-built CSS​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#pre-built-css","content":"Two CSS files are included in our release distributions of @wwnds/core. dist/main.css - the complete stylesheet.dist/tokens.css - only the global design tokens (excluding component tokens), set on the :root element. &lt;!-- in a Node.js project --&gt; &lt;link href=&quot;node_modules/@wwnds/core/dist/main.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;!-- using unpkg as a CDN (not suitable for production but ideal for prototyping) --&gt; &lt;link href=&quot;https://unpkg.com/@wwnds/core/dist/main.css&quot; rel=&quot;stylesheet&quot; /&gt; Copy "},{"title":"Custom build​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#custom-build","content":"If you would like to customize something but still use the complete stylesheet, it is recommended that you use the full Sass entry point. For instance, the following will be identical to the dist/main.css file but with the primary color family assigned to yellow (default is teal). @use '@wwnds/core/full' with ( $primary-family: 'yellow', ); Copy Note that a similar approach can be accomplished by using the complete mixin to create your own complete stylesheet. "},{"title":"Modular usage​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#modular-usage","content":"Using the Sass modules directly is ideal for scenarios where a single global stylesheet is not desired, such as in a React environment or when you only want to use part of the design system. "},{"title":"Configuration​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#configuration","content":"The best way to get started with modular stylesheets is to @forward a configured version of the design system for use in your stylesheets. This acts as the main place where Sass variables are configured to meet the needs of your application's look and feel and does not itself contain any declarations. src/styles/_nds.scss // note: name this file whatever makes sense to you @forward '@wwnds/core' with ( $font-family-base: 'My fancy font', $radius-base: var(--nds-radius-xl), $primary-family: 'cyan', ); Copy Customizable variables Any variable in @wwnds/core that contains the !default flag is customizable in this way. These variables are documented in the Sassdoc documentation, as well as the Core API - Theming variables table. Once your configured version of @wwnds/core has been forwarded, it should be @used anywhere you need to use the core mixins or functions. "},{"title":"Setting tokens​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#setting-tokens","content":"At a minimum, you must create and use one global stylesheet to set the design tokens as CSS custom properties. This is because every component, utility, and helper in the design system uses our design tokens. src/styles/globals.scss @use 'nds'; // the configured &amp; forwarded src/styles/_nds.scss @include nds.tokens; // contains `:root` declarations with CSS custom properties // optionally include other globals, such as the HTML reset styles @include nds.reset; Copy "},{"title":"Other approaches​","type":1,"pageTitle":"Stylesheet setup","url":"docs/guides/dev/stylesheet-setup#other-approaches","content":"Other approaches, such as using the @import syntax or CSS-in-JS may work but aren't well-tested. Use them at your own risk. CSS modules​ While not well tested, CSS modules can be composed with core styles in environments that support CSS modules, such as in React. src/components/CustomButton/nds-button.scss @use '../../styles/nds'; // apply the default design system styles for the button component @include nds.button-style; Copy src/components/CustomButton/index.module.scss @use '../../styles/nds'; // the configured &amp; forwarded src/styles/_nds.scss .btn { // override a component token --nds-button-border-radius: var(--nds-radius-pill); // set additional styles with core margin-bottom: nds.spacer(&quot;1rem&quot;); } Copy src/components/CustomButton/index.jsx import React from &quot;react&quot;; import { Button } from &quot;@wwnds/react&quot;; // main design system button styles import &quot;./nds-button.scss&quot;; // modular styles import styles from &quot;./index.module.scss&quot;; export const CustomButton = ({ children, ...props }) =&gt; ( &lt;Button className={styles.btn} {...props}&gt; {children} &lt;/Button&gt; ); Copy "},{"title":"Usable Writing Guidelines","type":0,"sectionRef":"#","url":"docs/guides/usable-writing-guidelines","content":"","keywords":""},{"title":"Principles​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#principles","content":"Write for all users Our writing is accessible and inclusive. We respect the cognitive capacity of our users by being direct and using simple words. Accessible writing helps users feel smart and effective, whereas inaccessible writing slows down and discourages users. Put users' needs first We help our users accomplish what they need to do quickly and easily. We are mindful of our users' goals and reasons for using our products. Prioritize trust and respect We earn our users' trust with accurate, clear, concise writing. We are straightforward and transparent with our communication. Less is more We value conciseness. We make sure our writing is accurate, clear, and brief, in that order. We choose to phrase things in the shortest, simplest way possible while preserving meaning and understanding. "},{"title":"Dos & Don'ts​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#dos--donts","content":""},{"title":"Do​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#do","content":"Write for all users.Everyone has a limited ability to process information called cognitive capacity. Be direct and clear to keep cognitive capacity high. Cognitive capacity can be lower when we are tired, overwhelmed, experiencing disability that affects cognitive functioning, or aren't fluent in a domain or language.Cognitive capacity is depleted more quickly by abstract concepts, difficult words, and tasks that require us to hold a lot of information in our heads. Put users' needs first.Help them accomplish their goals. Try to make people's lives easier. Respect their time. Be accurate, clear, and brief (in that order).Conciseness is important, but don't sacrifice accuracy or clarity for it. Aim for just enough copy.Use fewer words if possible. Understand that people scan more than they read. Trust people to figure some things out. Write how you speak.Use plain, direct language and say it out loud. Aim for an 8th grade reading level. Be consistent and clear. Communicate hierarchy.Use headings to show what's important. Chunk longer pieces of content into meaningful units. Keep your own expertise in mind.Ask other (non-Norton) people to read your copy. You have insider knowledge that your users don't. Know when to violate traditional writing and grammar rules.Good usable writing isn't always grammatically correct, like colloquial speech. For usability, it's best to default to the way most people speak even if it's “incorrect.” "},{"title":"Don't​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#dont","content":"Don't assume what your users' needs are.Back up your assumptions with data or qualitative research wherever possible. Don't expect people to trust you automatically.We need to create that trust through accurate and understandable writing. Don't over-explain.This diminishes trust. Don't use jargon, internal terms, or unnecessarily big or fancy words.If there's a simpler and less formal way of saying something, do it. Don't create obstacles.Requiring them to read too much text is an obstacle. Don't forget that you're not the only kind of user.This narrows your perspective. The goal is to broaden it. "},{"title":"Accurate, Clear, Brief (in that order)​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#accurate-clear-brief-in-that-order","content":"Good usable writing is: AccurateAccurate copy is true, precise and specific. Above all else, copy should be accurate to maintain people's trust. ClearClear copy is easily understandable, uses simple words and phrases, and makes logical sense. BriefBrief copy is short and sweet. Use as few words as possible to get the point across in an accurate and clear way. [Credit: The 10% Solution by Ken Rand via Writing for Designers by Scott Kubie] "},{"title":"Chunking​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#chunking","content":"Chunking is breaking content up into meaningful, distinct units. This helps people understand and remember content and helps communicate hierarchy. “Chunks” should still make sense in the context of the larger whole. "},{"title":"Chunk with a purpose​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#chunk-with-a-purpose","content":"Don't chunk content randomly. Chunk content into meaningful groups of information.Think about chunking like an outline. Why? Purposeful chunking helps people understand the content because each chunk has a specific goal. It also makes it easier for people to skim the text for what they need, which is how people read digital copy. "},{"title":"Use short paragraphs​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-short-paragraphs","content":"Use short paragraphs with white space between them instead of long paragraphs that become walls of text. Why? Walls of text are more difficult for people to comprehend. They can seem intimidating and time-consuming, which means people are more likely to skip them or even close the page or application completely. "},{"title":"Use lists​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-lists","content":"Use a list when you have three or more related items.Don't include more than seven items in your list if users need to remember each item. Why? Lists structure content and break information into manageable pieces, which helps comprehension, but using lists doesn't mean we should include dozens of items. Short-term memory is limited. Seven items is typically considered the maximum a person can hold in their head at one time. "},{"title":"Format data​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#format-data","content":"Don't use long strings of numbers or data, like 2123545500 or CCTACAGGAT.Chunk data with standard formatting and expected symbols, like (212) 354-5500.Add white space for long strings of letters or numbers, like CCT ACA GGAT. Why? Formatting data helps to minimize user error and makes it easier for people to scan. "},{"title":"Use clear hierarchies​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-clear-hierarchies","content":"Don't group chunks of content randomly.Create clear hierarchies with related content grouped together. Why? Clear hierarchies (see the next section) help people understand relationships and order of importance. "},{"title":"Hierarchy​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#hierarchy","content":"Hierarchy communicates meaning and structure through unique, brief headings. It helps people understand the importance of different pieces of content, and allows them to scan and find information that's relevant to them. Hierarchy is important for everyone, especially people who use assistive technology, like screen readers. These users often navigate a page using headings to find the content they need. "},{"title":"Use headings​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-headings","content":"A heading helps to define a specific section of content. You can: Use more than one heading on a page.Use headings 1 through 6 (without skipping numbers).Nest headings. "},{"title":"Structure chunked content​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#structure-chunked-content","content":"Don't use headings for something other than providing hierarchy.Think about your headings as an outline.Ask: If you only read the headings, could you understand the main ideas? Why? Headings should help people understand the content's structure and support your chunking (see section above). People who use screen readers often use headings to navigate. Headings makes it easier for them to navigate, find what they're looking for and complete activities. "},{"title":"Be concise​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#be-concise","content":"Don't use long sentences as headings.Use short phrases or a single word. Why? Headings should provide a brief overview of the content and be easily scannable. "},{"title":"Be specific​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#be-specific","content":"Don't be general, vague, or use words that don't relate to the content being structured.Be specific, so the heading provides a clear outline of the content. Why? Headings should be specific so users can quickly skim for the content they need. If headings are too general, it will be difficult for people to understand the content's structure and find the information they're looking for. "},{"title":"Be unique​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#be-unique","content":"Always use unique headings.Never use the same heading twice on the same page. Why? Unique headings help people find their place. They are particularly important for screen reader users who often navigate and skim the text by heading. "},{"title":"Convey rank​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#convey-rank","content":"Don't skip headings (don't jump from a heading 1 to a heading 3).Use consecutive headings (heading 1 to heading 2, heading 2 to heading 3) Why? Screen reader users often use headings to navigate content. If we skip headings, these users might be confused or think that they are missing content. "},{"title":"Resources​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#resources","content":"Web Accessibility Criteria – Headings and Titles (article)Using Headings to Convey Meaning and Structure (section) "},{"title":"Clear words​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#clear-words","content":"Clear words refers to the practice of writing clearly and at an appropriate level for your users. Using clear words helps people understand and remember content and learning objectives. Clear words are beneficial for people with cognitive and learning disabilities, language impairments, memory impairments, and autism. Clear words also benefit people who are tired, distracted, or stressed, people with low literacy, and people who are working outside their first language, such as those who speak English as a second language or use sign language. "},{"title":"Use common words​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-common-words","content":"Don't use complex words and phrases.Use familiar, everyday words.Define uncommon words if you need to use them. Why? Even though we're making educational materials, there's no need to make them more complicated or high-level than they need to be. When we need to use uncommon or technical terms due to the subject matter, define them within the activity. Don't make people refer back to the textbook or Google for a definition, which takes them away from the product and off the path of accomplishing their goal. "},{"title":"Use active voice​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-active-voice","content":"Don't use passive voice (a subject that is a recipient of a verb's action). Example:Use active language (a subject that acts on a verb). Example: Why? Passive voice makes your writing difficult to understand. Active voice is easier for everyone to understand, but it's especially beneficial for people with cognitive impairments and non-native English speakers. "},{"title":"Avoid technical or wordy language​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#avoid-technical-or-wordy-language","content":"Use familiar words or vocabulary.Define technical terms the first time you use them (if the subject matter requires them). Why? Familiar, straightforward language will help people focus on their objective instead of trying to parse difficult words or sentences. We shouldn't assume that people are familiar with technical terms defined elsewhere. "},{"title":"Avoid double negatives​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#avoid-double-negatives","content":"Don't use double negatives in your writing. This includes No/not + negative adverb (hardly, scarcely)No/not + negative prefix (un-, mis-, in-, non-)No/not + word that has a negative meaning (absence, without, fail)No/not in a prompt + an answer choice with a negativeExceptions within an exception Use positive language. No fewer than → At leastNot unnecessary → NecessaryIf you fail to respond you cannot continue → You can continue when you respond Why? Double negatives are often confusing and obscure the meaning you're trying to convey. Using positive language is often more precise and concise. "},{"title":"Clear comprehension​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#clear-comprehension","content":"Clear comprehension looks at the purpose of your writing to make sure its intention is clear to people. Clear comprehension is especially important for people with cognitive and learning disabilities, autism, and dyslexia. Ask: Can people easily understand the intended meaning and draw the correct conclusions or perform the necessary actions? "},{"title":"Use literal language​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-literal-language","content":"Don't use idioms (a phrase or expression with a figurative, non-literal meaning). Use literal language. Idioms: Wrap my head around it → understand. Right under your nose → it was obvious. Missed the boat → missed the opportunity. Why? Literal language is clearer and doesn't obscure meaning. Literal language is easier for people with cognitive impairments, autism, and those who are learning English as a second language, as well as those who are tired, distracted, or stressed. "},{"title":"Check readability​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#check-readability","content":"Aim to write text at an 8th grade reading level or lower.Review your content with a readability checker, like the Hemingway Editor app. Why? A readability checker analyzes the length of your words and sentences to assign your content a grade level. This grade level corresponds to the years of formal education someone would need in order to read and understand the content easily. If we write at a grade level that is too high for our users, it will be difficult for them to understand and absorb the content. Writing at an 8th grade level or lower is ideal, even for college students and instructors, and helps us ensure our content is readable by a majority of people. "},{"title":"Be concise​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#be-concise-1","content":"Don't use long sentences.Use short, direct sentences that get to the point quickly. Why? The longer the sentence, the more difficult it will be to understand. This is most impactful for people with cognitive impairments and non-native English speakers. "},{"title":"Expand acronyms on first use​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#expand-acronyms-on-first-use","content":"Avoid using acronyms whenever possible.Spell out uncommon acronyms on first use, if you need to use them. For example: Web Content Accessibility Guidelines (WCAG). Once you've defined the acronym you can use the acronym on its own. Why? Expanding an acronym on first use helps people remember what the acronym stands for. It doesn't assume that they have memorized the acronym and it allows people to keep reading instead of returning to the textbook or Google to find it. "},{"title":"Avoid abbreviations​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#avoid-abbreviations","content":"Avoid abbreviations, especially when they could be confusing or have multiple meanings. For example, “Dr.” could mean “doctor” or “drive.” Write out all words when possible, unless the abbreviation is important for the subject matter. Why? Writing out all abbreviations makes the content more available to all people, but it's particularly helpful for those with cognitive impairments, learning disabilities, and autism. "},{"title":"Write in sentence case​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#write-in-sentence-case","content":"Don't write in all caps or title case.Write in sentence case: the first letter of a sentence is capitalized. Why? All caps and title case are more difficult to read, especially for people with dyslexia. "},{"title":"Resources​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#resources-1","content":"Legibility, Readability, and Comprehension: Making Users Read Your Words (article) "},{"title":"Clear names​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#clear-names","content":"A clear name assigns a readable label to an important component. These components can include: ButtonsDropdownsText boxesLink textLists Clear names help people understand what they're supposed to do and what will happen when they take an action. While clear names are helpful to everyone, they're particularly important for people with cognitive, visual, and physical impairments. "},{"title":"Be concise​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#be-concise-2","content":"Don't use long sentences or phrases.Use short phrases or a single word. Why? Too many words will take longer to read and can confuse people. If you find that your label is more than four words, consider redesigning the action. "},{"title":"Make the relationship between labels and components clear​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#make-the-relationship-between-labels-and-components-clear","content":"Don't separate labels from the components they're describing.Place the label in or close to the component. Why? Placing the label and component together helps to associate the label with the component. This is important for buttons, dropdowns, text boxes, and lists. It's particularly important to make sure labels and components stay together on small phone screen sizes as well. This spatial relationship on the screen is important for people with cognitive impairments and people who use screen magnifiers and voice recognition. This relationship is also essential for people who use screen readers, so it needs to be conveyed through the structure of the code as well. (Talk to the Accessibility team if you need more information.) "},{"title":"Use device-agnostic instructions​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-device-agnostic-instructions","content":"Don't use verbs like tap, drag, type, press, or see.Use verbs like select, choose, add, or click. Why? Providing instructions for one specific device or experience excludes people who use assistive technology and people who are on devices that have different methods of interacting with content (for example, using a mouse vs a phone with a touch screen). If we limit our instructions, these people will assume that they cannot complete the action being described. "},{"title":"Use action verbs for buttons​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-action-verbs-for-buttons","content":"Don't use vague or generic button text (like “configure”).Use precise, task-focused verbs (like “save”). Why? Vague or generic labels can make people confused or uncertain about what will happen if they click a button. Specific action verbs help people remember what they should be doing but they are precise enough that people know what will happen before they click the button. "},{"title":"Use meaningful link text​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-meaningful-link-text","content":"Don't use ambiguous link text, such as “click here” or “read more.”Write link text so that it describes the content of the link target.Ask: If the link were stand-alone text, would you understand where the link would take you? Why? When we include a link, we should help people understand where that link will take them before they click it. People who use screen readers can explore content by reading just the linked text in that content, so we need to make sure that the linked text makes sense outside of the paragraph or sentence where it's located. "},{"title":"Resources​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#resources-2","content":"5 Rules for Choosing the Right Words on Button Labels (article)Better Link Labels: 4Ss for Encouraging Clicks (article) "},{"title":"Clear order​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#clear-order","content":"Clear order makes sure that elements on a page are in a reasonable and understandable order, independent of screen size and assistive technology being used. People expect to read content in a specific order. If we present content in an unexpected way, people could be confused and frustrated when they try to read it or complete an action. People who have cognitive and learning disabilities and people who use screen readers and screen magnifiers are impacted the most by incorrect content order. "},{"title":"Left to right, top to bottom​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#left-to-right-top-to-bottom","content":"Follow the typical English reading order: left to right and top to bottom.Check your content on a phone so you can determine the content order when everything reflows. Why? Checking content on your phone will mimic the experience of someone who uses a screen reader, screen magnifier, or text-to-speech reader. **Ask:** Does the order of your content still make sense when everything reflows in a narrow column? When placing content for larger screen sizes, people will expect the content to be in a specific order. Review it from left to right, and top to bottom.Ask: Does the content make sense in this order? "},{"title":"Put instructions in context​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#put-instructions-in-context","content":"Don't place instructional text after the action or far away from where people take it.Place the instructional text as close to the action as possible.Avoid placing unnecessary information or elements between the prompt, instruction, and action. Why? The order of this content is important. Prompts and instructions should always come before the action. If you place them after the action, people can miss them or begin an action without understanding it. "},{"title":"Resources​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#resources-3","content":"Write Chronologically, Not Spatially (section)Write left to right, top to bottom (section) "},{"title":"Avoid relying on visual cues​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#avoid-relying-on-visual-cues","content":"Visual cues are anything on screen that communicates information based solely on someone's ability to see and interpret that cue. We want to avoid relying on visual cues because we have users who don't rely on visual cues to understand our content and complete actions. These people use screen readers, screen magnifiers, are color blind, or have cognitive or learning disabilities. Therefore, using visual-only cues can be confusing and frustrating for these people, or make an action impossible to complete. "},{"title":"Use text to communicate color-coded information​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#use-text-to-communicate-color-coded-information","content":"Don't use color as the only way to communicate information.Use a word or phrase to communicate the color-coded information. Instead of just using the color green for correct, include the word “Correct” as well.Instead of just using the color red for incorrect, include the word “Incorrect” as well. Why? People who live with visual impairments (who use screen readers or screen magnifiers, or who are color blind) will have difficulty understanding visual cues like color-coding, or will not see them at all. They need another way to receive this information. "},{"title":"Don't reference color or text style​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#dont-reference-color-or-text-style","content":"Don't reference color or text style, like “the blue button” or “the bold text.”Repeat the content you want to reference or put it in quotes. Why? People who are colorblind or use screen readers will have difficulty identifying color-coded text. People who use screen readers will also have difficulty understanding stylized text. We need to provide another way for them to receive this information. "},{"title":"Don't use spatial directions​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#dont-use-spatial-directions","content":"Don't use spatial directions, like “on the left” or “above.”You can use “before” and “after,” if needed.Place content close together so spatial instructions aren't necessary. Why? Content may reflow based on the user's device or assistive technology, so using spatial directions may be incorrect or confusing in some circumstances. "},{"title":"Resources​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#resources-4","content":"Don't Use Colors or Icons Alone (section)Write Chronologically, Not Spatially (section) "},{"title":"Set your words as text​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#set-your-words-as-text","content":"Your words should almost always be set as selectable text on the screen. “Selectable text” means that you can highlight (or select) the text with your mouse. Setting your words as selectable text means that: People who use a screen reader can interact with the text.People with low vision can enlarge the text for a zoomed-in reading experience.People can change the text to their preferred font in their browser.People can use text-to-speech to hear the content read aloud.People who are non-native English speakers can translate the text if needed.People on their phones will have an easier reading experience. "},{"title":"Selectable text​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#selectable-text","content":"Always set your words as selectable text. It is acceptable to set your text as an image if doing so is the only way to present the information accurately. For example: Complex equationsWords within music notationScansion marks If you must set text as an image, make sure to write alt text for that image that includes the embedded text. "},{"title":"Meaningful alternative text​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#meaningful-alternative-text","content":"Meaningful alternative text, or “alt text,” refers to the textual representation of an image. The goal of good alt text is to create an equivalent experience for people who cannot see the image. "},{"title":"Decorative vs. meaningful images​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#decorative-vs-meaningful-images","content":"You don't need to add alt text to decorative images. A decorative image doesn't communicate something important or reveal information.Add alt text to meaningful images. A meaningful image tries to explain, represent, or show information.Review our alt text guidelines for more information on writing effective alt text. We also have specific alt text examples for 13 different image types (starting on page 3). Why? Decorative images don't need to be described because they don't add any important or significant information to the experience. Meaningful images, however, do need a description so screen reader users aren't missing any important information being communicated through the images. "},{"title":"Icons​","type":1,"pageTitle":"Usable Writing Guidelines","url":"docs/guides/usable-writing-guidelines#icons","content":"Add a description to icons that represent important information. The description should be short. For example: if the icon is a warning sign, use “warning.” Why? We typically add icons in order to help people quickly identify recurring elements, like a specific feature box or question. We need to add a description to these icons so people with visual impairments are given the same context that's being communicated by the icon. "},{"title":"Migration","type":0,"sectionRef":"#","url":"docs/migration","content":"","keywords":""},{"title":"v1.0.0-beta.3 → v1.0.0-rc.0​","type":1,"pageTitle":"Migration","url":"docs/migration#v100-beta3--v100-rc0","content":"The first release candidate contains a couple breaking changes, primarily to design token names. "},{"title":"Core​","type":1,"pageTitle":"Migration","url":"docs/migration#core","content":"@wwnds/core contains a handful of breaking changes: Some design tokens have been renamed to be more explicit in their roles. See the summary of updated token names for details. The entirety of _properties.scss has been removed, as it added complexity without adding much value.The following config options were removed: $namespace - the nds namespace is now hard-coded to improve readability.$css-property-fallback - build tools can accomplish this more simply.$warn-on-missing-fallback "},{"title":"React​","type":1,"pageTitle":"Migration","url":"docs/migration#react","content":"@wwnds/react contains one breaking change to TextField. TextField can no longer be used as an uncontrolled component. If you were using it as an uncontrolled component, you'll need to switch to the new TextFieldUncontrolled.If you were using it as a controlled component, you don't need to change anything. "},{"title":"Design Tokens​","type":1,"pageTitle":"Migration","url":"docs/migration#design-tokens","content":"All color role tokens have had the -color suffix added to their names. This should help clarify that the token is a color token. Note that all of the following token names are prefixed with --nds- in the corresponding CSS custom properties in @wwnds/core. New Name\tPrevious Name\tNotesbackground-color\tbody-bg text-color\tbody-text\tRelated new token: text-color-inverse subdued-color\tsubdued focus-ring\tfocus-color\tThe focus-ring token now refers to a box shadow primary-color-x\tprimary-x\tWhere x is a grade or shade* base-color-x\tbase-x\tWhere x is a grade or shade* disabled-color-x\tdisabled-x\tWhere x is a grade or shade* error-color-x\terror-x\tWhere x is a grade or shade* success-color-x\tsuccess-x\tWhere x is a grade or shade* warning-color-x\twarning-x\tWhere x is a grade or shade* focus-halo-inner-color\tfocus-ring-inner focus-halo-outer-color\tfocus-ring\tfocus-ring still exists but is now a box shadow focus-halo\tfocus-shadow focus-ring\tfocus-shadow-collapse\t * A grade is a number like 20 and a shade is an adjective like lighter. "},{"title":"v0.9.x → v1.0.0-beta.0​","type":1,"pageTitle":"Migration","url":"docs/migration#v09x--v100-beta0","content":"The first beta release contained many breaking changes, most notably a complete rewrite of @wwnds/core. "},{"title":"Core​","type":1,"pageTitle":"Migration","url":"docs/migration#core-1","content":"@wwnds/core now makes full use of Sass modules and CSS custom properties. If you were previously using @import statements to use the design system's Sass, it is highly recommended that you update to @forward and @use. Entry points​ There are two main entry points: @wwnds/core (index.scss) - pure abstracts for all modules and components. Using this directly will give you the most flexibility but will require the most work.@wwnds/core/full (full.scss) - a fully-functional stylesheet with a reset and components declared. Using this directly will require little to no work but won't be as flexible as the default entry point. @use '@wwnds/core' as nds with ( $font-family-base: 'Proxima Nova', ); .my-declaration { font-family: var(--nds-font-family-base); // 'Proxima Nova' // font-family: nds.$font-family-base; // alternatively use the Sass variable // (these will compile to the same thing) } Copy View the @wwnds/core readmefor more about this. "},{"title":"React​","type":1,"pageTitle":"Migration","url":"docs/migration#react-1","content":"@wwnds/react changed some elements of the TextField component. The label prop has been removed in favor of children.The following props have been renamed: help → descriptionhelpClass → descriptionClasserrorClass → errorsClass v0.9.x &lt;TextField label=&quot;My text field&quot; help=&quot;A longer description of the text field.&quot; helpClass=&quot;help&quot; errorClass=&quot;error&quot; /&gt; Copy v1.0.0-beta.x &lt;TextField description=&quot;A longer description of the text field.&quot; descriptionClass=&quot;desc&quot; errorsClass=&quot;errors&quot; &gt; My text field &lt;/TextField&gt; Copy The resulting HTML has also changed to make better use of field composition. Most notably, the text field is now a modified field component instead of a root &quot;block&quot; (in BEM conventions). In other words, the &quot;block&quot; class name is now field instead of textfield. This was done to reuse field components across form fields. v1.0.0-beta.x &lt;div class=&quot;nds-field nds-field--text nds-field--invalid&quot; id=&quot;nds-field-1&quot;&gt; &lt;div class=&quot;nds-field__info&quot;&gt; &lt;label class=&quot;nds-field__label&quot; for=&quot;nds-field-1-input&quot; id=&quot;nds-field-1-label&quot; &gt; Default Text Field &lt;/label&gt; &lt;div class=&quot;nds-field__desc&quot; id=&quot;nds-field-1-desc&quot;&gt; The default Text Field has a type of &quot;text&quot; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;nds-field__group nds-field__group--text&quot;&gt; &lt;input id=&quot;nds-field-1-input&quot; class=&quot;nds-field__input nds-field__input--text&quot; aria-describedby=&quot;nds-field-1-desc&quot; aria-invalid=&quot;true&quot; type=&quot;text&quot; value=&quot;&quot; required=&quot;&quot; aria-errormessage=&quot;nds-field-1-err&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;nds-field__feedback&quot;&gt; &lt;ul class=&quot;nds-field__errors&quot; id=&quot;nds-field-1-err&quot; aria-label=&quot;Errors&quot; aria-live=&quot;assertive&quot; aria-atomic=&quot;true&quot; &gt; &lt;li&gt;This nds-field is required.&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; Copy "},{"title":"Principles","type":0,"sectionRef":"#","url":"docs/principles","content":"","keywords":""},{"title":"Accessibility first​","type":1,"pageTitle":"Principles","url":"docs/principles#accessibility-first","content":"Accessibility should drive decisions and should never be an afterthought. We believe that focusing on accessibility at the outset improves usability for everyone. Tips This is similar to the principle of mobile-first design, where designing first for the constraints of a smaller screen ensures that users won't lose information when using mobile devices. Define component boundaries based on information architecture and interaction design, not visual design. Everyone should be able to interact with the component and view its content, but not everyone has access to the visuals.Design for keyboard before designing for mouse. Because keyboard flow is linear, designing for it first will force you to think about the linear layout before the non-linear experience of mouse users.Developers: use ARIA sparingly and carefully, but treat ARIA attributes as your source of truth for everyone whenever possible. "},{"title":"Don't overwhelm​","type":1,"pageTitle":"Principles","url":"docs/principles#dont-overwhelm","content":"Users should never feel distracted or overwhelmed. This applies to both developers and designers who use the design system as well as customers who use products built with the design system. Tips Favor convention over configurationwhenever possible and sensible defaults when many options are required.Use progressive disclosureto allow for complexity without overwhelming.Avoid extraneous cognitive load—the user should be challenged by challenging content, not a challenging interface.Developers: be wary of abstractions that reduce code readability and maintainability. "}]