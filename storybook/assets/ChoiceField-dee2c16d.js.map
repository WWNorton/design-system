{"version":3,"file":"ChoiceField-dee2c16d.js","sources":["../../../../packages/react/src/components/ChoiceField/Choice.tsx","../../../../packages/react/src/components/ChoiceField/Choices.tsx","../../../../packages/react/src/components/ChoiceField/ChoiceField.tsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { BaseInput } from '../BaseInput';\nimport { Icon } from '../Icon';\nimport { FieldInfo, FieldFeedback } from '../Field';\nimport { useForwardedRef, useId } from '../../utilities';\nimport { ChoiceProps } from './types';\n\n/**\n * A choice can either allow for multiple simultaneous choices (`type=\"checkbox\"`)\n * or an a single choice (`type=\"radio\"`). You can also use the `Checkbox` or\n * `Radio` components directly, as they wrap this component.\n */\nexport const Choice = React.forwardRef<HTMLInputElement, ChoiceProps>(({\n\t// options\n\ttype = 'radio',\n\tchecked: checkedProp = false,\n\tindeterminate: indeterminateProp,\n\toptionalIndicator,\n\trequiredIndicator,\n\tvalidators,\n\n\t// anatomy\n\tdescription,\n\tthumbnail,\n\terrors: errorsProp,\n\tchildren,\n\n\t// classes\n\tbaseName = 'nds-field',\n\tclassName = classNames(`${baseName}__group`, `${baseName}__group--choice`),\n\tcontrolClass = classNames(`${baseName}__control`, `${baseName}__control--${type}`),\n\tdescriptionClass,\n\tinputClass = classNames(`${baseName}__input`, `${baseName}__input--${type}`),\n\tthumbnailClass = `${baseName}__thumbnail`,\n\tcheckedClass = `${baseName}--checked`,\n\tlabelClass,\n\terrorsClass,\n\n\t// ids\n\tid: idProp,\n\tlabelId: labelIdProp,\n\tdescriptionId: descIdProp,\n\terrorsId: errorsIdProp,\n\n\t// <input> props\n\trequired,\n\tvalue,\n\n\t// event callbacks\n\tonChange,\n\tonDOMChange,\n\tonValidate,\n\n\t// everything else\n\t...inputProps\n}: ChoiceProps, ref) => {\n\tconst [input, setInput] = useForwardedRef(ref);\n\tconst [checked, setChecked] = React.useState(checkedProp);\n\tconst [indeterminate, setIndeterminate] = React.useState(indeterminateProp);\n\tconst [errors, setErrors] = React.useState(errorsProp);\n\n\tconst uniqueId = useId();\n\tconst inputId = idProp || uniqueId;\n\tconst labelId = labelIdProp || `${inputId}-label`;\n\tconst descId = descIdProp || `${inputId}-desc`;\n\tconst errorsId = errorsIdProp || `${inputId}-err`;\n\n\t// treat prop versions of internal state as source of truth\n\tReact.useEffect(() => setErrors(errorsProp), [errorsProp]);\n\tReact.useEffect(() => setChecked(checkedProp), [checkedProp]);\n\tReact.useEffect(() => setIndeterminate(indeterminateProp), [indeterminateProp]);\n\n\tconst indicator = React.useMemo(() => {\n\t\tif (requiredIndicator && required) return 'required';\n\t\tif (optionalIndicator && !required) return 'optional';\n\t\treturn null;\n\t}, [requiredIndicator, optionalIndicator, required]);\n\n\tconst Control = React.useMemo(() => (\n\t\t<label className={controlClass} htmlFor={inputId} aria-hidden=\"true\">\n\t\t\t{ type === 'checkbox' && (\n\t\t\t\t<Icon\n\t\t\t\t\tvariant={(indeterminate) ? 'minus' : 'check'}\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t/>\n\t\t\t)}\n\t\t</label>\n\t), [controlClass, indeterminate, inputId, type]);\n\n\tconst Thumbnail = React.useMemo(() => {\n\t\tif (!thumbnail) return null;\n\t\treturn (\n\t\t\t<label className={thumbnailClass} htmlFor={inputId} role=\"none\">\n\t\t\t\t{ thumbnail }\n\t\t\t</label>\n\t\t);\n\t}, [inputId, thumbnail, thumbnailClass]);\n\n\tconst Feedback = React.useMemo(() => {\n\t\tif (type !== 'checkbox' || !errors || errors.length === 0) return null;\n\t\treturn (\n\t\t\t<FieldFeedback\n\t\t\t\terrors={errors}\n\t\t\t\terrorsClass={errorsClass}\n\t\t\t\terrorsId={errorsId}\n\t\t\t/>\n\t\t);\n\t}, [type, errors, errorsClass, errorsId]);\n\n\tconst changeHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n\t\tif (onChange) onChange(e);\n\t\telse {\n\t\t\tsetChecked(e.currentTarget.checked);\n\t\t\tsetIndeterminate(false);\n\t\t}\n\t};\n\n\tconst validateHandler = (e: string[]): void => {\n\t\tif (onValidate) onValidate(e);\n\t\tif (!errorsProp) setErrors(e);\n\t};\n\n\tconst isValid = React.useMemo(() => Boolean(!errors || errors.length === 0), [errors]);\n\n\tReact.useEffect(() => {\n\t\tif (input && type === 'checkbox' && indeterminate !== undefined) {\n\t\t\tinput.indeterminate = indeterminate;\n\t\t}\n\t}, [input, type, indeterminate]);\n\n\treturn (\n\t\t<div className={classNames(className, { [checkedClass]: checked })}>\n\t\t\t<BaseInput\n\t\t\t\ttype={type}\n\t\t\t\tchecked={checked}\n\t\t\t\tref={setInput}\n\t\t\t\tid={inputId}\n\t\t\t\tclassName={inputClass}\n\t\t\t\terrors={errors}\n\t\t\t\tvalidators={validators}\n\t\t\t\taria-labelledby={labelId}\n\t\t\t\taria-describedby={(description) ? descId : undefined}\n\t\t\t\taria-invalid={!isValid}\n\t\t\t\taria-errormessage={(!isValid) ? errorsId : undefined}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tonDOMChange={onDOMChange}\n\t\t\t\tonValidate={validateHandler}\n\t\t\t\trequired={required}\n\t\t\t\tvalue={value}\n\t\t\t\t{...inputProps}\n\t\t\t/>\n\t\t\t{ Control }\n\t\t\t{ Thumbnail }\n\t\t\t<FieldInfo\n\t\t\t\tindicator={indicator}\n\t\t\t\thtmlFor={inputId}\n\t\t\t\tlabel={children || value}\n\t\t\t\tlabelClass={labelClass}\n\t\t\t\tlabelId={labelId}\n\t\t\t\tdescription={description}\n\t\t\t\tdescriptionClass={descriptionClass}\n\t\t\t\tdescriptionId={descId}\n\t\t\t>\n\t\t\t\t{ Feedback }\n\t\t\t</FieldInfo>\n\t\t</div>\n\t);\n});\n","import React from 'react';\nimport { Choice } from './Choice';\nimport { ChoiceProps, ChoicesProps } from './types';\n\n/**\n * Convert a list of choice values or choice props into a memoized array of\n * Choice elements.\n */\nexport const Choices: React.FunctionComponent<ChoicesProps> = ({\n\tchoices,\n\tselected,\n\tmultiple,\n\t...props\n}: ChoicesProps) => {\n\t// coerce the selected prop value into an array\n\tconst propSelected = React.useMemo(() => {\n\t\tif (Array.isArray(selected)) return selected;\n\t\tif (selected !== undefined) return [selected];\n\t\treturn [];\n\t}, [selected]);\n\n\tconst ChoiceElements = React.useMemo(() => {\n\t\tlet selectedValid = false;\n\t\tconst choicesMap = choices.map((choice, i) => {\n\t\t\tlet value: React.ReactText;\n\t\t\tlet choiceProps: ChoiceProps;\n\t\t\tif (typeof choice === 'object') {\n\t\t\t\tvalue = (choice.value || choice.children || '').toString();\n\t\t\t\tchoiceProps = { ...choice, ...props, value };\n\t\t\t} else {\n\t\t\t\tvalue = choice;\n\t\t\t\tchoiceProps = { value, children: value, ...props };\n\t\t\t}\n\t\t\tconst key = (value !== undefined) ? value.toString() : `choice-${i}`;\n\t\t\tconst checked = propSelected.includes(value);\n\t\t\tif (checked) selectedValid = true;\n\n\t\t\treturn (\n\t\t\t\t<Choice\n\t\t\t\t\tkey={key}\n\t\t\t\t\t{...choiceProps}\n\t\t\t\t\tchecked={checked}\n\t\t\t\t\ttype={(multiple) ? 'checkbox' : 'radio'}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\tif (!selectedValid) {\n\t\t\t// TODO: do something when the selected value doesn't exist in the\n\t\t\t// list of choices\n\t\t}\n\t\treturn choicesMap;\n\t}, [choices, props, propSelected, multiple]);\n\n\t// ChoiceElements is an array of elements, so we must wrap it in a fragment.\n\t// eslint-disable-next-line react/jsx-no-useless-fragment\n\treturn <>{ ChoiceElements }</>;\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FieldInfo, FieldFeedback } from '../Field';\nimport { Choice } from './Choice';\nimport { Choices } from './Choices';\nimport { ChoiceFieldProps, ChoiceProps, ChoicesProps } from './types';\nimport { useId } from '../../utilities';\n\ntype ChoiceFieldInterface =\nReact.ForwardRefExoticComponent<ChoiceFieldProps & React.RefAttributes<HTMLFieldSetElement>> & {\n\tChoice: typeof Choice;\n\tChoices: typeof Choices;\n};\n\nexport const ChoiceField = React.forwardRef<HTMLFieldSetElement, ChoiceFieldProps>(({\n\t// options\n\tmultiple,\n\trequired,\n\toptionalIndicator,\n\trequiredIndicator,\n\tname,\n\tfieldName,\n\n\t// anatomy\n\tlabel,\n\tchildren: childrenProp,\n\tdescription,\n\terrors: errorsProp,\n\n\t// classes\n\tbaseName = 'nds-field',\n\tclassName = classNames(baseName, `${baseName}--choice`),\n\tlabelClass,\n\tdescriptionClass,\n\terrorsClass,\n\n\t// ids\n\tid: idProp,\n\tlabelId: labelIdProp,\n\tdescriptionId: descIdProp,\n\terrorsId: errIdProp,\n\n\t// event callbacks\n\tonChange,\n\n\t...fieldsetProps\n}: ChoiceFieldProps, ref) => {\n\tconst [errors, setErrors] = React.useState(errorsProp);\n\n\tconst type = React.useMemo(() => {\n\t\tif (multiple) return 'checkbox';\n\t\treturn 'radio';\n\t}, [multiple]);\n\n\t// treat prop versions of errors and value as source of truth\n\tReact.useEffect(() => setErrors(errorsProp), [errorsProp]);\n\n\tconst uniqueId = useId();\n\tconst id = idProp || uniqueId;\n\tconst labelId = labelIdProp || `${id}-label`;\n\tconst descId = descIdProp || `${id}-desc`;\n\tconst errId = errIdProp || `${id}-err`;\n\n\tconst indicator = React.useMemo(() => {\n\t\tif (requiredIndicator && required) return 'required';\n\t\tif (optionalIndicator && !required) return 'optional';\n\t\treturn null;\n\t}, [requiredIndicator, optionalIndicator, required]);\n\n\tconst childMap = React.useCallback((\n\t\tchildren: React.ReactNode,\n\t): React.ReactNode => {\n\t\t// if it's a `<Choices>` element, use it with our `multiple`\n\t\tif (React.isValidElement<ChoicesProps>(children)) {\n\t\t\treturn React.cloneElement(children, { multiple });\n\t\t}\n\n\t\t// coerce into a list of `<Choice>` elements\n\t\treturn React.Children.map(children, (child) => {\n\t\t\tif (Array.isArray(child)) return childMap(child);\n\t\t\tconst baseProps: ChoiceProps = { name: name || id, type };\n\t\t\tlet value: React.ReactText;\n\t\t\tlet props: ChoiceProps;\n\t\t\tif (typeof child === 'string' || typeof child === 'number') {\n\t\t\t\tvalue = child;\n\t\t\t\tprops = { ...baseProps, children: child };\n\t\t\t} else if (React.isValidElement<ChoiceProps>(child)) {\n\t\t\t\tvalue = (child.props.value || child.props.children || '').toString();\n\t\t\t\tprops = { ...child.props, ...baseProps };\n\t\t\t} else {\n\t\t\t\tthrow new Error('invalid children');\n\t\t\t}\n\t\t\treturn <Choice key={value} {...props} value={value} />;\n\t\t});\n\t}, [multiple, name, id, type]);\n\n\tconst ChoiceElements = React.useMemo(() => childMap(childrenProp), [childrenProp, childMap]);\n\n\treturn (\n\t\t<fieldset\n\t\t\tref={ref}\n\t\t\tclassName={className}\n\t\t\tid={idProp}\n\t\t\tname={fieldName}\n\t\t\tonChange={onChange}\n\t\t\t{...fieldsetProps}\n\t\t>\n\t\t\t<FieldInfo\n\t\t\t\tlabel={label}\n\t\t\t\tlabelClass={labelClass}\n\t\t\t\tlabelId={labelId}\n\t\t\t\tlabelTag=\"legend\"\n\t\t\t\tdescription={description}\n\t\t\t\tdescriptionClass={descriptionClass}\n\t\t\t\tdescriptionId={descId}\n\t\t\t\tindicator={indicator}\n\t\t\t/>\n\t\t\t{ ChoiceElements }\n\t\t\t<FieldFeedback\n\t\t\t\terrors={errors}\n\t\t\t\terrorsId={errId}\n\t\t\t\terrorsClass={errorsClass}\n\t\t\t/>\n\t\t</fieldset>\n\t);\n}) as ChoiceFieldInterface;\n\nChoiceField.Choice = Choice;\nChoiceField.Choices = Choices;\n"],"names":["Choice","React","type","checkedProp","indeterminateProp","optionalIndicator","requiredIndicator","validators","description","thumbnail","errorsProp","children","baseName","className","classNames","controlClass","descriptionClass","inputClass","thumbnailClass","checkedClass","labelClass","errorsClass","idProp","labelIdProp","descIdProp","errorsIdProp","required","value","onChange","onDOMChange","onValidate","inputProps","ref","input","setInput","useForwardedRef","checked","setChecked","indeterminate","setIndeterminate","errors","setErrors","uniqueId","useId","inputId","labelId","descId","errorsId","indicator","Control","jsx","Icon","Thumbnail","Feedback","FieldFeedback","changeHandler","e","validateHandler","isValid","jsxs","BaseInput","FieldInfo","Choices","choices","selected","multiple","props","propSelected","ChoiceElements","choice","i","choiceProps","key","Fragment","ChoiceField","name","fieldName","label","childrenProp","errIdProp","fieldsetProps","id","errId","childMap","child","baseProps"],"mappings":"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"}