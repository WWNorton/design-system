{"version":3,"file":"IconButton-488799a2.js","sources":["../../../../packages/react/src/components/LiveRegion/LiveRegion.tsx","../../../../packages/react/src/components/Button/errors.ts","../../../../packages/react/src/components/Button/Button.tsx","../../../../packages/react/src/components/Button/IconButton.tsx"],"sourcesContent":["import React from 'react';\nimport { createPortal } from 'react-dom';\nimport isEqual from 'react-fast-compare';\nimport { LiveRegionProps } from './types';\n\nconst srOnly: React.CSSProperties = {\n\tposition: 'absolute',\n\twidth: '1px',\n\theight: '1px',\n\tpadding: '0',\n\tmargin: '-1px',\n\toverflow: 'hidden',\n\tclip: 'rect(0, 0, 0, 0)',\n\twhiteSpace: 'nowrap',\n\tborder: '0',\n};\n\nconst defaultProps: LiveRegionProps = {\n\tremoveAfter: 450,\n\tupdateAfter: 50,\n\t'aria-live': 'assertive',\n};\n\n/**\n * Render an ARIA live region as a React Portal. Changing the `children` of this\n * component will result in\n * 1. Render the live region.\n * 2. Wait a moment so that AT can start monitoring it for changes.\n * 3. Update it with a duplicate of the new children to ensure that screen\n * reader users will perceive the change in content.\n * 4. Remove the live region a moment later.\n *\n * Reference:\n * - [MDN - ARIA Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions)\n */\nexport const LiveRegion: React.FunctionComponent<LiveRegionProps> = ({\n\tremoveAfter = defaultProps.removeAfter,\n\tupdateAfter = defaultProps.updateAfter,\n\tvisible,\n\t'aria-atomic': ariaAtomic,\n\t'aria-live': ariaLive = defaultProps['aria-live'],\n\t'aria-relevant': ariaRelevant,\n\tchildren,\n\tclassName,\n\tid,\n\trole,\n}) => {\n\tconst [liveText, setLiveText] = React.useState<React.ReactNode>('');\n\tconst [shouldRender, setShouldRender] = React.useState(false);\n\tconst prevChildren = React.useRef(children);\n\tconst renderTimeout = React.useRef<number>();\n\n\t/** Hide the live region. */\n\tconst hide = (): void => {\n\t\tsetLiveText('');\n\t\tsetShouldRender(false);\n\t};\n\n\t/** Update the live region's contents. */\n\tconst updateContents = React.useCallback((): void => {\n\t\tsetLiveText(children);\n\t\tif (removeAfter) {\n\t\t\trenderTimeout.current = window.setTimeout(hide, removeAfter);\n\t\t}\n\t}, [children, removeAfter]);\n\n\t/** Update the live region's contents after it is rendered. */\n\tReact.useEffect(() => {\n\t\tif (shouldRender) {\n\t\t\twindow.setTimeout(updateContents, updateAfter);\n\t\t}\n\t}, [shouldRender, updateContents, updateAfter]);\n\n\t/** Show the live region any time `children` change. */\n\tReact.useEffect(() => {\n\t\tif (children && prevChildren.current !== children) {\n\t\t\twindow.clearTimeout(renderTimeout.current);\n\t\t\tprevChildren.current = children;\n\t\t\tsetShouldRender(true);\n\t\t}\n\t}, [children]);\n\n\tconst Node = React.useMemo(() => (\n\t\t<div\n\t\t\taria-atomic={ariaAtomic}\n\t\t\taria-live={ariaLive}\n\t\t\taria-relevant={ariaRelevant}\n\t\t\tclassName={className}\n\t\t\tid={id}\n\t\t\trole={role}\n\t\t\tstyle={(visible) ? undefined : srOnly}\n\t\t>\n\t\t\t{ liveText }\n\t\t</div>\n\t), [\n\t\tariaAtomic,\n\t\tariaLive,\n\t\tariaRelevant,\n\t\tclassName,\n\t\tid,\n\t\tliveText,\n\t\trole,\n\t\tvisible,\n\t]);\n\n\tif (typeof document === 'undefined') return null;\n\treturn createPortal((shouldRender) ? Node : null, document.body);\n};\n\nLiveRegion.defaultProps = defaultProps;\n\n/**\n * Monitor an element for content changes. Returns the element's changed content,\n * which should be passed to a `LiveRegion` as `children` to ensure that screen\n * reader users will be notified of the change.\n */\nexport const useContentMonitor = (\n\tel: HTMLElement | null,\n\tchildren: React.ReactNode,\n): React.ReactNode => {\n\tconst [liveText, setLiveText] = React.useState<React.ReactNode>('');\n\tconst prevChildren = React.useRef(children);\n\n\tReact.useEffect(() => {\n\t\tif (el && document.activeElement === el) {\n\t\t\tif (!isEqual(prevChildren.current, children)) {\n\t\t\t\tprevChildren.current = children;\n\t\t\t\tsetLiveText(children);\n\t\t\t}\n\t\t}\n\t}, [children, el]);\n\n\treturn liveText;\n};\n","export const BUTTON_NO_NAME = 'Button components must always have a valid accessible name.'\n\t+ ' This can be provided via children or an ARIA name.'\n\t+ ' See https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/ for more details.';\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useForwardedRef } from '../../utilities';\nimport { BaseButton } from '../BaseButton';\nimport { Icon } from '../Icon';\nimport { Tooltip } from '../Tooltip';\nimport { LiveRegion, useContentMonitor } from '../LiveRegion';\nimport { BUTTON_NO_NAME } from './errors';\nimport { ButtonProps } from './types';\n\n/** A button allows a user to perform an action. */\nexport const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(({\n\tbaseName = 'nds-button',\n\tvariant,\n\ticon,\n\ticonRight,\n\ticonOnly,\n\tcolor,\n\ttooltipProps,\n\ticonClass = `${baseName}__icon`,\n\ttextClass = `${baseName}__text`,\n\tclassName,\n\tchildren,\n\t'aria-label': ariaLabel,\n\t'aria-labelledby': ariaLabelledBy,\n\t...props\n}: ButtonProps, ref) => {\n\tif (!React.Children.count(children) && !ariaLabel && !ariaLabelledBy) {\n\t\tthrow new Error(BUTTON_NO_NAME);\n\t}\n\tconst [button, setButton] = useForwardedRef(ref);\n\tconst liveText = useContentMonitor(button, children);\n\n\tconst BaseIcon = React.useMemo(() => {\n\t\tif (!icon) return null;\n\t\tconst baseProps = {\n\t\t\tclassName: iconClass,\n\t\t};\n\t\tconst iconProps = (typeof icon === 'string')\n\t\t\t? { ...baseProps, variant: icon }\n\t\t\t: { ...baseProps, icon };\n\t\treturn <Icon {...iconProps} />;\n\t}, [icon, iconClass]);\n\n\tconst Children = React.useMemo(() => {\n\t\tif (icon && iconOnly) return null;\n\t\tif (React.isValidElement(children)) return children;\n\t\tconst spanProps = { className: textClass, children };\n\t\treturn <span {...spanProps} />;\n\t}, [children, icon, iconOnly, textClass]);\n\n\tconst classes = classNames(\n\t\t{\n\t\t\t[`${baseName}--solid`]: variant === 'solid',\n\t\t\t[`${baseName}--outline`]: variant === 'outline',\n\t\t\t[`${baseName}--ghost`]: variant === 'ghost',\n\t\t\t[`${baseName}--icon-only`]: icon && iconOnly,\n\t\t\t[`${baseName}--${color}`]: color !== undefined,\n\t\t},\n\t\tbaseName,\n\t\tclassName,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<BaseButton\n\t\t\t\tclassName={classes}\n\t\t\t\tref={setButton}\n\t\t\t\taria-label={ariaLabel}\n\t\t\t\taria-labelledby={ariaLabelledBy}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{ (iconRight) ? null : BaseIcon }\n\t\t\t\t{ Children }\n\t\t\t\t{ (iconRight) ? BaseIcon : null }\n\t\t\t</BaseButton>\n\t\t\t{ iconOnly && (\n\t\t\t\t<Tooltip\n\t\t\t\t\tasLabel\n\t\t\t\t\treference={button}\n\t\t\t\t\t{...tooltipProps}\n\t\t\t\t>\n\t\t\t\t\t{ children }\n\t\t\t\t</Tooltip>\n\t\t\t) }\n\t\t\t<LiveRegion>{ liveText }</LiveRegion>\n\t\t</>\n\t);\n});\n","import React from 'react';\nimport { Button } from './Button';\nimport { IconButtonProps } from './types';\n\n/**\n * Display an icon in a button. By default,`variant` is \"ghost\". Equivalent to\n * `<Button variant=\"ghost\" iconOnly icon=\"...\">...</Button>`.\n */\nexport const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(({\n\tvariant = 'ghost',\n\tchildren,\n\t...props\n}: IconButtonProps, ref) => (\n\t<Button\n\t\ticonOnly\n\t\tvariant={variant}\n\t\tref={ref}\n\t\t{...props}\n\t>\n\t\t{ children }\n\t</Button>\n));\n"],"names":["srOnly","defaultProps","LiveRegion","removeAfter","updateAfter","visible","ariaAtomic","ariaLive","ariaRelevant","children","className","id","role","liveText","setLiveText","React","shouldRender","setShouldRender","prevChildren","renderTimeout","hide","updateContents","Node","jsx","createPortal","useContentMonitor","el","isEqual","BUTTON_NO_NAME","Button","baseName","variant","icon","iconRight","iconOnly","color","tooltipProps","iconClass","textClass","ariaLabel","ariaLabelledBy","props","ref","button","setButton","useForwardedRef","BaseIcon","baseProps","iconProps","Icon","Children","classes","classNames","jsxs","Fragment","BaseButton","Tooltip","IconButton"],"mappings":"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"}