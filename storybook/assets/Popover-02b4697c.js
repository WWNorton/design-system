import{a as T,j as c,c as X}from"./index-a1e85e29.js";import{R as t}from"./index-0cbcd92a.js";import{B as G}from"./IconButton-5d21255e.js";import{P as K}from"./Icon-04f449eb.js";import{b as L,c as Q,d as Y}from"./hook-0eff1646.js";const x=t.forwardRef(({isOpen:n,transition:k="fade",reference:s,arrowElement:E,distance:A,boundary:C,placement:R="top",modifiers:S,strategy:j,onFirstUpdate:$,hideDelay:D=300,showDelay:I,onRequestOpen:b,onRequestClose:u,title:a,hideTitle:r,hideCloseButton:d,actions:f,baseName:o="nds-popover",headerClass:g=`${o}__header`,titleClass:y=`${o}__title`,closeButtonClass:w=`${o}__close`,bodyClass:U=`${o}__body`,actionBarClass:_=`${o}__actions`,arrowClass:F,onClose:q=e=>{e&&s instanceof HTMLElement&&s.focus()},onOpen:V=e=>{e&&e.focus()},children:N,className:M,"aria-labelledby":m,"aria-label":h,...B},O)=>{const[e,W]=L(O),l=Q(),P=t.useRef(!0),i=t.useRef(n),v=t.useCallback(p=>{P.current=p!=="click.external",u&&u(p)},[u]);Y({reference:s,popper:e,trigger:"click",isOpen:n,hideDelay:D,showDelay:I,onRequestClose:v,onRequestOpen:p=>{b&&b(p)}});const z=t.useMemo(()=>(r||!a)&&d?null:T("header",{className:g,children:[!r&&a&&c("div",{className:y,id:l,children:a}),!d&&c(G,{icon:"close",iconOnly:!0,className:w,onClick:()=>v("click.internal"),tooltipProps:{placement:"left"},children:"Close"})]}),[v,w,g,d,r,a,y,l]),H=t.useMemo(()=>f?c("footer",{className:_,children:f}):null,[_,f]);t.useEffect(()=>{!i.current&&n&&e&&(V(e),i.current=!0),i.current&&!n&&(q(P.current),i.current=!1)},[n,q,V,e]);const J=t.useMemo(()=>m?{"aria-labelledby":m}:h?{"aria-label":h}:r?{"aria-label":a}:{"aria-labelledby":l},[h,m,r,a,l]);return N?T(K,{className:X(o,M),"data-no-title":r||!a?"":void 0,role:"dialog","aria-modal":"false",...J,tabIndex:-1,isOpen:n,transition:k,reference:s,arrowElement:E||F,distance:A,boundary:C,placement:R,modifiers:S,strategy:j,onFirstUpdate:$,enableArrow:!0,ref:W,...B,children:[z,c("section",{className:U,children:N}),H]}):null});try{x.displayName="Popover",x.__docgenInfo={description:"A popover is a non-modal dialog that points to a reference element.",displayName:"Popover",props:{title:{defaultValue:null,description:"The name of the Modal dialog. Required for accessibility but can be\nvisually hidden with the `hideTitle` prop.",name:"title",required:!1,type:{name:"string"}},hideTitle:{defaultValue:null,description:`Indicates that the title should be visually hidden. It will still be
accessible to screen reader users.`,name:"hideTitle",required:!1,type:{name:"boolean"}},hideCloseButton:{defaultValue:null,description:`Indicates that the built-in close button in the top right should not be
rendered.`,name:"hideCloseButton",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:`A list of actions or React Fragment that will be set inside an action bar
at the bottom of the Modal dialog.`,name:"actions",required:!1,type:{name:"ReactFragment | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]"}},baseName:{defaultValue:{value:"nds-popover"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},headerClass:{defaultValue:{value:"`${baseName}__header`"},description:"A className for the popover's header. Default will be `${baseName}__header`.",name:"headerClass",required:!1,type:{name:"string"}},titleClass:{defaultValue:{value:"`${baseName}__title`"},description:"A className for the popover's title, which goes inside the header.\nDefault will be `${baseName}__title`.",name:"titleClass",required:!1,type:{name:"string"}},closeButtonClass:{defaultValue:{value:"`${baseName}__close`"},description:"A className for the popover's close button, which goes inside the header.\nDefault will be `${baseName}__close`.",name:"closeButtonClass",required:!1,type:{name:"string"}},bodyClass:{defaultValue:{value:"`${baseName}__body`"},description:"A className for the body of the popover, where the `children` go.\nDefault will be `${baseName}__content`.",name:"bodyClass",required:!1,type:{name:"string"}},actionBarClass:{defaultValue:{value:"`${baseName}__actions`"},description:"A className for the popover's action bar footer. Default will be `${baseName}__actionbar`.",name:"actionBarClass",required:!1,type:{name:"string"}},arrowClass:{defaultValue:null,description:"A className for the popover's arrow. Default will be `${baseName}__arrow`.\n@deprecated - Use `arrowElement`.",name:"arrowClass",required:!1,type:{name:"string"}},onOpen:{defaultValue:{value:`(popper) => {
		if (popper) popper.focus();
	}`},description:`Callback function that is called after the popover opens. The default
function will focus the popover. Use this callback to focus something
else inside the popover.`,name:"onOpen",required:!1,type:{name:"((popoverElement: HTMLElement) => void)"}},onClose:{defaultValue:{value:`(shouldFocusReference) => {
		if (shouldFocusReference && reference instanceof HTMLElement) {
			reference.focus();
		}
	}`},description:`Callback function that is called after the popover closes. The default
function will focus the reference element that opened the popover.`,name:"onClose",required:!1,type:{name:"((shouldFocusReference: boolean) => void)"}},isOpen:{defaultValue:null,description:"Used to control whether the popper is open or closed.",name:"isOpen",required:!1,type:{name:"boolean"}},transition:{defaultValue:{value:"fade"},description:`The animation transition class applied to the popper as it enters or exits.
A single name can be provided and it will be suffixed for each stage.

For example, \`transition="fade"\` applies:

- \`fade-enter\`
- \`fade-enter-active\`
- \`fade-exit\`
- \`fade-exit-active\`
- \`fade-appear\`
- \`fade-appear-active\`

Each individual stage can also be specified independently:

\`\`\`js
transition={{
	appear: 'my-appear',
	appearActive: 'my-appear-active',
	appearDone: 'my-appear-done',
	enter: 'my-enter',
	enterActive: 'my-enter-active',
	enterDone: 'my-enter-done',
	exit: 'my-exit',
	exitActive: 'my-exit-active',
	exitDone: 'my-exit-done'
}}
\`\`\`

Reference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).`,name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames"}},reference:{defaultValue:null,description:"The reference element that the popper will be attached to.\n\n[Popper.js - `createPopper`](https://popper.js.org/docs/v2/constructors/#createpopper)",name:"reference",required:!1,type:{name:"Element | VirtualElement | null"}},arrowElement:{defaultValue:null,description:"The element that should be used for the arrow.\n\nSee the [`arrow` modifier's `element` option](https://popper.js.org/docs/v2/modifiers/arrow/#element)\nfor more details.",name:"arrowElement",required:!1,type:{name:"string | HTMLElement | null"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number"}},boundary:{defaultValue:null,description:"The element or area where the popper will be checked against for overflow.\n\nSee the [`preventOverflow` modifier's `boundary` option](https://popper.js.org/docs/v2/modifiers/prevent-overflow/#boundary)\nfor more details.",name:"boundary",required:!1,type:{name:"Boundary"}},placement:{defaultValue:{value:"top"},description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[]"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void)"}},hideDelay:{defaultValue:{value:"300"},description:"The duration in milliseconds that should elapse before closing, beginning\nafter the pointer exits the reference's bounding box. Only has an effect\nfor the `mouseenter` or `pointerenter` triggers.",name:"hideDelay",required:!1,type:{name:"number"}},showDelay:{defaultValue:null,description:"The duration in milliseconds that should elapse before opening, beginning\nafter `isOpen` is set to `true`.",name:"showDelay",required:!1,type:{name:"number"}},onRequestClose:{defaultValue:null,description:'A callback that occurs when the popper wants to close. The reason it is\nmaking this request is given by the first parameter.\n- `"click.reference"` - the reference element was clicked.\n- `"click.internal"` - something inside the popper was clicked.\n- `"click.external"` - something outside the popper or reference was clicked.\n- `"escape"` - the Escape key was pressed.\n- `"blur"` - the reference element lost focus.\nSee [blur event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event).\n- `"pointerleave"` - a pointer (mouse or touch) left the bounding box of the reference.\nSee [pointerenter event](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event).',name:"onRequestClose",required:!1,type:{name:"((triggeredBy: PopperTriggersClose) => void)"}},onRequestOpen:{defaultValue:null,description:'A callback that occurs when the popper wants to open. The reason it is\nmaking this request is given by the first parameter.\n- `"click.reference"` - the reference element was clicked.\n- `"focus"` - the reference was focused.\nSee [focus event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event).\n- `"focusin"` - the reference is about to be focused.\nSee [focusin event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event).\n- `"pointerenter"` - a pointer (mouse or touch) entered the bounding box of the reference.\nSee [pointerenter event](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event).',name:"onRequestOpen",required:!1,type:{name:"((triggeredBy: PopperTriggersOpen) => void)"}}}}}catch{}export{x as P};
//# sourceMappingURL=Popover-02b4697c.js.map
