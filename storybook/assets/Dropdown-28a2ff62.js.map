{"version":3,"file":"Dropdown-28a2ff62.js","sources":["../../../../packages/react/src/components/Listbox/Option.tsx","../../../../packages/react/src/components/Listbox/Listbox.tsx","../../../../packages/react/src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["import React from 'react';\nimport { Icon } from '../Icon';\nimport { OptionProps } from './types';\n\n/**\n * A a selectable item in a list.\n *\n * Reference:\n * - [HTML - `<option>`](https://html.spec.whatwg.org/multipage/form-elements.html#the-option-element).\n * - [ARIA - `option`](https://w3c.github.io/aria/#option).\n */\nexport const Option = React.forwardRef<HTMLLIElement, OptionProps>(({\n\tdisabled,\n\tlabel,\n\tselected,\n\tmarker,\n\tclassName = 'nds-option',\n\tonClick,\n\tonKeyDown,\n\tchildren,\n\t...props\n}: OptionProps, ref) => {\n\tconst selectedMarker = React.useMemo(() => {\n\t\tif (React.isValidElement(marker)) return marker;\n\t\treturn (\n\t\t\t<span className=\"nds-option__marker\" aria-hidden={!selected}>\n\t\t\t\t<Icon\n\t\t\t\t\tvariant={(marker !== 'dot') ? 'check' : undefined}\n\t\t\t\t\ticon={(marker === 'dot') ? { children: <circle r=\"6\" cx=\"12\" cy=\"12\" /> } : undefined}\n\t\t\t\t\tcolor={(selected) ? 'currentColor' : 'transparent'}\n\t\t\t\t\t// not all screen readers announce aria-selected, so use\n\t\t\t\t\t// the marker to convey the state textually\n\t\t\t\t\taria-label={(selected) ? 'Checked' : undefined}\n\t\t\t\t\tsize=\"0.875em\"\n\t\t\t\t/>\n\t\t\t</span>\n\t\t);\n\t}, [marker, selected]);\n\n\treturn (\n\t\t<li\n\t\t\tref={ref}\n\t\t\tclassName={className}\n\t\t\tonClick={(disabled) ? undefined : onClick}\n\t\t\tonKeyDown={(disabled) ? undefined : onKeyDown}\n\t\t\t{...props}\n\t\t\taria-selected={(selected) ? 'true' : 'false'}\n\t\t\taria-disabled={(disabled) ? 'true' : undefined}\n\t\t\trole=\"option\"\n\t\t>\n\t\t\t{ selectedMarker }\n\t\t\t{ label || children }\n\t\t</li>\n\t);\n});\n","import React from 'react';\nimport {\n\tuseForwardedRef, useRovingTabindex, useSelect, toElements,\n} from '../../utilities';\nimport { Option } from './Option';\nimport { ListboxProps, OptionProps } from './types';\n\n/**\n * A listbox allows the user to select one or more option from a list of options.\n *\n * Reference:\n * - [HTML - `<datalist>`](https://html.spec.whatwg.org/multipage/form-elements.html#the-datalist-element)\n * - [ARIA - `listbox`](https://w3c.github.io/aria/#listbox)\n * - [ARIA Practices - Listbox](https://w3c.github.io/aria-practices/#Listbox)\n */\nexport const Listbox = React.forwardRef<HTMLUListElement, ListboxProps>(({\n\toptions: optionsProp,\n\toptionProps,\n\tmultiselectable,\n\tselected: selectedProp,\n\tonChange,\n\tautofocus,\n\tfocusableIndex,\n\tfocusWrap,\n\tonOptionFocus,\n\tclassName = 'nds-listbox',\n\tchildren: childrenProp,\n\toptionClass = 'nds-option',\n\torientation,\n\t...listboxProps\n}: ListboxProps, ref) => {\n\tconst [listbox, setListbox] = useForwardedRef(ref);\n\tconst [keyboardClick, setKeyboardClick] = React.useState(false);\n\tconst disabledOptions = React.useRef(new Set<number>());\n\n\t/**\n\t * Coerce the `options` or `children` into `ReactElement[]` so that we can map\n\t * them to `Option` components. If it exists, use the `options` prop. If not,\n\t * use the `children` prop.\n\t */\n\tconst options = React.useMemo(() => {\n\t\tlet opts = childrenProp;\n\t\tif (optionsProp) {\n\t\t\tif (Array.isArray(optionsProp)) {\n\t\t\t\topts = optionsProp.map((opt) => {\n\t\t\t\t\tif (typeof opt === 'object') {\n\t\t\t\t\t\tconst missingProps: string[] = [];\n\t\t\t\t\t\tif (!('value' in opt)) missingProps.push('value');\n\t\t\t\t\t\tif (!('label' in opt)) missingProps.push('label');\n\t\t\t\t\t\tif (missingProps.length) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t'The <Listbox> options prop must contain a value and label when an array of objects. '\n\t\t\t\t\t\t\t\t+ `Missing props: ${missingProps.join(',')}.`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn opt;\n\t\t\t\t\t}\n\t\t\t\t\treturn { label: opt.toString(), value: opt };\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\topts = Object.keys(optionsProp).map((label) => ({\n\t\t\t\t\tlabel,\n\t\t\t\t\tvalue: optionsProp[label],\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\treturn toElements<OptionProps>(opts);\n\t}, [optionsProp, childrenProp]);\n\n\tconst selectedOptions = React.useMemo(\n\t\t() => options.filter(({ props }) => props.selected).map(({ props }) => props.value),\n\t\t[options],\n\t);\n\n\tconst { selected: selectedUC, toggle } = useSelect(multiselectable, selectedOptions);\n\tconst selected = (selectedProp !== undefined) ? selectedProp : selectedUC;\n\n\tReact.useEffect(() => {\n\t\tif (!multiselectable && selected.length > 1) {\n\t\t\tthrow new Error(useSelect.SELECT_OVERLOAD);\n\t\t}\n\t}, [multiselectable, selected]);\n\n\tconst keys = React.useMemo(() => {\n\t\tswitch (orientation) {\n\t\t\tcase 'vertical': return { nextKeys: ['ArrowDown'], prevKeys: ['ArrowUp'] };\n\t\t\tcase 'horizontal': return { nextKeys: ['ArrowRight'], prevKeys: ['ArrowLeft'] };\n\t\t\tdefault: return {};\n\t\t}\n\t}, [orientation]);\n\n\tconst {\n\t\tdispatch,\n\t\tcontainerProps: { onKeyDown, onBlur },\n\t\tchildProps: { createRef, tabIndex },\n\t} = useRovingTabindex<HTMLUListElement, HTMLLIElement>({\n\t\tcontainer: listbox,\n\t\tsize: options.length,\n\t\tinitialIndex: focusableIndex,\n\t\twrap: focusWrap,\n\t\tautofocus,\n\t\tdisabledItems: disabledOptions.current,\n\t\t...keys,\n\t});\n\n\tconst Options = React.useMemo(() => (\n\t\toptions.map(({ props }, i) => {\n\t\t\tconst mappedProps = (typeof optionProps === 'function')\n\t\t\t\t? optionProps(i)\n\t\t\t\t: optionProps;\n\n\t\t\tconst {\n\t\t\t\tchildren,\n\t\t\t\tdisabled,\n\t\t\t\tvalue,\n\t\t\t\tlabel = children || value,\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t\tselected: optionSelected,\n\t\t\t\t...optProps\n\t\t\t}: OptionProps = {\n\t\t\t\t...mappedProps,\n\t\t\t\t...props,\n\t\t\t};\n\n\t\t\tif (!value) {\n\t\t\t\tthrow new Error('<Option> elements must provide a value prop.');\n\t\t\t}\n\n\t\t\tif (disabled) {\n\t\t\t\tdisabledOptions.current.add(i);\n\t\t\t} else {\n\t\t\t\tdisabledOptions.current.delete(i);\n\t\t\t}\n\n\t\t\tconst select = () => {\n\t\t\t\tif (onChange) {\n\t\t\t\t\tonChange({\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\tdisabled,\n\t\t\t\t\t\t...optProps,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t}, i);\n\t\t\t\t} else if (!selectedProp) {\n\t\t\t\t\ttoggle(value);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn (\n\t\t\t\t<Option\n\t\t\t\t\tkey={value}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tselected={selected.includes(value)}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tclassName={optionClass}\n\t\t\t\t\ttabIndex={(disabled) ? -1 : tabIndex(i)}\n\t\t\t\t\t/**\n\t\t\t\t\t * - do nothing if disabled\n\t\t\t\t\t * - move focus to the index\n\t\t\t\t\t * - select the option\n\t\t\t\t\t */\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\tif (disabled) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdispatch({ type: 'GOTO', payload: i });\n\t\t\t\t\t\tselect();\n\t\t\t\t\t}}\n\t\t\t\t\t/**\n\t\t\t\t\t * - select on enter\n\t\t\t\t\t * - begin click on space bar\n\t\t\t\t\t */\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === 'Enter') select();\n\t\t\t\t\t\tif (e.key === ' ') {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tsetKeyboardClick(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\t/**\n\t\t\t\t\t * select on space bar up, but only if the space bar\n\t\t\t\t\t * was depressed on this option. this ensures that\n\t\t\t\t\t * clicks with space bar can be cancelled.\n\t\t\t\t\t */\n\t\t\t\t\tonKeyUp={({ key }) => {\n\t\t\t\t\t\tif (key === ' ' && keyboardClick) {\n\t\t\t\t\t\t\tselect();\n\t\t\t\t\t\t\tsetKeyboardClick(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\t/** cancel space bar click */\n\t\t\t\t\tonBlur={() => setKeyboardClick(false)}\n\t\t\t\t\tonFocus={(e) => {\n\t\t\t\t\t\tif (onOptionFocus) onOptionFocus(e, i);\n\t\t\t\t\t}}\n\t\t\t\t\tref={(disabled) ? undefined : createRef(i)}\n\t\t\t\t\t{...optProps}\n\t\t\t\t>\n\t\t\t\t\t{ children }\n\t\t\t\t</Option>\n\t\t\t);\n\t\t})\n\t), [\n\t\tcreateRef, dispatch, keyboardClick, onChange, onOptionFocus,\n\t\toptionProps, options, selected, selectedProp, tabIndex, toggle, optionClass,\n\t]);\n\n\treturn (\n\t\t<ul\n\t\t\tref={setListbox}\n\t\t\tclassName={className}\n\t\t\taria-orientation={orientation}\n\t\t\tonKeyDown={onKeyDown}\n\t\t\tonBlur={onBlur}\n\t\t\t{...listboxProps}\n\t\t\t// role and aria-multiselectable cannot be overridden\n\t\t\trole=\"listbox\"\n\t\t\taria-multiselectable={multiselectable}\n\t\t>\n\t\t\t{ Options }\n\t\t</ul>\n\t);\n});\n","import React, { useCallback } from 'react';\nimport classNames from 'classnames';\nimport { FieldInfo } from '../Field';\nimport { canUseDOM } from '../../utilities/environment';\nimport { useSelect, useLayoutEffect, useId } from '../../utilities';\nimport { Popper } from '../Popper';\nimport { Button } from '../Button';\nimport {\n\tListbox,\n\tListboxProps,\n\tOption,\n\tOptionProps,\n} from '../Listbox';\nimport { DropdownProps } from './types';\n\nexport const Dropdown = ({\n\tlabel,\n\tdescription,\n\tselected: selectedProp = '',\n\tbuttonContents: contentsProp = 'Select',\n\tautofocus = true,\n\tisOpen: isOpenProp = false,\n\tmatchWidth,\n\tbuttonWidth,\n\tsort,\n\tbaseName = 'nds-dropdown',\n\tbuttonClass = `${baseName}__button`,\n\tpopperClass = `${baseName}__popper`,\n\tlistboxClass = `${baseName}__listbox`,\n\tid: idProp,\n\tclassName,\n\tlabelClass,\n\tdescriptionClass,\n\tcloseOnExternalClick = true,\n\tcloseOnDocumentEscape = true,\n\tonRequestClose,\n\tonRequestOpen,\n\tonChange,\n\tonFirstUpdate,\n\tlabelId: labelIdProp,\n\tdescriptionId: descIdProp,\n\tbuttonId: buttonIdProp,\n\tlistboxId: listboxIdProp,\n\tselectedMarker = 'check',\n\tdisabled,\n\tchildren,\n\tplacement = 'bottom-start',\n\tstrategy = 'fixed',\n\ttransition: transitionProp = 'fade',\n\tdistance = 4,\n\tmodifiers,\n}: DropdownProps) => {\n\t/** A compare function that will sort children by value */\n\tconst sorter = React.useMemo(() => {\n\t\tif (!sort) return null;\n\t\treturn (a: OptionProps, b: OptionProps): number => {\n\t\t\tconst valueA = String(a.value).toUpperCase();\n\t\t\tconst valueB = String(b.value).toUpperCase();\n\t\t\tconst mod = sort === 'descending' ? -1 : 1;\n\t\t\tif (valueA < valueB) return -1 * mod;\n\t\t\tif (valueA > valueB) return 1 * mod;\n\t\t\treturn 0;\n\t\t};\n\t}, [sort]);\n\n\tconst options = React.useMemo(() => {\n\t\tconst opts = React.Children.map(children, (child) => {\n\t\t\tlet props: OptionProps;\n\t\t\tif (React.isValidElement<OptionProps>(child)) {\n\t\t\t\tlet value: React.ReactText = '';\n\t\t\t\tif (typeof child.props.value === 'number' || child.props.value !== undefined) {\n\t\t\t\t\tvalue = child.props.value;\n\t\t\t\t} else if (child.props.children) {\n\t\t\t\t\tvalue = child.props.children.toString();\n\t\t\t\t}\n\t\t\t\tprops = { ...child.props, value };\n\t\t\t} else {\n\t\t\t\tprops = { value: child.toString(), children: child };\n\t\t\t}\n\t\t\treturn props;\n\t\t});\n\t\treturn sorter ? opts.sort(sorter) : opts;\n\t}, [children, sorter]);\n\n\tconst findFocusedIndex = useCallback((value: string | number | undefined) => {\n\t\tconst idx = options.findIndex((o) => o.value === value);\n\t\treturn idx === -1 ? 0 : idx;\n\t}, [options]);\n\n\tconst [isOpen, setOpen] = React.useState(isOpenProp);\n\tconst uniqueId = useId();\n\tconst id = idProp || uniqueId;\n\tconst labelId = labelIdProp || `${id}-label`;\n\tconst descId = descIdProp || `${id}-desc`;\n\tconst buttonId = buttonIdProp || `${id}-btn`;\n\tconst [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n\tconst [listbox, setListbox] = React.useState<HTMLUListElement | null>(null);\n\tconst [listboxWidth, setListBoxWidth] = React.useState<number>();\n\tconst [buttonContents, setButtonContents] = React.useState<React.ReactNode>(contentsProp);\n\tconst [shouldReturnFocus, setShouldReturnFocus] = React.useState(false);\n\tconst [transition, setTransition] = React.useState<\n\t\ttypeof transitionProp | undefined\n\t>(transitionProp);\n\tconst [optionFocusIndex, setOptionFocusIndex] = React.useState(findFocusedIndex(selectedProp));\n\tconst { selected, select } = useSelect(false, [selectedProp]);\n\n\tconst listboxId = listboxIdProp || `${id}-listbox`;\n\tconst currentId = `${id}-curr`;\n\tconst getListboxWidth = React.useRef(false);\n\n\t/** Attempt to open the listbox. */\n\tconst openListbox = React.useCallback(() => {\n\t\tif (onRequestOpen) onRequestOpen();\n\t\telse setOpen(true);\n\t}, [onRequestOpen]);\n\n\t/** Attempt to close the listbox. */\n\tconst closeListbox = React.useCallback((): void => {\n\t\tif (onRequestClose) onRequestClose();\n\t\telse setOpen(false);\n\t}, [onRequestClose]);\n\n\t/** Toggle the listbox on button click. */\n\tconst buttonClickHandler = (): void => {\n\t\tif (isOpen) closeListbox();\n\t\telse openListbox();\n\t};\n\n\t/** Open the listbox on arrow up or down. */\n\tconst buttonKeydownHandler = (e: React.KeyboardEvent<HTMLButtonElement>): void => {\n\t\tif (['ArrowDown', 'ArrowUp'].includes(e.key)) {\n\t\t\te.preventDefault();\n\t\t\topenListbox();\n\t\t}\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (selectedProp !== selected[0]) {\n\t\t\tselect(selectedProp);\n\t\t\tsetButtonContents(contentsProp);\n\t\t\tsetOptionFocusIndex(findFocusedIndex(selectedProp));\n\t\t}\n\t// only update if the selected option is being controlled\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [selectedProp]);\n\n\t/** Attempt to close the listbox on document click. */\n\tconst documentClickHandler = React.useCallback(\n\t\t(e: MouseEvent): void => {\n\t\t\tconst path = e.composedPath();\n\t\t\tconst buttonClicked = button && path.includes(button);\n\t\t\tconst listboxClicked = listbox && path.includes(listbox);\n\t\t\tif (closeOnExternalClick && !buttonClicked && !listboxClicked) {\n\t\t\t\tsetShouldReturnFocus(false);\n\t\t\t\tcloseListbox();\n\t\t\t}\n\t\t},\n\t\t[button, listbox, closeOnExternalClick, closeListbox],\n\t);\n\n\t/** Attempt to close the listbox on `Escape` or `Tab`. */\n\tconst documentKeydownHandler = React.useCallback(\n\t\t(e: KeyboardEvent): void => {\n\t\t\tif (!isOpen) return;\n\t\t\tif (closeOnDocumentEscape && e.key === 'Escape') {\n\t\t\t\tsetShouldReturnFocus(true);\n\t\t\t\tcloseListbox();\n\t\t\t}\n\t\t\tif (e.key === 'Tab') {\n\t\t\t\tsetShouldReturnFocus(false);\n\t\t\t\tcloseListbox();\n\t\t\t}\n\t\t},\n\t\t[isOpen, closeListbox, closeOnDocumentEscape],\n\t);\n\n\tconst changeHandler: ListboxProps['onChange'] = (props, index = 0) => {\n\t\tif (onChange) {\n\t\t\tconst { value } = props;\n\t\t\tonChange({ value, contents: props.label });\n\t\t} else {\n\t\t\tselect(props.value);\n\t\t}\n\n\t\tsetButtonContents(props.label);\n\t\tsetShouldReturnFocus(true);\n\t\tsetOptionFocusIndex(index);\n\t\tcloseListbox();\n\t};\n\n\t// close the listbox if the Dropdown is disabled while open\n\tReact.useEffect(() => {\n\t\tif (disabled) {\n\t\t\tsetShouldReturnFocus(true);\n\t\t\tcloseListbox();\n\t\t}\n\t}, [disabled, closeListbox]);\n\n\t// close the listbox if the Dropdown is disabled while open\n\tReact.useEffect(() => {\n\t\tsetOpen(isOpenProp);\n\t}, [isOpenProp]);\n\n\t// focus the button when focus should return to it\n\tReact.useEffect(() => {\n\t\tif (!isOpen && shouldReturnFocus && button !== null) {\n\t\t\tif (canUseDOM && 'requestAnimationFrame' in window) {\n\t\t\t\twindow.requestAnimationFrame(() => button.focus());\n\t\t\t}\n\t\t\tsetShouldReturnFocus(false);\n\t\t}\n\t}, [button, isOpen, shouldReturnFocus]);\n\n\t/**\n\t * [STEP 1] - open the listbox.\n\t * If the button should match the width of the listbox, open the listbox,\n\t * disable any transition, and set the `getListboxWidth` flag. This will\n\t * trigger the layout effect to get the listbox width [STEP 2], and then the\n\t * layout effect to close the listbox [STEP 3].\n\t */\n\tReact.useEffect(() => {\n\t\tif (matchWidth === 'listbox' && listboxWidth === undefined) {\n\t\t\tgetListboxWidth.current = true;\n\t\t\tsetTransition(undefined);\n\t\t\tsetOpen(true);\n\t\t\tif (canUseDOM && 'requestAnimationFrame' in window) {\n\t\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\t\tsetTransition(transitionProp);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [listboxWidth, matchWidth, transitionProp]);\n\n\t/**\n\t * [STEP 2] - get the listbox width.\n\t * Any time the listbox changes, get its width.\n\t */\n\tuseLayoutEffect(() => {\n\t\tif (listbox) {\n\t\t\tsetListBoxWidth(listbox.offsetWidth);\n\t\t}\n\t}, [listbox]);\n\n\t/**\n\t * [STEP 3] - restore state.\n\t * If the `getListboxWidth` flag is set and the listbox width has been defined,\n\t * set the open state to its initial state and disable the flag.\n\t * If `isOpenProp` is `false` (default), this will close the listbox.\n\t * Triggered by the on load effect.\n\t */\n\tuseLayoutEffect(() => {\n\t\tif (typeof listboxWidth === 'number' && getListboxWidth.current) {\n\t\t\tsetOpen(isOpenProp);\n\t\t\tgetListboxWidth.current = false;\n\t\t}\n\t}, [listboxWidth, isOpenProp]);\n\n\t// attach and detach document listeners\n\tuseLayoutEffect(() => {\n\t\tdocument.addEventListener('keydown', documentKeydownHandler);\n\t\tdocument.addEventListener('click', documentClickHandler);\n\n\t\treturn (): void => {\n\t\t\tdocument.removeEventListener('keydown', documentKeydownHandler);\n\t\t\tdocument.removeEventListener('click', documentClickHandler);\n\t\t};\n\t}, [documentKeydownHandler, documentClickHandler]);\n\n\treturn (\n\t\t<div className={classNames(baseName, className)} id={idProp}>\n\t\t\t<FieldInfo\n\t\t\t\tlabel={label}\n\t\t\t\tlabelClass={labelClass}\n\t\t\t\tlabelId={labelId}\n\t\t\t\tdescription={description}\n\t\t\t\tdescriptionClass={descriptionClass}\n\t\t\t\tdescriptionId={descId}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tid={buttonId}\n\t\t\t\tclassName={buttonClass}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tvariant=\"outline\"\n\t\t\t\tstyle={{ width: matchWidth === 'listbox' ? listboxWidth : buttonWidth }}\n\t\t\t\taria-expanded={isOpen ? 'true' : undefined}\n\t\t\t\taria-labelledby={`${labelId} ${currentId}`}\n\t\t\t\taria-haspopup=\"listbox\"\n\t\t\t\taria-controls={isOpen ? listboxId : undefined}\n\t\t\t\tonClick={buttonClickHandler}\n\t\t\t\tonKeyDown={buttonKeydownHandler}\n\t\t\t\tref={setButton}\n\t\t\t\ticon={getListboxWidth.current ? undefined : 'chevron-down'}\n\t\t\t\ticonRight\n\t\t\t>\n\t\t\t\t<span id={currentId}>{buttonContents}</span>\n\t\t\t</Button>\n\t\t\t<Popper\n\t\t\t\tplacement={placement}\n\t\t\t\tclassName={popperClass}\n\t\t\t\treference={button}\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tmodifiers={modifiers}\n\t\t\t\tstrategy={strategy}\n\t\t\t\tdistance={distance}\n\t\t\t\ttransition={transition}\n\t\t\t\tonFirstUpdate={onFirstUpdate}\n\t\t\t\tmatchWidth={matchWidth === 'button'}\n\t\t\t>\n\t\t\t\t<Listbox\n\t\t\t\t\tid={listboxId}\n\t\t\t\t\taria-labelledby={labelId}\n\t\t\t\t\tmultiselectable={false}\n\t\t\t\t\tclassName={listboxClass}\n\t\t\t\t\toptionClass=\"nds-dropdown__option\"\n\t\t\t\t\toptionProps={{ marker: selectedMarker }}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tonChange={changeHandler}\n\t\t\t\t\tfocusableIndex={optionFocusIndex}\n\t\t\t\t\tautofocus={isOpen && autofocus}\n\t\t\t\t\tref={setListbox}\n\t\t\t\t>\n\t\t\t\t\t{options}\n\t\t\t\t</Listbox>\n\t\t\t</Popper>\n\t\t</div>\n\t);\n};\n\nDropdown.Option = Option;\n"],"names":["Option","React","disabled","label","selected","marker","className","onClick","onKeyDown","children","props","ref","selectedMarker","jsx","Icon","jsxs","Listbox","optionsProp","optionProps","multiselectable","selectedProp","onChange","autofocus","focusableIndex","focusWrap","onOptionFocus","childrenProp","optionClass","orientation","listboxProps","listbox","setListbox","useForwardedRef","keyboardClick","setKeyboardClick","disabledOptions","options","opts","opt","missingProps","toElements","selectedOptions","selectedUC","toggle","useSelect","keys","dispatch","onBlur","createRef","tabIndex","useRovingTabindex","Options","i","mappedProps","value","optionSelected","optProps","select","e","key","Dropdown","description","contentsProp","isOpenProp","matchWidth","buttonWidth","sort","baseName","buttonClass","popperClass","listboxClass","idProp","labelClass","descriptionClass","closeOnExternalClick","closeOnDocumentEscape","onRequestClose","onRequestOpen","onFirstUpdate","labelIdProp","descIdProp","buttonIdProp","listboxIdProp","placement","strategy","transitionProp","distance","modifiers","sorter","a","b","valueA","valueB","mod","child","findFocusedIndex","useCallback","idx","o","isOpen","setOpen","uniqueId","useId","id","labelId","descId","buttonId","button","setButton","listboxWidth","setListBoxWidth","buttonContents","setButtonContents","shouldReturnFocus","setShouldReturnFocus","transition","setTransition","optionFocusIndex","setOptionFocusIndex","listboxId","currentId","getListboxWidth","openListbox","closeListbox","buttonClickHandler","buttonKeydownHandler","documentClickHandler","path","buttonClicked","listboxClicked","documentKeydownHandler","changeHandler","index","canUseDOM","useLayoutEffect","classNames","FieldInfo","Button","Popper"],"mappings":"2UAWO,MAAAA,EAAAC,EAAA,WAAA,CAAA,CAA6D,SAAAC,EACnE,MAAAC,EACA,SAAAC,EACA,OAAAC,EACA,UAAAC,EAAA,aACY,QAAAC,EACZ,UAAAC,EACA,SAAAC,EACA,GAAAC,CAED,EAAAC,IAAA,CACC,MAAAC,EAAAX,EAAA,QAAA,IACCA,EAAA,eAAAI,CAAA,EAAkCA,EAClCQ,EAAA,OAAA,CAAA,UAAA,qBAAA,cAAA,CAAAT,EAAA,SAAAS,EAEEC,GAAC,CAAA,QAAAT,IAAA,MAAA,QAAA,OACwC,KAAAA,IAAA,MAAA,CAAA,SAAAQ,EAAA,SAAA,CAAA,EAAA,IAAA,GAAA,KAAA,GAAA,IAAA,CAAA,CAAA,EAAA,OACoC,MAAAT,EAAA,eAAA,cACvC,aAAAA,EAAA,UAAA,OAGA,KAAA,SAChC,CAAA,CAAA,CAAA,EAEP,CAAAC,EAAAD,CAAA,CAAA,EAIF,OAAAW,GACC,KAAC,CAAA,IAAAJ,EACA,UAAAL,EACA,QAAAJ,EAAA,OAAAK,EACkC,UAAAL,EAAA,OAAAM,EACE,GAAAE,EAChC,gBAAAN,EAAA,OAAA,QACiC,gBAAAF,EAAA,OAAA,OACA,KAAA,SAChC,SAAA,CAEHU,EAAAT,GAAAM,CACS,CAAA,CAAA,CAGd,CAAA,wzCCvCO,MAAAO,GAAAf,EAAA,WAAA,CAAA,CAAkE,QAAAgB,EAC/D,YAAAC,EACT,gBAAAC,EACA,SAAAC,EACU,SAAAC,EACV,UAAAC,EACA,eAAAC,EACA,UAAAC,EACA,cAAAC,EACA,UAAAnB,EAAA,cACY,SAAAoB,EACF,YAAAC,EAAA,aACI,YAAAC,EACd,GAAAC,CAED,EAAAlB,IAAA,CACC,KAAA,CAAAmB,EAAAC,CAAA,EAAAC,GAAArB,CAAA,EACA,CAAAsB,EAAAC,CAAA,EAAAjC,EAAA,SAAA,EAAA,EACAkC,EAAAlC,EAAA,OAAA,IAAA,GAAA,EAOAmC,EAAAnC,EAAA,QAAA,IAAA,CACC,IAAAoC,EAAAX,EACA,OAAAT,IACC,MAAA,QAAAA,CAAA,EACCoB,EAAApB,EAAA,IAAAqB,GAAA,CACC,GAAA,OAAAA,GAAA,SAAA,CACC,MAAAC,EAAA,CAAA,EAGA,GAFA,UAAAD,GAAuBC,EAAA,KAAA,OAAA,EACvB,UAAAD,GAAuBC,EAAA,KAAA,OAAA,EACvBA,EAAA,OACC,MAAA,IAAA,MAAU,sGAAAA,EAAA,KAAA,GAAA,CAAA,GAEiC,EAG5C,OAAAD,CAAO,CAER,MAAA,CAAA,MAAAA,EAAA,SAAA,EAAA,MAAAA,EAA2C,CAAA,EAG5CD,EAAA,OAAA,KAAApB,CAAA,EAAA,IAAAd,IAAA,CAAgD,MAAAA,EAC/C,MAAAc,EAAAd,CAAA,CACwB,EAAA,GAI3BqC,GAAAH,CAAA,CAAmC,EAAA,CAAApB,EAAAS,CAAA,CAAA,EAGpCe,EAAAxC,EAAA,QAA8B,IAAAmC,EAAA,OAAA,CAAA,CAAA,MAAA1B,CAAA,IAAAA,EAAA,QAAA,EAAA,IAAA,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,KAAA,EACqD,CAAA0B,CAAA,CAC1E,EAGT,CAAA,SAAAM,EAAA,OAAAC,CAAA,EAAAC,GAAAzB,EAAAsB,CAAA,EACArC,EAAAgB,IAAA,OAAAA,EAAAsB,EAEAzC,EAAA,UAAA,IAAA,CACC,GAAA,CAAAkB,GAAAf,EAAA,OAAA,EACC,MAAA,IAAA,MAAAwC,GAAA,eAAA,CACD,EAAA,CAAAzB,EAAAf,CAAA,CAAA,EAGD,MAAAyC,EAAA5C,EAAA,QAAA,IAAA,CACC,OAAA2B,EAAA,CAAqB,IAAA,WACH,MAAA,CAAA,SAAA,CAAA,WAAA,EAAA,SAAA,CAAA,SAAA,GAAwD,IAAA,aACtD,MAAA,CAAA,SAAA,CAAA,YAAA,EAAA,SAAA,CAAA,WAAA,GAA2D,QACrE,MAAA,EAAQ,CAClB,EAAA,CAAAA,CAAA,CAAA,EAGD,CAAM,SAAAkB,EACL,eAAA,CAAA,UAAAtC,GAAA,OAAAuC,CAAA,EACoC,WAAA,CAAA,UAAAC,EAAA,SAAAC,CAAA,CACF,EAAAC,GAAA,CACoB,UAAApB,EAC3C,KAAAM,EAAA,OACG,aAAAb,EACA,KAAAC,EACR,UAAAF,EACN,cAAAa,EAAA,QAC+B,GAAAU,CAC5B,CAAA,EAGJM,GAAAlD,EAAA,QAAA,IAAAmC,EAAA,IAAA,CAAA,CAAA,MAAA1B,CAAA,EAAA0C,IAAA,CAEE,MAAAC,EAAA,OAAAnC,GAAA,WAAAA,EAAAkC,CAAA,EAAAlC,EAIA,CAAM,SAAAT,EACL,SAAAP,EACA,MAAAoD,EACA,MAAAnD,EAAAM,GAAA6C,EACoB,SAAAC,EAEV,GAAAC,CACP,EAAA,CACa,GAAAH,EACb,GAAA3C,CACA,EAGJ,GAAA,CAAA4C,EACC,MAAA,IAAA,MAAA,8CAAA,EAGDpD,EACCiC,EAAA,QAAA,IAAAiB,CAAA,EAEAjB,EAAA,QAAA,OAAAiB,CAAA,EAGD,MAAAK,EAAA,IAAA,CACCpC,EACCA,EAAA,CAAS,SAAAZ,EACR,SAAAP,EACA,GAAAsD,EACG,MAAAF,EACH,MAAAnD,CACA,EAAAiD,CAAA,EACGhC,GAEJuB,EAAAW,CAAA,CACD,EAGD,OAAAzC,EACCb,EAAC,CAAA,MAAAsD,EAEA,MAAAnD,EACA,SAAAC,EAAA,SAAAkD,CAAA,EACiC,SAAApD,EACjC,UAAAyB,EACW,SAAAzB,EAAA,GAAA+C,EAAAG,CAAA,EAC2B,QAAAM,GAAA,CAOrC,GAAAxD,EAAA,CACCwD,EAAA,eAAA,EACA,MAAA,CAEDZ,EAAA,CAAA,KAAA,OAAA,QAAAM,CAAA,CAAA,EACAK,GAAO,EACR,UAAAC,GAAA,CAMCA,EAAA,MAAA,SAAuBD,IACvBC,EAAA,MAAA,MACCA,EAAA,eAAA,EACAxB,EAAA,EAAA,EACD,EACD,QAAA,CAAA,CAAA,IAAAyB,KAAA,CAOCA,IAAA,KAAA1B,IACCwB,IACAvB,EAAA,EAAA,EACD,EACD,OAAA,IAAAA,EAAA,EAAA,EAEoC,QAAAwB,GAAA,CAEnCjC,GAAmBA,EAAAiC,EAAAN,CAAA,CAAkB,EACtC,IAAAlD,EAAA,OAAA8C,EAAAI,CAAA,EACyC,GAAAI,EACrC,SAAA/C,CAEF,EAAA6C,CAlDG,CAmDN,CAAA,EAAA,CAGAN,EACFF,EAAWb,EAAUZ,EAAeI,EAAUP,EAC9CkB,EAAahC,EAASgB,EAAU6B,EAAcN,EAAUhB,CAAQ,CAAA,EAGjE,OAAAd,EACC,KAAC,CAAA,IAAAkB,EACK,UAAAzB,EACL,mBAAAsB,EACkB,UAAApB,GAClB,OAAAuC,EACA,GAAAlB,EACI,KAAA,UAEC,uBAAAV,EACiB,SAAAgC,EAEpB,CAAA,CAGL,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;i9CCjNO,MAAAS,GAAA,CAAA,CAAkB,MAAAzD,EACxB,YAAA0D,EACA,SAAAzC,EAAA,GACyB,eAAA0C,EAAA,SACM,UAAAxC,EAAA,GACnB,OAAAyC,EAAA,GACS,WAAAC,EACrB,YAAAC,EACA,KAAAC,EACA,SAAAC,EAAA,eACW,YAAAC,EAAA,GAAAD,CAAA,WACc,YAAAE,EAAA,GAAAF,CAAA,WACA,aAAAG,EAAA,GAAAH,CAAA,YACC,GAAAI,EACtB,UAAAjE,EACJ,WAAAkE,EACA,iBAAAC,EACA,qBAAAC,EAAA,GACuB,sBAAAC,EAAA,GACC,eAAAC,EACxB,cAAAC,EACA,SAAAxD,EACA,cAAAyD,EACA,QAAAC,EACS,cAAAC,EACM,SAAAC,EACL,UAAAC,EACC,eAAAtE,GAAA,QACM,SAAAV,EACjB,SAAAO,EACA,UAAA0E,EAAA,eACY,SAAAC,GAAA,QACD,WAAAC,EAAA,OACkB,SAAAC,EAAA,EAClB,UAAAC,CAEZ,IAAA,CAEC,MAAAC,EAAAvF,EAAA,QAAA,IACCiE,EACA,CAAAuB,EAAAC,IAAA,CACC,MAAAC,EAAA,OAAAF,EAAA,KAAA,EAAA,YAAA,EACAG,EAAA,OAAAF,EAAA,KAAA,EAAA,YAAA,EACAG,GAAA3B,IAAA,aAAA,GAAA,EACA,OAAAyB,EAAAC,EAAqB,GAAAC,GACrBF,EAAAC,EAAqB,EAAAC,GACrB,CAAO,EAPG,KAQX,CAAA3B,CAAA,CAAA,EAGD9B,EAAAnC,EAAA,QAAA,IAAA,CACC,MAAAoC,EAAApC,EAAA,SAAA,IAAAQ,EAAAqF,GAAA,CACC,IAAApF,EACA,GAAAT,EAAA,eAAA6F,CAAA,EAAA,CACC,IAAAxC,EAAA,GACA,OAAAwC,EAAA,MAAA,OAAA,UAAAA,EAAA,MAAA,QAAA,OACCxC,EAAAwC,EAAA,MAAA,MAAoBA,EAAA,MAAA,WAEpBxC,EAAAwC,EAAA,MAAA,SAAA,SAAA,GAEDpF,EAAA,CAAA,GAAAoF,EAAA,MAAA,MAAAxC,CAAA,CAAgC,MAEhC5C,EAAA,CAAA,MAAAoF,EAAA,SAAA,EAAA,SAAAA,GAED,OAAApF,CAAO,CAAA,EAER,OAAA8E,EAAAnD,EAAA,KAAAmD,CAAA,EAAAnD,CAAoC,EAAA,CAAA5B,EAAA+E,CAAA,CAAA,EAGrCO,EAAAC,eAAA1C,GAAA,CACC,MAAA2C,EAAA7D,EAAA,UAAA8D,GAAAA,EAAA,QAAA5C,CAAA,EACA,OAAA2C,IAAA,GAAA,EAAAA,CAAwB,EAAA,CAAA7D,CAAA,CAAA,EAGzB,CAAA+D,EAAAC,CAAA,EAAAnG,EAAA,SAAA8D,CAAA,EACAsC,EAAAC,KACAC,EAAAhC,GAAA8B,EACAG,EAAAzB,GAAA,GAAAwB,CAAA,SACAE,GAAAzB,GAAA,GAAAuB,CAAA,QACAG,GAAAzB,GAAA,GAAAsB,CAAA,OACA,CAAAI,EAAAC,EAAA,EAAA3G,EAAA,SAAA,IAAA,EACA,CAAA6B,EAAAC,EAAA,EAAA9B,EAAA,SAAA,IAAA,EACA,CAAA4G,EAAAC,EAAA,EAAA7G,EAAA,SAAA,EACA,CAAA8G,GAAAC,EAAA,EAAA/G,EAAA,SAAA6D,CAAA,EACA,CAAAmD,GAAAC,CAAA,EAAAjH,EAAA,SAAA,EAAA,EACA,CAAAkH,GAAAC,EAAA,EAAAnH,EAAA,SAAAoF,CAAA,EAGA,CAAAgC,GAAAC,EAAA,EAAArH,EAAA,SAAA8F,EAAA3E,CAAA,CAAA,EACA,CAAA,SAAAhB,GAAA,OAAAqD,EAAA,EAAAb,GAAA,GAAA,CAAAxB,CAAA,CAAA,EAEAmG,GAAArC,GAAA,GAAAqB,CAAA,WACAiB,GAAA,GAAAjB,CAAA,QACAkB,EAAAxH,EAAA,OAAA,EAAA,EAGAyH,GAAAzH,EAAA,YAAA,IAAA,CACC4E,EAAmBA,IACduB,EAAA,EAAA,CAAY,EAAA,CAAAvB,CAAA,CAAA,EAIlB8C,EAAA1H,EAAA,YAAA,IAAA,CACC2E,EAAoBA,IACfwB,EAAA,EAAA,CAAa,EAAA,CAAAxB,CAAA,CAAA,EAInBgD,GAAA,IAAA,CACCzB,EAAYwB,IACPD,IAAY,EAIlBG,GAAAnE,GAAA,CACC,CAAA,YAAA,SAAA,EAAA,SAAAA,EAAA,GAAA,IACCA,EAAA,eAAA,EACAgE,KACD,EAGDzH,EAAA,UAAA,IAAA,CACCmB,IAAAhB,GAAA,CAAA,IACCqD,GAAArC,CAAA,EACA4F,GAAAlD,CAAA,EACAwD,GAAAvB,EAAA3E,CAAA,CAAA,EACD,EAAA,CAAAA,CAAA,CAAA,EAMD,MAAA0G,GAAA7H,EAAA,YAAmCyD,GAAA,CAEjC,MAAAqE,EAAArE,EAAA,eACAsE,EAAArB,GAAAoB,EAAA,SAAApB,CAAA,EACAsB,EAAAnG,GAAAiG,EAAA,SAAAjG,CAAA,EACA4C,GAAA,CAAAsD,GAAA,CAAAC,IACCf,EAAA,EAAA,EACAS,IACD,EACD,CAAAhB,EAAA7E,EAAA4C,EAAAiD,CAAA,CACoD,EAIrDO,GAAAjI,EAAA,YAAqCyD,GAAA,CAEnCyC,IACAxB,GAAAjB,EAAA,MAAA,WACCwD,EAAA,EAAA,EACAS,KAEDjE,EAAA,MAAA,QACCwD,EAAA,EAAA,EACAS,KACD,EACD,CAAAxB,EAAAwB,EAAAhD,CAAA,CAC4C,EAG7CwD,GAAA,CAAAzH,EAAA0H,EAAA,IAAA,CACC,GAAA/G,EAAA,CACC,KAAA,CAAA,MAAAiC,CAAA,EAAA5C,EACAW,EAAA,CAAA,MAAAiC,EAAA,SAAA5C,EAAA,KAAA,CAAA,CAAyC,MAEzC+C,GAAA/C,EAAA,KAAA,EAGDsG,GAAAtG,EAAA,KAAA,EACAwG,EAAA,EAAA,EACAI,GAAAc,CAAA,EACAT,GAAa,EAId,OAAA1H,EAAA,UAAA,IAAA,CACCC,IACCgH,EAAA,EAAA,EACAS,IACD,EAAA,CAAAzH,EAAAyH,CAAA,CAAA,EAID1H,EAAA,UAAA,IAAA,CACCmG,EAAArC,CAAA,CAAkB,EAAA,CAAAA,CAAA,CAAA,EAInB9D,EAAA,UAAA,IAAA,CACC,CAAAkG,GAAAc,IAAAN,IAAA,OACC0B,IAAA,0BAAA,QACC,OAAA,sBAAA,IAAA1B,EAAA,MAAA,CAAA,EAEDO,EAAA,EAAA,EACD,EAAA,CAAAP,EAAAR,EAAAc,EAAA,CAAA,EAUDhH,EAAA,UAAA,IAAA,CACC+D,IAAA,WAAA6C,IAAA,SACCY,EAAA,QAAA,GACAL,GAAA,MAAA,EACAhB,EAAA,EAAA,EACAiC,IAAA,0BAAA,QACC,OAAA,sBAAA,IAAA,CACCjB,GAAA/B,CAAA,CAA4B,CAAA,EAG/B,EAAA,CAAAwB,EAAA7C,EAAAqB,CAAA,CAAA,EAODiD,GAAA,IAAA,CACCxG,GACCgF,GAAAhF,EAAA,WAAA,CACD,EAAA,CAAAA,CAAA,CAAA,EAUDwG,GAAA,IAAA,CACC,OAAAzB,GAAA,UAAAY,EAAA,UACCrB,EAAArC,CAAA,EACA0D,EAAA,QAAA,GACD,EAAA,CAAAZ,EAAA9C,CAAA,CAAA,EAIDuE,GAAA,KACC,SAAA,iBAAA,UAAAJ,EAAA,EACA,SAAA,iBAAA,QAAAJ,EAAA,EAEA,IAAA,CACC,SAAA,oBAAA,UAAAI,EAAA,EACA,SAAA,oBAAA,QAAAJ,EAAA,CAA0D,GAC3D,CAAAI,GAAAJ,EAAA,CAAA,EAGD/G,GAAA,MAAA,CAAA,UAAAwH,GAAApE,EAAA7D,CAAA,EAAA,GAAAiE,EAAA,SAAA,CAEE1D,EAAA2H,GAAC,CAAA,MAAArI,EACA,WAAAqE,EACA,QAAAgC,EACA,YAAA3C,EACA,iBAAAY,EACA,cAAAgC,EACe,CAAA,EAChB5F,EACA4H,GAAC,CAAA,GAAA/B,GACI,UAAAtC,EACO,SAAAlE,EACX,QAAA,UACQ,MAAA,CAAA,MAAA8D,IAAA,UAAA6C,EAAA5C,CAAA,EAC8D,gBAAAkC,EAAA,OAAA,OACrC,kBAAA,GAAAK,CAAA,IAAAgB,EAAA,GACO,gBAAA,UAC1B,gBAAArB,EAAAoB,GAAA,OACsB,QAAAK,GAC3B,UAAAC,GACE,IAAAjB,GACN,KAAAa,EAAA,QAAA,OAAA,eACuC,UAAA,GACnC,SAAA5G,EAAA,OAAA,CAAA,GAAA2G,GAAA,SAAAT,GAAA,CAE4B,CAAA,EACtClG,EACA6H,GAAC,CAAA,UAAAvD,EACA,UAAAd,EACW,UAAAsC,EACA,OAAAR,EACX,UAAAZ,EACA,SAAAH,GACA,SAAAE,EACA,WAAA6B,GACA,cAAArC,EACA,WAAAd,IAAA,SAC2B,SAAAnD,EAE3BG,GAAC,CAAA,GAAAuG,GACI,kBAAAf,EACa,gBAAA,GACA,UAAAlC,EACN,YAAA,uBACC,YAAA,CAAA,OAAA1D,EAAA,EAC0B,SAAAR,GACtC,SAAA+H,GACU,eAAAd,GACM,UAAAlB,GAAA7E,EACK,IAAAS,GAChB,SAAAK,CAEJ,CAAA,CACF,CAAA,CACD,CAAA,CAAA,CAGH,EAEAwB,GAAA,OAAA5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}