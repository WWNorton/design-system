import{j as o,a as Q,c as A,F as se}from"./index-a1e85e29.js";import{R as e}from"./index-0cbcd92a.js";import{a as X,F as Z}from"./FieldInfo-942aaa1a.js";import{B as oe}from"./BaseInput-0353def3.js";import{I as de}from"./Icon-04f449eb.js";import{b as ce,c as P}from"./hook-0eff1646.js";const k=e.forwardRef(({type:t="radio",checked:i=!1,indeterminate:d,optionalIndicator:c,requiredIndicator:h,validators:y,description:I,thumbnail:s,errors:m,children:l,baseName:n="nds-field",className:C=A(`${n}__group`,`${n}__group--choice`),controlClass:f=A(`${n}__control`,`${n}__control--${t}`),descriptionClass:D,inputClass:$=A(`${n}__input`,`${n}__input--${t}`),thumbnailClass:q=`${n}__thumbnail`,checkedClass:S=`${n}--checked`,labelClass:F,errorsClass:x,id:L,labelId:H,descriptionId:U,errorsId:z,required:g,value:V,onChange:O,onDOMChange:p,onValidate:R,...W},B)=>{const[_,w]=ce(B),[T,b]=e.useState(i),[a,N]=e.useState(d),[r,v]=e.useState(m),ee=P(),u=L||ee,G=H||`${u}-label`,J=U||`${u}-desc`,j=z||`${u}-err`;e.useEffect(()=>v(m),[m]),e.useEffect(()=>b(i),[i]),e.useEffect(()=>N(d),[d]);const te=e.useMemo(()=>h&&g?"required":c&&!g?"optional":null,[h,c,g]),ae=e.useMemo(()=>o("label",{className:f,htmlFor:u,"aria-hidden":"true",children:t==="checkbox"&&o(de,{variant:a?"minus":"check",stroke:"currentColor"})}),[f,a,u,t]),ne=e.useMemo(()=>s?o("label",{className:q,htmlFor:u,role:"none",children:s}):null,[u,s,q]),le=e.useMemo(()=>t!=="checkbox"||!r||r.length===0?null:o(X,{errors:r,errorsClass:x,errorsId:j}),[t,r,x,j]),ie=M=>{O?O(M):(b(M.currentTarget.checked),N(!1))},re=M=>{R&&R(M),m||v(M)},K=e.useMemo(()=>!r||r.length===0,[r]);return e.useEffect(()=>{_&&t==="checkbox"&&a!==void 0&&(_.indeterminate=a)},[_,t,a]),Q("div",{className:A(C,{[S]:T}),children:[o(oe,{type:t,checked:T,ref:w,id:u,className:$,errors:r,validators:y,"aria-labelledby":G,"aria-describedby":I?J:void 0,"aria-invalid":!K,"aria-errormessage":K?void 0:j,onChange:ie,onDOMChange:p,onValidate:re,required:g,value:V,...W}),ae,ne,o(Z,{indicator:te,htmlFor:u,label:l||V,labelClass:F,labelId:G,description:I,descriptionClass:D,descriptionId:J,children:le})]})});try{k.displayName="Choice",k.__docgenInfo={description:'A choice can either allow for multiple simultaneous choices (`type="checkbox"`)\nor an a single choice (`type="radio"`). You can also use the `Checkbox` or\n`Radio` components directly, as they wrap this component.',displayName:"Choice",props:{type:{defaultValue:{value:"radio"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"checkbox"'},{value:'"radio"'}]}},indeterminate:{defaultValue:null,description:'Mark the checkbox as indeterminate. Has no effect when `type="radio"`.\n\nReference:\n- [DOM - `indeterminate`](https://html.spec.whatwg.org/multipage/input.html#dom-input-indeterminate)\n- [MDN - `indeterminate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes)',name:"indeterminate",required:!1,type:{name:"boolean"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean"}},thumbnail:{defaultValue:null,description:"The thumbnail element.",name:"thumbnail",required:!1,type:{name:"ReactNode"}},baseName:{defaultValue:{value:"nds-field"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},controlClass:{defaultValue:{value:"classNames(`${baseName}__control`, `${baseName}__control--${type}`)"},description:"The className for the control that sighted users will see.",name:"controlClass",required:!1,type:{name:"string"}},inputClass:{defaultValue:{value:"classNames(`${baseName}__input`, `${baseName}__input--${type}`)"},description:"The className for the Checkbox's `<input>` element.",name:"inputClass",required:!1,type:{name:"string"}},thumbnailClass:{defaultValue:{value:"`${baseName}__thumbnail`"},description:"The className for the Checkbox's thumbnail element.",name:"thumbnailClass",required:!1,type:{name:"string"}},checkedClass:{defaultValue:{value:"`${baseName}--checked`"},description:`A className that will be applied to the root of the component when it is
checked.`,name:"checkedClass",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:`A list of error strings. If provided, this will be set as an unordered
list in the first child slot.`,name:"errors",required:!1,type:{name:"string[]"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string"}},validators:{defaultValue:null,description:`A list of validators. A validator contains a function that tests the value
for validity and a corresponding message that conveys why the test failed.`,name:"validators",required:!1,type:{name:"ValidatorEntry[]"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"((e: Event) => void)"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"((errors: string[]) => void)"}}}}}catch{}const Y=({choices:t,selected:i,multiple:d,...c})=>{const h=e.useMemo(()=>Array.isArray(i)?i:i!==void 0?[i]:[],[i]),y=e.useMemo(()=>t.map((s,m)=>{let l,n;typeof s=="object"?(l=(s.value||s.children||"").toString(),n={...s,...c,value:l}):(l=s,n={value:l,children:l,...c});const C=l!==void 0?l.toString():`choice-${m}`,f=h.includes(l);return o(k,{...n,checked:f,type:d?"checkbox":"radio"},C)}),[t,c,h,d]);return o(se,{children:y})};try{Y.displayName="Choices",Y.__docgenInfo={description:`Convert a list of choice values or choice props into a memoized array of
Choice elements.`,displayName:"Choices",props:{choices:{defaultValue:null,description:"",name:"choices",required:!0,type:{name:"(ReactText | ChoiceProps)[]"}},selected:{defaultValue:null,description:"",name:"selected",required:!1,type:{name:"ReactText | ReactText[]"}},type:{defaultValue:null,description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"checkbox"'},{value:'"radio"'}]}},indeterminate:{defaultValue:null,description:'Mark the checkbox as indeterminate. Has no effect when `type="radio"`.\n\nReference:\n- [DOM - `indeterminate`](https://html.spec.whatwg.org/multipage/input.html#dom-input-indeterminate)\n- [MDN - `indeterminate`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes)',name:"indeterminate",required:!1,type:{name:"boolean"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean"}},thumbnail:{defaultValue:null,description:"The thumbnail element.",name:"thumbnail",required:!1,type:{name:"ReactNode"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},controlClass:{defaultValue:null,description:"The className for the control that sighted users will see.",name:"controlClass",required:!1,type:{name:"string"}},inputClass:{defaultValue:null,description:"The className for the Checkbox's `<input>` element.",name:"inputClass",required:!1,type:{name:"string"}},thumbnailClass:{defaultValue:null,description:"The className for the Checkbox's thumbnail element.",name:"thumbnailClass",required:!1,type:{name:"string"}},checkedClass:{defaultValue:null,description:`A className that will be applied to the root of the component when it is
checked.`,name:"checkedClass",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:`A list of error strings. If provided, this will be set as an unordered
list in the first child slot.`,name:"errors",required:!1,type:{name:"string[]"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string"}},validators:{defaultValue:null,description:`A list of validators. A validator contains a function that tests the value
for validity and a corresponding message that conveys why the test failed.`,name:"validators",required:!1,type:{name:"ValidatorEntry[]"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"((e: Event) => void)"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"((errors: string[]) => void)"}}}}}catch{}const E=e.forwardRef(({multiple:t,required:i,optionalIndicator:d,requiredIndicator:c,name:h,fieldName:y,label:I,children:s,description:m,errors:l,baseName:n="nds-field",className:C=A(n,`${n}--choice`),labelClass:f,descriptionClass:D,errorsClass:$,id:q,labelId:S,descriptionId:F,errorsId:x,onChange:L,...H},U)=>{const[z,g]=e.useState(l),V=e.useMemo(()=>t?"checkbox":"radio",[t]);e.useEffect(()=>g(l),[l]);const O=P(),p=q||O,R=S||`${p}-label`,W=F||`${p}-desc`,B=x||`${p}-err`,_=e.useMemo(()=>c&&i?"required":d&&!i?"optional":null,[c,d,i]),w=e.useCallback(b=>e.isValidElement(b)?e.cloneElement(b,{multiple:t}):e.Children.map(b,a=>{if(Array.isArray(a))return w(a);const N={name:h||p,type:V};let r,v;if(typeof a=="string"||typeof a=="number")r=a,v={...N,children:a};else if(e.isValidElement(a))r=(a.props.value||a.props.children||"").toString(),v={...a.props,...N};else throw new Error("invalid children");return o(k,{...v,value:r},r)}),[t,h,p,V]),T=e.useMemo(()=>w(s),[s,w]);return Q("fieldset",{ref:U,className:C,id:q,name:y,onChange:L,...H,children:[o(Z,{label:I,labelClass:f,labelId:R,labelTag:"legend",description:m,descriptionClass:D,descriptionId:W,indicator:_}),T,o(X,{errors:z,errorsId:B,errorsClass:$})]})});E.Choice=k;E.Choices=Y;try{E.displayName="ChoiceField",E.__docgenInfo={description:"",displayName:"ChoiceField",props:{label:{defaultValue:null,description:`Text that conveys how the choices are related and prompts the user to choose
one or more choice.`,name:"label",required:!0,type:{name:"ReactNode"}},multiple:{defaultValue:null,description:"Whether the field is multi-select or single-select.",name:"multiple",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"The name that will be assigned to all child `<input>` elements.",name:"name",required:!1,type:{name:"string"}},fieldName:{defaultValue:null,description:"The name that will be assigned to the parent `<fieldset>`.",name:"fieldName",required:!1,type:{name:"string"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},choiceClass:{defaultValue:null,description:"The class name that will be used on all Choice elements.",name:"choiceClass",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"Indicates whether a selection must be made or not.",name:"required",required:!1,type:{name:"boolean"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:`A list of error strings. If provided, this will be set as an unordered
list in the first child slot.`,name:"errors",required:!1,type:{name:"string[]"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string"}}}}}catch{}export{k as C,E as a,Y as b};
//# sourceMappingURL=ChoiceField-dee2c16d.js.map
