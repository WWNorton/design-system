import{j as f,a as we,c as Ae}from"./index-a1e85e29.js";import{R as e,r as Ee}from"./index-0cbcd92a.js";import{F as Re}from"./FieldInfo-942aaa1a.js";import{b as Se,t as Le,u as se,h as je,c as Ne,i as ye,f as oe}from"./hook-0eff1646.js";import{I as Fe,P as Me}from"./Icon-04f449eb.js";import{B as Ue}from"./IconButton-488799a2.js";const G=e.forwardRef(({disabled:s,label:w,selected:o,marker:i,className:D="nds-option",onClick:m,onKeyDown:x,children:S,...h},g)=>{const T=e.useMemo(()=>e.isValidElement(i)?i:f("span",{className:"nds-option__marker","aria-hidden":!o,children:f(Fe,{variant:i!=="dot"?"check":void 0,icon:i==="dot"?{children:f("circle",{r:"6",cx:"12",cy:"12"})}:void 0,color:o?"currentColor":"transparent","aria-label":o?"Checked":void 0,size:"0.875em"})}),[i,o]);return we("li",{ref:g,className:D,onClick:s?void 0:m,onKeyDown:s?void 0:x,...h,"aria-selected":o?"true":"false","aria-disabled":s?"true":void 0,role:"option",children:[T,w||S]})});try{G.displayName="Option",G.__docgenInfo={description:"A a selectable item in a list.\n\nReference:\n- [HTML - `<option>`](https://html.spec.whatwg.org/multipage/form-elements.html#the-option-element).\n- [ARIA - `option`](https://w3c.github.io/aria/#option).",displayName:"Option",props:{disabled:{defaultValue:null,description:"If set, this option is not selectable.",name:"disabled",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"The displayed option name. This will override `children`.",name:"label",required:!1,type:{name:"ReactNode"}},selected:{defaultValue:null,description:"Indicates that this option is currently selected.",name:"selected",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"The value of the option that will be submitted. If undefined, the `label`\nor `children` will be used as the `value`.",name:"value",required:!0,type:{name:"string | number"}},marker:{defaultValue:null,description:"An element that comes before the label/children, similar to CSS `::marker`.\nDefaults to a check mark, but can be set as a dot or a React element.",name:"marker",required:!1,type:{name:'ReactElement<any, string | JSXElementConstructor<any>> | "check" | "dot"'}},optionClass:{defaultValue:null,description:"",name:"optionClass",required:!1,type:{name:"string"}}}}}catch{}const ie=e.forwardRef(({options:s,optionProps:w,multiselectable:o,selected:i,onChange:D,autofocus:m,focusableIndex:x,focusWrap:S,onOptionFocus:h,className:g="nds-listbox",children:T,optionClass:U="nds-option",orientation:L,...W},J)=>{const[X,Q]=Se(J),[j,_]=e.useState(!1),V=e.useRef(new Set),b=e.useMemo(()=>{let l=T;return s&&(Array.isArray(s)?l=s.map(t=>{if(typeof t=="object"){const C=[];if("value"in t||C.push("value"),"label"in t||C.push("label"),C.length)throw new Error(`The <Listbox> options prop must contain a value and label when an array of objects. Missing props: ${C.join(",")}.`);return t}return{label:t.toString(),value:t}}):l=Object.keys(s).map(t=>({label:t,value:s[t]}))),Le(l)},[s,T]),$=e.useMemo(()=>b.filter(({props:l})=>l.selected).map(({props:l})=>l.value),[b]),{selected:Y,toggle:K}=se(o,$),O=i!==void 0?i:Y;e.useEffect(()=>{if(!o&&O.length>1)throw new Error(se.SELECT_OVERLOAD)},[o,O]);const Z=e.useMemo(()=>{switch(L){case"vertical":return{nextKeys:["ArrowDown"],prevKeys:["ArrowUp"]};case"horizontal":return{nextKeys:["ArrowRight"],prevKeys:["ArrowLeft"]};default:return{}}},[L]),{dispatch:B,containerProps:{onKeyDown:ee,onBlur:N},childProps:{createRef:F,tabIndex:H}}=je({container:X,size:b.length,initialIndex:x,wrap:S,autofocus:m,disabledItems:V.current,...Z}),te=e.useMemo(()=>b.map(({props:l},t)=>{const C=typeof w=="function"?w(t):w,{children:I,disabled:c,value:p,label:u=I||p,selected:A,...z}={...C,...l};if(!p)throw new Error("<Option> elements must provide a value prop.");c?V.current.add(t):V.current.delete(t);const v=()=>{D?D({children:I,disabled:c,...z,value:p,label:u},t):i||K(p)};return f(G,{value:p,label:u,selected:O.includes(p),disabled:c,className:U,tabIndex:c?-1:H(t),onClick:r=>{if(c){r.preventDefault();return}B({type:"GOTO",payload:t}),v()},onKeyDown:r=>{r.key==="Enter"&&v(),r.key===" "&&(r.preventDefault(),_(!0))},onKeyUp:({key:r})=>{r===" "&&j&&(v(),_(!1))},onBlur:()=>_(!1),onFocus:r=>{h&&h(r,t)},ref:c?void 0:F(t),...z,children:I},p)}),[F,B,j,D,h,w,b,O,i,H,K,U]);return f("ul",{ref:Q,className:g,"aria-orientation":L,onKeyDown:ee,onBlur:N,...W,role:"listbox","aria-multiselectable":o,children:te})});try{ie.displayName="Listbox",ie.__docgenInfo={description:`A listbox allows the user to select one or more option from a list of options.

Reference:
- [HTML - \`<datalist>\`](https://html.spec.whatwg.org/multipage/form-elements.html#the-datalist-element)
- [ARIA - \`listbox\`](https://w3c.github.io/aria/#listbox)
- [ARIA Practices - Listbox](https://w3c.github.io/aria-practices/#Listbox)`,displayName:"Listbox",props:{options:{defaultValue:null,description:`A list of options as either an array of \`value\` props, an array of \`OptionProps\`
objects, or an object with \`label: value\` entries. Array values will be
used as both the \`label\` and the \`value\`.

\`\`\`jsx
options={['Cat', 'Dog']}
	// <Listbox>
	// 	<Option value="Cat">Cat</Option>
	// 	<Option value="Dog">Dog</Option>
	// </Listbox>
\`\`\`

\`\`\`jsx
options={[{ label: 'Cat', value: 'üê±' }, { label: 'Dog', value: 'üê∂' }]}
	// <Listbox>
	// 	<Option value="üê±">Cat</Option>
	// 	<Option value="üê∂">Dog</Option>
	// </Listbox>
\`\`\`

\`\`\`jsx
options={{ Cat: 'üê±', Dog: 'üê∂' }}
	// <Listbox>
	// 	<Option value="üê±">Cat</Option>
	// 	<Option value="üê∂">Dog</Option>
	// </Listbox>
\`\`\``,name:"options",required:!1,type:{name:"Record<string, string | number> | (string | number | OptionProps)[]"}},optionProps:{defaultValue:null,description:"Option props that should be mapped to all child options.",name:"optionProps",required:!1,type:{name:"Partial<OptionProps> | ((index: number) => Partial<OptionProps>)"}},multiselectable:{defaultValue:null,description:`Indicates that more than one item can be selected. Used to set the
[aria-multiselectable](https://www.w3.org/TR/wai-aria/#aria-multiselectable) value.`,name:"multiselectable",required:!1,type:{name:"boolean"}},orientation:{defaultValue:null,description:`Indicates whether the listbox is arranged horizontally, vertically, or unknown.
Used to set the [aria-orientation](https://www.w3.org/TR/wai-aria/#aria-orientation)
value and affects which arrow keys can be used to move focus within it.`,name:"orientation",required:!1,type:{name:"enum",value:[{value:'"horizontal"'},{value:'"vertical"'}]}},selected:{defaultValue:null,description:"The currently selected value(s).",name:"selected",required:!1,type:{name:"(string | number)[]"}},onChange:{defaultValue:null,description:"A callback that will trigger any time selection changes.",name:"onChange",required:!1,type:{name:"((props: OptionProps & { value: string | number; label: ReactNode; }, index: number) => void)"}},autofocus:{defaultValue:null,description:"If set, the focusable listbox option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean"}},focusableIndex:{defaultValue:null,description:"The index of the option that should be focusable.",name:"focusableIndex",required:!1,type:{name:"number"}},focusWrap:{defaultValue:null,description:"If set, focus will move from the last option to the first option when the\nuser presses `ArrowDown`, and vice versa.",name:"focusWrap",required:!1,type:{name:"boolean"}},onOptionFocus:{defaultValue:null,description:"A callback that will trigger when an option is focused.",name:"onOptionFocus",required:!1,type:{name:"((e: FocusEvent<HTMLLIElement, Element>, index: number) => void)"}},optionClass:{defaultValue:{value:"nds-option"},description:"The class name that will be applied to all `options` children.",name:"optionClass",required:!1,type:{name:"string"}}}}}catch{}const le=({label:s,description:w,selected:o="",buttonContents:i="Select",autofocus:D=!0,isOpen:m=!1,matchWidth:x,buttonWidth:S,sort:h,baseName:g="nds-dropdown",buttonClass:T=`${g}__button`,popperClass:U=`${g}__popper`,listboxClass:L=`${g}__listbox`,id:W,className:J,labelClass:X,descriptionClass:Q,closeOnExternalClick:j=!0,closeOnDocumentEscape:_=!0,onRequestClose:V,onRequestOpen:b,onChange:$,onFirstUpdate:Y,labelId:K,descriptionId:O,buttonId:Z,listboxId:B,selectedMarker:ee="check",disabled:N,children:F,placement:H="bottom-start",strategy:te="fixed",transition:l="fade",distance:t=4,modifiers:C})=>{const I=e.useMemo(()=>h?(n,a)=>{const d=String(n.value).toUpperCase(),q=String(a.value).toUpperCase(),ve=h==="descending"?-1:1;return d<q?-1*ve:d>q?1*ve:0}:null,[h]),c=e.useMemo(()=>{const n=e.Children.map(F,a=>{let d;if(e.isValidElement(a)){let q="";typeof a.props.value=="number"||a.props.value!==void 0?q=a.props.value:a.props.children&&(q=a.props.children.toString()),d={...a.props,value:q}}else d={value:a.toString(),children:a};return d});return I?n.sort(I):n},[F,I]),p=Ee.useCallback(n=>{const a=c.findIndex(d=>d.value===n);return a===-1?0:a},[c]),[u,A]=e.useState(m),z=Ne(),v=W||z,r=K||`${v}-label`,xe=O||`${v}-desc`,ge=Z||`${v}-btn`,[k,Ce]=e.useState(null),[E,qe]=e.useState(null),[M,De]=e.useState(),[Ve,re]=e.useState(i),[ue,R]=e.useState(!1),[Ie,de]=e.useState(l),[ke,ce]=e.useState(p(o)),{selected:pe,select:fe}=se(!1,[o]),me=B||`${v}-listbox`,he=`${v}-curr`,P=e.useRef(!1),be=e.useCallback(()=>{b?b():A(!0)},[b]),y=e.useCallback(()=>{V?V():A(!1)},[V]),Te=()=>{u?y():be()},_e=n=>{["ArrowDown","ArrowUp"].includes(n.key)&&(n.preventDefault(),be())};e.useEffect(()=>{o!==pe[0]&&(fe(o),re(i),ce(p(o)))},[o]);const ne=e.useCallback(n=>{const a=n.composedPath(),d=k&&a.includes(k),q=E&&a.includes(E);j&&!d&&!q&&(R(!1),y())},[k,E,j,y]),ae=e.useCallback(n=>{u&&(_&&n.key==="Escape"&&(R(!0),y()),n.key==="Tab"&&(R(!1),y()))},[u,y,_]),Oe=(n,a=0)=>{if($){const{value:d}=n;$({value:d,contents:n.label})}else fe(n.value);re(n.label),R(!0),ce(a),y()};return e.useEffect(()=>{N&&(R(!0),y())},[N,y]),e.useEffect(()=>{A(m)},[m]),e.useEffect(()=>{!u&&ue&&k!==null&&(ye&&"requestAnimationFrame"in window&&window.requestAnimationFrame(()=>k.focus()),R(!1))},[k,u,ue]),e.useEffect(()=>{x==="listbox"&&M===void 0&&(P.current=!0,de(void 0),A(!0),ye&&"requestAnimationFrame"in window&&window.requestAnimationFrame(()=>{de(l)}))},[M,x,l]),oe(()=>{E&&De(E.offsetWidth)},[E]),oe(()=>{typeof M=="number"&&P.current&&(A(m),P.current=!1)},[M,m]),oe(()=>(document.addEventListener("keydown",ae),document.addEventListener("click",ne),()=>{document.removeEventListener("keydown",ae),document.removeEventListener("click",ne)}),[ae,ne]),we("div",{className:Ae(g,J),id:W,children:[f(Re,{label:s,labelClass:X,labelId:r,description:w,descriptionClass:Q,descriptionId:xe}),f(Ue,{id:ge,className:T,disabled:N,variant:"outline",style:{width:x==="listbox"?M:S},"aria-expanded":u?"true":void 0,"aria-labelledby":`${r} ${he}`,"aria-haspopup":"listbox","aria-controls":u?me:void 0,onClick:Te,onKeyDown:_e,ref:Ce,icon:P.current?void 0:"chevron-down",iconRight:!0,children:f("span",{id:he,children:Ve})}),f(Me,{placement:H,className:U,reference:k,isOpen:u,modifiers:C,strategy:te,distance:t,transition:Ie,onFirstUpdate:Y,matchWidth:x==="button",children:f(ie,{id:me,"aria-labelledby":r,multiselectable:!1,className:L,optionClass:"nds-dropdown__option",optionProps:{marker:ee},selected:pe,onChange:Oe,focusableIndex:ke,autofocus:u&&D,ref:qe,children:c})})]})};le.Option=G;try{le.displayName="Dropdown",le.__docgenInfo={description:"",displayName:"Dropdown",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean"}},closeOnExternalClick:{defaultValue:{value:"true"},description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean"}},closeOnDocumentEscape:{defaultValue:{value:"true"},description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string"}},baseName:{defaultValue:{value:"nds-dropdown"},description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string"}},buttonClass:{defaultValue:{value:"`${baseName}__button`"},description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string"}},listboxClass:{defaultValue:{value:"`${baseName}__listbox`"},description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string"}},popperClass:{defaultValue:{value:"`${baseName}__popper`"},description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void)"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void)"}},onChange:{defaultValue:null,description:`Callback function that is called when an option is selected. This will
occur under the following conditions:
* When the user clicks an option.
* When the user presses \`Enter\` on the currently focused option.
* When the user releases the space bar on the currently focused option.`,name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void)"}},autofocus:{defaultValue:{value:"true"},description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean"}},selectedMarker:{defaultValue:{value:"check"},description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},transition:{defaultValue:null,description:`The animation transition class applied to the popper as it enters or exits.
A single name can be provided and it will be suffixed for each stage.

For example, \`transition="fade"\` applies:

- \`fade-enter\`
- \`fade-enter-active\`
- \`fade-exit\`
- \`fade-exit-active\`
- \`fade-appear\`
- \`fade-appear-active\`

Each individual stage can also be specified independently:

\`\`\`js
transition={{
	appear: 'my-appear',
	appearActive: 'my-appear-active',
	appearDone: 'my-appear-done',
	enter: 'my-enter',
	enterActive: 'my-enter-active',
	enterDone: 'my-enter-done',
	exit: 'my-exit',
	exitActive: 'my-exit-active',
	exitDone: 'my-exit-done'
}}
\`\`\`

Reference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).`,name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames"}},distance:{defaultValue:{value:"4"},description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number"}},placement:{defaultValue:{value:"bottom-start"},description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[]"}},strategy:{defaultValue:{value:"fixed"},description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void)"}}}}}catch{}export{le as D,ie as L,G as O};
//# sourceMappingURL=Dropdown-28a2ff62.js.map
