import{j as s,a as r,F as m,c as V}from"./index-a1e85e29.js";import{R as f}from"./index-0cbcd92a.js";const v=({children:e,baseName:a="nds-field",className:l=`${a}__addon`})=>s("span",{className:l,children:e});try{v.displayName="FieldAddon",v.__docgenInfo={description:"",displayName:"FieldAddon",props:{baseName:{defaultValue:{value:"nds-field"},description:"",name:"baseName",required:!1,type:{name:"string"}}}}}catch{}const g=({errors:e,liveErrors:a=!0,baseName:l="nds-field",errorsClass:i=`${l}__errors`,errorsId:n,children:d,className:o=`${l}__feedback`,id:c})=>{const u=f.useMemo(()=>!e||!e.length?null:s("ul",{className:i,id:n,"aria-label":"Errors","aria-live":a?"assertive":void 0,"aria-atomic":a?"true":void 0,children:e.map(t=>s("li",{children:t},t))}),[e,i,n,a]);return r("div",{id:c,className:o,children:[u,d]})};try{g.displayName="FieldFeedback",g.__docgenInfo={description:"A container for field feedback. Use to display content based on field input.",displayName:"FieldFeedback",props:{liveErrors:{defaultValue:{value:"true"},description:"Indicates whether errors should be a live region. Default is `true`. Only\nset to `false` if you intend to communicate errors to screen reader users\nthrough some other mechanism.",name:"liveErrors",required:!1,type:{name:"boolean"}},baseName:{defaultValue:{value:"nds-field"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:`A list of error strings. If provided, this will be set as an unordered
list in the first child slot.`,name:"errors",required:!1,type:{name:"string[]"}},errorsClass:{defaultValue:{value:"`${baseName}__errors`"},description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string"}}}}}catch{}const N=({label:e,labelTag:a,indicator:l,description:i,baseName:n="nds-field",labelClass:d=`${n}__label`,indicatorClass:o=`${n}__indicator`,descriptionClass:c=`${n}__desc`,labelId:u,descriptionId:t,children:h,className:q,htmlFor:p,id:F})=>{const _=f.useMemo(()=>l?r(m,{children:[" ",r("span",{className:o,children:["(",l,")"]})]}):null,[l,o]),b=f.useMemo(()=>s(p?"label":a||"div",{...{className:d,htmlFor:p,id:u,children:r(m,{children:[e,_]})}}),[e,d,p,u,_,a]),y=f.useMemo(()=>a!=="legend"&&!i?null:s("div",{className:c,id:t,children:i}),[a,i,c,t]);return a==="legend"?r(m,{children:[b,y,h]}):r("div",{className:V(`${n}__info`,q),id:F,children:[b,y,h]})};try{N.displayName="FieldInfo",N.__docgenInfo={description:"Information about a related field. Will always contain a label for the field\nand can contain an optional description. Make sure to include a valid `htmlFor`\nprop when used with form controls such as an `<input>`.",displayName:"FieldInfo",props:{baseName:{defaultValue:{value:"nds-field"},description:"",name:"baseName",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The name of the field. Required.",name:"label",required:!0,type:{name:"ReactNode"}},indicator:{defaultValue:null,description:'An additional label indicator, displayed as a parenthetical inside the\nlabel container. For instance, `indicator="required"` would result in\nlabel text content of `"{label} (required)"`.',name:"indicator",required:!1,type:{name:"string | null"}},indicatorClass:{defaultValue:{value:"`${baseName}__indicator`"},description:"A className for the indicator `<span>`.",name:"indicatorClass",required:!1,type:{name:"string"}},labelTag:{defaultValue:null,description:"The HTML element name for the label. If `htmlFor` is included, this will\nautomatically be `label`. If undefined, this will be `div`.",name:"labelTag",required:!1,type:{name:"enum",value:[{value:'"div"'},{value:'"label"'},{value:'"legend"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:{value:"`${baseName}__label`"},description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:{value:"`${baseName}__desc`"},description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}}}}}catch{}export{N as F,g as a,v as b};
//# sourceMappingURL=FieldInfo-942aaa1a.js.map
