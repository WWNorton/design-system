import{j as u,c as N,a as B,F as P}from"./index-a1e85e29.js";import{R as t}from"./index-0cbcd92a.js";import{j as E,b as M}from"./hook-0eff1646.js";import{B as S}from"./BaseButton-a4b1d3e6.js";import{I as $,T as L}from"./Icon-04f449eb.js";import{r as W}from"./index-314a82e0.js";const O={position:"absolute",width:"1px",height:"1px",padding:"0",margin:"-1px",overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",border:"0"},w={removeAfter:450,updateAfter:50,"aria-live":"assertive"},_=({removeAfter:e=w.removeAfter,updateAfter:a=w.updateAfter,visible:n,"aria-atomic":i,"aria-live":o=w["aria-live"],"aria-relevant":d,children:r,className:c,id:p,role:m})=>{const[l,h]=t.useState(""),[s,v]=t.useState(!1),b=t.useRef(r),f=t.useRef(),R=()=>{h(""),v(!1)},y=t.useCallback(()=>{h(r),e&&(f.current=window.setTimeout(R,e))},[r,e]);t.useEffect(()=>{s&&window.setTimeout(y,a)},[s,y,a]),t.useEffect(()=>{r&&b.current!==r&&(window.clearTimeout(f.current),b.current=r,v(!0))},[r]);const g=t.useMemo(()=>u("div",{"aria-atomic":i,"aria-live":o,"aria-relevant":d,className:c,id:p,role:m,style:n?void 0:O,children:l}),[i,o,d,c,p,l,m,n]);return typeof document>"u"?null:W.createPortal(s?g:null,document.body)};_.defaultProps=w;const q=(e,a)=>{const[n,i]=t.useState(""),o=t.useRef(a);return t.useEffect(()=>{e&&document.activeElement===e&&(E(o.current,a)||(o.current=a,i(a)))},[a,e]),n};try{_.displayName="LiveRegion",_.__docgenInfo={description:`Render an ARIA live region as a React Portal. Changing the \`children\` of this
component will result in
1. Render the live region.
2. Wait a moment so that AT can start monitoring it for changes.
3. Update it with a duplicate of the new children to ensure that screen
reader users will perceive the change in content.
4. Remove the live region a moment later.

Reference:
- [MDN - ARIA Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions)`,displayName:"LiveRegion",props:{removeAfter:{defaultValue:{value:"450"},description:"The time in milliseconds that the live region should exist. Default is\n`450`. `undefined` or `0` will make the live region persist indefinitely.",name:"removeAfter",required:!1,type:{name:"number"}},updateAfter:{defaultValue:{value:"50"},description:`The time in milliseconds that should elapse before the contents of the
live region's contents should be updated. This should be long enough for
screen readers to begin monitoring the live region for changes. Default
is \`50\`.`,name:"updateAfter",required:!1,type:{name:"number"}},visible:{defaultValue:null,description:"Indicates whether the live region should be visible or not. If `true`,\ninline CSS will be used to visually hide the live region.",name:"visible",required:!1,type:{name:"boolean"}}}}}catch{}try{q.displayName="useContentMonitor",q.__docgenInfo={description:"Monitor an element for content changes. Returns the element's changed content,\nwhich should be passed to a `LiveRegion` as `children` to ensure that screen\nreader users will be notified of the change.",displayName:"useContentMonitor",props:{}}}catch{}const D="Button components must always have a valid accessible name. This can be provided via children or an ARIA name. See https://www.w3.org/WAI/ARIA/apg/practices/names-and-descriptions/ for more details.",V=t.forwardRef(({baseName:e="nds-button",variant:a,icon:n,iconRight:i,iconOnly:o,color:d,tooltipProps:r,iconClass:c=`${e}__icon`,textClass:p=`${e}__text`,className:m,children:l,"aria-label":h,"aria-labelledby":s,...v},b)=>{if(!t.Children.count(l)&&!h&&!s)throw new Error(D);const[f,R]=M(b),y=q(f,l),g=t.useMemo(()=>{if(!n)return null;const T={className:c},C=typeof n=="string"?{...T,variant:n}:{...T,icon:n};return u($,{...C})},[n,c]),A=t.useMemo(()=>n&&o?null:t.isValidElement(l)?l:u("span",{...{className:p,children:l}}),[l,n,o,p]),I=N({[`${e}--solid`]:a==="solid",[`${e}--outline`]:a==="outline",[`${e}--ghost`]:a==="ghost",[`${e}--icon-only`]:n&&o,[`${e}--${d}`]:d!==void 0},e,m);return B(P,{children:[B(S,{className:I,ref:R,"aria-label":h,"aria-labelledby":s,...v,children:[i?null:g,A,i?g:null]}),o&&u(L,{asLabel:!0,reference:f,...r,children:l}),u(_,{children:y})]})});try{V.displayName="Button",V.__docgenInfo={description:"A button allows a user to perform an action.",displayName:"Button",props:{children:{defaultValue:null,description:"Button `children` are required because they are used to provide an accessible\nlabel for the button. When rendering with `iconOnly`, the children will be\nrendered as an accessible `Tooltip` that labels the button.",name:"children",required:!0,type:{name:"ReactNode"}},variant:{defaultValue:null,description:"Button variant conveys the button's level of visual emphasis.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"solid"'},{value:'"outline"'},{value:'"ghost"'}]}},icon:{defaultValue:null,description:"An icon to include in the button.",name:"icon",required:!1,type:{name:"IconVariant | SVGIcon"}},iconRight:{defaultValue:null,description:`Indicates whether the icon should be to the right of the text. By default,
the icon is to the left of the text.`,name:"iconRight",required:!1,type:{name:"boolean"}},iconOnly:{defaultValue:null,description:"Indicates whether the button's contents should only be the icon. When\n`true`, the button's text is still required but will be used as the icon's\n`aria-label`. If no `icon` is specified, this prop has no effect.",name:"iconOnly",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:'The button\'s color, restricted to [design system colors](https://wwnorton.github.io/design-system/docs/color),\nexcluding `disabled` (prefer the `disabled` prop). Note that an `undefined`\ncolor will result in the "primary" color being used.',name:"color",required:!1,type:{name:"enum",value:[{value:'"base"'},{value:'"warning"'},{value:'"blue"'},{value:'"cyan"'},{value:'"gray"'},{value:'"green"'},{value:'"navy"'},{value:'"purple"'},{value:'"red"'},{value:'"teal"'},{value:'"yellow"'},{value:'"primary"'},{value:'"error"'},{value:'"success"'}]}},buttonRef:{defaultValue:null,description:"A reference to the inner `<button>` element.",name:"buttonRef",required:!1,type:{name:"Ref<HTMLButtonElement>"}},baseName:{defaultValue:{value:"nds-button"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},iconClass:{defaultValue:{value:"`${baseName}__icon`"},description:"The className for the Button's icon, if one exists.",name:"iconClass",required:!1,type:{name:"string"}},textClass:{defaultValue:{value:"`${baseName}__text`"},description:"The className for the Button's text, which will be placed in a `<span>`",name:"textClass",required:!1,type:{name:"string"}},tooltipProps:{defaultValue:null,description:`Tooltip props that should be included when the button's children are
rendered as a tooltip.`,name:"tooltipProps",required:!1,type:{name:"Partial<TooltipCoreProps>"}},active:{defaultValue:null,description:"Whether the button is currently depressed. Polyfill for :active on keydown.",name:"active",required:!1,type:{name:"boolean"}},activeClass:{defaultValue:null,description:"A class to convey :active.",name:"activeClass",required:!1,type:{name:"string"}}}}}catch{}const x=t.forwardRef(({variant:e="ghost",children:a,...n},i)=>u(V,{iconOnly:!0,variant:e,ref:i,...n,children:a}));try{x.displayName="IconButton",x.__docgenInfo={description:'Display an icon in a button. By default,`variant` is "ghost". Equivalent to\n`<Button variant="ghost" iconOnly icon="...">...</Button>`.',displayName:"IconButton",props:{color:{defaultValue:null,description:'The button\'s color, restricted to [design system colors](https://wwnorton.github.io/design-system/docs/color),\nexcluding `disabled` (prefer the `disabled` prop). Note that an `undefined`\ncolor will result in the "primary" color being used.',name:"color",required:!1,type:{name:"enum",value:[{value:'"base"'},{value:'"warning"'},{value:'"blue"'},{value:'"cyan"'},{value:'"gray"'},{value:'"green"'},{value:'"navy"'},{value:'"purple"'},{value:'"red"'},{value:'"teal"'},{value:'"yellow"'},{value:'"primary"'},{value:'"error"'},{value:'"success"'}]}},children:{defaultValue:null,description:"Button `children` are required because they are used to provide an accessible\nlabel for the button. When rendering with `iconOnly`, the children will be\nrendered as an accessible `Tooltip` that labels the button.",name:"children",required:!0,type:{name:"ReactNode"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},icon:{defaultValue:null,description:"An icon to include in the button.",name:"icon",required:!1,type:{name:"IconVariant | SVGIcon"}},iconClass:{defaultValue:null,description:"The className for the Button's icon, if one exists.",name:"iconClass",required:!1,type:{name:"string"}},variant:{defaultValue:{value:"ghost"},description:"Button variant conveys the button's level of visual emphasis.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"solid"'},{value:'"outline"'},{value:'"ghost"'}]}},tooltipProps:{defaultValue:null,description:`Tooltip props that should be included when the button's children are
rendered as a tooltip.`,name:"tooltipProps",required:!1,type:{name:"Partial<TooltipCoreProps>"}},buttonRef:{defaultValue:null,description:"A reference to the inner `<button>` element.",name:"buttonRef",required:!1,type:{name:"Ref<HTMLButtonElement>"}},textClass:{defaultValue:null,description:"The className for the Button's text, which will be placed in a `<span>`",name:"textClass",required:!1,type:{name:"string"}},active:{defaultValue:null,description:"Whether the button is currently depressed. Polyfill for :active on keydown.",name:"active",required:!1,type:{name:"boolean"}},activeClass:{defaultValue:null,description:"A class to convey :active.",name:"activeClass",required:!1,type:{name:"string"}}}}}catch{}export{V as B,x as I};
//# sourceMappingURL=IconButton-488799a2.js.map
