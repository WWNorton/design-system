{"version":3,"file":"TextField-a0e92e87.js","sources":["../../../../packages/react/src/components/BaseTextArea/BaseTextArea.tsx","../../../../packages/react/src/components/TextField/TextField.tsx"],"sourcesContent":["import React from 'react';\nimport {\n\tuseForwardedRef,\n\tuseLayoutEffect,\n\tuseValidation,\n} from '../../utilities';\nimport { BaseTextAreaProps } from './types';\n\nconst defaultProps: BaseTextAreaProps = {\n\tvalidateOnDOMChange: true,\n};\n\n/**\n * A base `<textarea>` component. Adds a callback for the DOM's `change` event\n * (`onDOMChange`), which does not exist in React.\n */\nexport const BaseTextArea = React.forwardRef<HTMLTextAreaElement, BaseTextAreaProps>(({\n\tmultiline = false,\n\tautoSize = false,\n\terrors: errorsProp,\n\tvalidateOnChange,\n\tvalidateOnDOMChange = defaultProps.validateOnDOMChange,\n\tvalidators,\n\t// pull out maxLength because it prevents user textarea past the given\n\t// length, which is an anti-pattern according to our usage guidelines.\n\tmaxLength,\n\tmaxLengthRestrictsInput = false,\n\tonInput,\n\tonDOMChange,\n\tonValidate,\n\t...props\n}: BaseTextAreaProps, ref): React.ReactElement => {\n\tconst [textarea, setTextarea] = useForwardedRef(ref);\n\tconst [errors, setErrors] = React.useState(errorsProp);\n\tconst lines = Number(multiline) > 0 ? Number(multiline) : 1;\n\n\t// treat the prop version of `errors` as the source of truth\n\tReact.useEffect(() => setErrors(errorsProp), [errorsProp]);\n\n\tconst validator = useValidation(validators);\n\tconst validate = React.useCallback(({\n\t\tmaxLength: elMaxLength,\n\t\tminLength,\n\t\trequired,\n\t\ttype,\n\t\tvalue,\n\t\tvalidity,\n\t}: HTMLTextAreaElement) => {\n\t\tconst errs = validator({\n\t\t\tmaxLength: maxLength || elMaxLength,\n\t\t\tminLength,\n\t\t\trequired,\n\t\t\ttype,\n\t\t\tvalue,\n\t\t\tvalidity,\n\t\t});\n\t\tif (onValidate) onValidate(errs);\n\t\tif (!errorsProp) setErrors(errs);\n\t}, [validator, onValidate, errorsProp, maxLength]);\n\n\t// Handles auto sizing with multiline component\n\tReact.useEffect(() => {\n\t\tif (autoSize && textarea) textarea.style.height = 'auto';\n\t}, [autoSize, textarea]);\n\n\tconst onResize = () => {\n\t\tif (textarea) {\n\t\t\ttextarea.style.height = 'auto';\n\t\t\ttextarea.style.height = `${textarea.scrollHeight}px`;\n\t\t}\n\t};\n\n\t/**\n\t * Unlike `onChange`, `onInput` will trigger even when the user enters a bad\n\t * value, such as entering a letter in a `type=\"number\"` field, so run\n\t * validation here to catch the `ValidityState.badInput` errors.\n\t */\n\tconst inputHandler = (e: React.FormEvent<HTMLTextAreaElement>): void => {\n\t\tif (onInput) onInput(e);\n\t\tif (autoSize) onResize();\n\t\tif (validateOnChange) validate(e.currentTarget);\n\t};\n\n\tconst domChangeHandler = React.useCallback((e: Event): void => {\n\t\tif (onDOMChange) onDOMChange(e);\n\t\tif (validateOnDOMChange) validate(e.target as HTMLTextAreaElement);\n\t}, [onDOMChange, validateOnDOMChange, validate]);\n\n\t// Reflect errors on the DOM's constraint validation API. This ensures that\n\t// browser tooltip text always matches the custom errors.\n\tReact.useEffect(() => {\n\t\tif (textarea && textarea.willValidate) {\n\t\t\tconst errString = (!errors || !errors.length) ? '' : errors.join('\\n');\n\t\t\ttextarea.setCustomValidity(errString);\n\t\t}\n\t}, [textarea, errors]);\n\n\t// Polyfill the DOM `change` listener\n\tuseLayoutEffect(() => {\n\t\tif (textarea && domChangeHandler) {\n\t\t\ttextarea.addEventListener('change', domChangeHandler);\n\t\t}\n\t\treturn (): void => {\n\t\t\tif (textarea && domChangeHandler) {\n\t\t\t\ttextarea.removeEventListener('change', domChangeHandler);\n\t\t\t}\n\t\t};\n\t}, [textarea, domChangeHandler]);\n\n\treturn (\n\t\t<textarea\n\t\t\tref={setTextarea}\n\t\t\tonInput={inputHandler}\n\t\t\tmaxLength={(maxLengthRestrictsInput) ? maxLength : undefined}\n\t\t\t{...props}\n\t\t\trows={lines}\n\t\t/>\n\t);\n});\n\nBaseTextArea.defaultProps = defaultProps;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { FieldInfo, FieldFeedback, FieldAddon } from '../Field';\nimport { BaseInput } from '../BaseInput';\nimport { BaseTextArea } from '../BaseTextArea';\nimport { TextFieldProps } from './types';\nimport { useId } from '../../utilities';\n\nconst defaultProps: Partial<TextFieldProps> = {\n\tcounterStart: 25,\n\tcounter: ({ remaining, max }) => {\n\t\tif (remaining < 0) return null;\n\t\treturn `${remaining}/${max} characters remaining`;\n\t},\n\ttype: 'text',\n};\n\nexport const TextField = React.forwardRef<HTMLInputElement & HTMLTextAreaElement, TextFieldProps>(({\n\t// options\n\tcounterStart = defaultProps.counterStart,\n\tvalidators,\n\tvalidateOnChange,\n\tvalidateOnDOMChange,\n\trequiredIndicator,\n\toptionalIndicator,\n\tmultiline = false,\n\tautoSize = false,\n\n\t// anatomy\n\tchildren,\n\tdescription,\n\taddonBefore,\n\taddonAfter,\n\tfeedback,\n\terrors: errorsProp,\n\tcounter = defaultProps.counter,\n\n\t// classes\n\tbaseName = 'nds-field',\n\tclassName = classNames(baseName, `${baseName}--text`),\n\tlabelClass,\n\tdescriptionClass,\n\tgroupClass = classNames(`${baseName}__group${multiline ? '--textarea' : ''}`, `${baseName}__group--text`),\n\tinputClass = classNames(`${baseName}__${multiline ? 'textarea' : 'input'}`, `${baseName}__${multiline ? 'textarea' : 'input'}--text`),\n\taddonClass = `${baseName}__addon`,\n\tfeedbackClass,\n\terrorsClass,\n\tcounterClass = `${baseName}__counter`,\n\tinvalidClass = `${baseName}--invalid`,\n\n\t// ids\n\tid: idProp,\n\tlabelId: labelIdProp,\n\tdescriptionId: descIdProp,\n\terrorsId: errIdProp,\n\n\t// <input> attributes\n\tmaxLength,\n\trequired,\n\ttype = defaultProps.type,\n\tvalue,\n\n\t// event callbacks\n\tonChange,\n\tonCount,\n\tonDOMChange,\n\tonValidate,\n\n\t// everything else\n\t...inputProps\n}: TextFieldProps, ref) => {\n\tconst [errors, setErrors] = React.useState(errorsProp);\n\n\t// ids stored as refs since they shouldn't change between renders\n\tconst uniqueId = useId();\n\tconst id = idProp || uniqueId;\n\tconst labelId = labelIdProp || `${id}-label`;\n\tconst descId = descIdProp || `${id}-desc`;\n\tconst errId = errIdProp || `${id}-err`;\n\tconst inputId = `${id}-input`;\n\n\tconst getRemaining = React.useCallback((val?: typeof value) => {\n\t\tif (maxLength) {\n\t\t\treturn maxLength - (val || '').toString().length;\n\t\t}\n\t\treturn undefined;\n\t}, [maxLength]);\n\tconst [remaining, setRemaining] = React.useState(getRemaining(value));\n\tReact.useEffect(() => setRemaining(getRemaining(value)), [getRemaining, value]);\n\n\t// treat prop version of errors as source of truth\n\tReact.useEffect(() => setErrors(errorsProp), [errorsProp]);\n\n\tReact.useEffect(() => {\n\t\tif (onCount) onCount(remaining);\n\t}, [onCount, remaining]);\n\n\tconst isValid = React.useMemo(() => Boolean(!errors || errors.length === 0), [errors]);\n\n\tconst validateHandler = (e: string[]): void => {\n\t\tif (onValidate) onValidate(e);\n\t\tsetErrors(e);\n\t};\n\n\tconst changeHandler = (e: React.ChangeEvent<HTMLInputElement>\n\t& React.ChangeEvent<HTMLTextAreaElement>) => {\n\t\tif (onChange) onChange(e);\n\t\telse setRemaining(getRemaining(e.target.value));\n\t};\n\n\tconst createFieldAddons = (addons: React.ReactNode): React.ReactNode[] | null | undefined => {\n\t\tif (!addons) return null;\n\t\treturn React.Children.map(addons, (child) => {\n\t\t\tif (React.isValidElement(child)) {\n\t\t\t\tif (child.type === React.Fragment) {\n\t\t\t\t\treturn createFieldAddons(child.props.children);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn <FieldAddon className={addonClass}>{ child }</FieldAddon>;\n\t\t});\n\t};\n\n\tconst Counter = React.useMemo(() => {\n\t\tif (!counter) return null;\n\t\tif (maxLength !== undefined && remaining !== undefined && counterStart !== undefined) {\n\t\t\tif (remaining <= counterStart) {\n\t\t\t\treturn (\n\t\t\t\t\t<div className={counterClass}>\n\t\t\t\t\t\t{ counter({ remaining, max: maxLength }) }\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}, [counter, counterClass, counterStart, maxLength, remaining]);\n\n\tconst indicator = React.useMemo(() => {\n\t\tif (requiredIndicator && required) return 'required';\n\t\tif (optionalIndicator && !required) return 'optional';\n\t\treturn null;\n\t}, [requiredIndicator, optionalIndicator, required]);\n\n\tconst sharedProps = {\n\t\tref,\n\t\tvalue,\n\t\terrors,\n\t\tonChange: changeHandler,\n\t\tonDOMChange,\n\t\tonValidate: validateHandler,\n\t\tid: inputId,\n\t\tclassName: inputClass,\n\t\t'aria-describedby': (description) ? descId : undefined,\n\t\t'aria-invalid': !isValid,\n\t\t'aria-errormessage': (!isValid) ? errId : undefined,\n\t\t// validation props\n\t\tmaxLength,\n\t\trequired,\n\t\t// BaseInput custom validation props\n\t\tvalidators,\n\t\tvalidateOnChange,\n\t\tvalidateOnDOMChange,\n\t\t...inputProps,\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames(className, { [invalidClass]: !isValid })}\n\t\t\tid={idProp}\n\t\t>\n\t\t\t<FieldInfo\n\t\t\t\thtmlFor={inputId}\n\t\t\t\tlabel={children}\n\t\t\t\tindicator={indicator}\n\t\t\t\tlabelId={labelId}\n\t\t\t\tlabelClass={labelClass}\n\t\t\t\tdescriptionClass={descriptionClass}\n\t\t\t\tdescriptionId={descId}\n\t\t\t\tdescription={description}\n\t\t\t/>\n\t\t\t<div className={!multiline ? groupClass : ''}>\n\t\t\t\t{ (multiline)\n\t\t\t\t\t? (\n\t\t\t\t\t\t<BaseTextArea\n\t\t\t\t\t\t\t{...sharedProps}\n\t\t\t\t\t\t\tclassName={classNames(groupClass, inputClass)}\n\t\t\t\t\t\t\tmultiline={multiline}\n\t\t\t\t\t\t\tautoSize={autoSize}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t\t: (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{ createFieldAddons(addonBefore) }\n\t\t\t\t\t\t\t<BaseInput {...sharedProps} type={type} />\n\t\t\t\t\t\t\t{ createFieldAddons(addonAfter) }\n\t\t\t\t\t\t</>\n\t\t\t\t\t) }\n\t\t\t</div>\n\t\t\t<FieldFeedback\n\t\t\t\tclassName={feedbackClass}\n\t\t\t\terrorsId={errId}\n\t\t\t\terrors={errors}\n\t\t\t\terrorsClass={errorsClass}\n\t\t\t>\n\t\t\t\t{ feedback }\n\t\t\t\t{ Counter }\n\t\t\t</FieldFeedback>\n\t\t</div>\n\t);\n});\n\n/**\n * An uncontrolled variant of the `TextField` component. The `value` prop doesn't\n * exist on this version, as it is managed internally. Use when the value does not\n * need to be controlled via React state, such as prototyping or when\n * values are submitted with native APIs like\n * [HTMLFormElement.submit()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit).\n */\nexport const TextFieldUncontrolled = (props: Omit<TextFieldProps, 'value'>): JSX.Element => {\n\tconst [value, setValue] = React.useState('');\n\treturn (\n\t\t<TextField\n\t\t\tvalue={value}\n\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement> &\n\t\t\tReact.ChangeEvent<HTMLTextAreaElement>) => {\n\t\t\t\tsetValue(e.target.value);\n\t\t\t\tconst { onChange } = props;\n\t\t\t\tif (onChange) onChange(e);\n\t\t\t}}\n\t\t\t{...props}\n\t\t/>\n\t);\n};\n"],"names":["defaultProps","BaseTextArea","React","multiline","autoSize","errorsProp","validateOnChange","validateOnDOMChange","validators","maxLength","maxLengthRestrictsInput","onInput","onDOMChange","onValidate","props","ref","textarea","setTextarea","useForwardedRef","errors","setErrors","lines","validator","useValidation","validate","elMaxLength","minLength","required","type","value","validity","errs","onResize","inputHandler","e","domChangeHandler","errString","useLayoutEffect","jsx","remaining","max","TextField","counterStart","requiredIndicator","optionalIndicator","children","description","addonBefore","addonAfter","feedback","counter","baseName","className","classNames","labelClass","descriptionClass","groupClass","inputClass","addonClass","feedbackClass","errorsClass","counterClass","invalidClass","idProp","labelIdProp","descIdProp","errIdProp","onChange","onCount","inputProps","uniqueId","useId","id","labelId","descId","errId","inputId","getRemaining","val","setRemaining","isValid","validateHandler","changeHandler","createFieldAddons","addons","child","FieldAddon","Counter","indicator","sharedProps","jsxs","FieldInfo","Fragment","BaseInput","FieldFeedback","TextFieldUncontrolled","setValue"],"mappings":"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"}