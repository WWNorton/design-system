import{j as u,a as j,c as V,F as he}from"./index-a1e85e29.js";import{R as e}from"./index-0cbcd92a.js";import{F as ge,a as ve,b as be}from"./FieldInfo-942aaa1a.js";import{B as ye}from"./BaseInput-0353def3.js";import{b as Ve,e as qe,f as we,c as Ce}from"./hook-0eff1646.js";const ie={validateOnDOMChange:!0},$=e.forwardRef(({multiline:a=!1,autoSize:s=!1,errors:o,validateOnChange:m,validateOnDOMChange:d=ie.validateOnDOMChange,validators:q,maxLength:l,maxLengthRestrictsInput:D=!1,onInput:w,onDOMChange:p,onValidate:v,...k},S)=>{const[t,b]=Ve(S),[n,C]=e.useState(o),F=Number(a)>0?Number(a):1;e.useEffect(()=>C(o),[o]);const x=qe(q),h=e.useCallback(({maxLength:i,minLength:N,required:H,type:_,value:U,validity:z})=>{const A=x({maxLength:l||i,minLength:N,required:H,type:_,value:U,validity:z});v&&v(A),o||C(A)},[x,v,o,l]);e.useEffect(()=>{s&&t&&(t.style.height="auto")},[s,t]);const I=()=>{t&&(t.style.height="auto",t.style.height=`${t.scrollHeight}px`)},L=i=>{w&&w(i),s&&I(),m&&h(i.currentTarget)},c=e.useCallback(i=>{p&&p(i),d&&h(i.target)},[p,d,h]);return e.useEffect(()=>{if(t&&t.willValidate){const i=!n||!n.length?"":n.join(`
`);t.setCustomValidity(i)}},[t,n]),we(()=>(t&&c&&t.addEventListener("change",c),()=>{t&&c&&t.removeEventListener("change",c)}),[t,c]),u("textarea",{ref:b,onInput:L,maxLength:D?l:void 0,...k,rows:F})});$.defaultProps=ie;try{$.displayName="BaseTextArea",$.__docgenInfo={description:"A base `<textarea>` component. Adds a callback for the DOM's `change` event\n(`onDOMChange`), which does not exist in React.",displayName:"BaseTextArea",props:{errors:{defaultValue:null,description:`A list of validation errors. When the input is submitted in a form, the
list will be concatenated into a single string with a new line separator.`,name:"errors",required:!1,type:{name:"string[]"}},validators:{defaultValue:null,description:`A list of validators. A validator contains a function that tests the value
for validity and a corresponding message that conveys why the test failed.`,name:"validators",required:!1,type:{name:"ValidatorEntry[]"}},validateOnDOMChange:{defaultValue:{value:"true"},description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean"}},maxLengthRestrictsInput:{defaultValue:{value:"false"},description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"((e: Event) => void)"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"((errors: string[]) => void)"}},multiline:{defaultValue:{value:"false"},description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean"}},autoSize:{defaultValue:{value:"false"},description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean"}}}}}catch{}const J={counterStart:25,counter:({remaining:a,max:s})=>a<0?null:`${a}/${s} characters remaining`,type:"text"},X=e.forwardRef(({counterStart:a=J.counterStart,validators:s,validateOnChange:o,validateOnDOMChange:m,requiredIndicator:d,optionalIndicator:q,multiline:l=!1,autoSize:D=!1,children:w,description:p,addonBefore:v,addonAfter:k,feedback:S,errors:t,counter:b=J.counter,baseName:n="nds-field",className:C=V(n,`${n}--text`),labelClass:F,descriptionClass:x,groupClass:h=V(`${n}__group${l?"--textarea":""}`,`${n}__group--text`),inputClass:I=V(`${n}__${l?"textarea":"input"}`,`${n}__${l?"textarea":"input"}--text`),addonClass:L=`${n}__addon`,feedbackClass:c,errorsClass:i,counterClass:N=`${n}__counter`,invalidClass:H=`${n}--invalid`,id:_,labelId:U,descriptionId:z,errorsId:A,maxLength:f,required:M,type:le=J.type,value:O,onChange:G,onCount:W,onDOMChange:re,onValidate:K,...se},oe)=>{const[y,Q]=e.useState(t),de=Ce(),T=_||de,ue=U||`${T}-label`,Y=z||`${T}-desc`,Z=A||`${T}-err`,ee=`${T}-input`,R=e.useCallback(r=>{if(f)return f-(r||"").toString().length},[f]),[g,te]=e.useState(R(O));e.useEffect(()=>te(R(O)),[R,O]),e.useEffect(()=>Q(t),[t]),e.useEffect(()=>{W&&W(g)},[W,g]);const B=e.useMemo(()=>!y||y.length===0,[y]),ce=r=>{K&&K(r),Q(r)},fe=r=>{G?G(r):te(R(r.target.value))},P=r=>r?e.Children.map(r,E=>e.isValidElement(E)&&E.type===e.Fragment?P(E.props.children):u(be,{className:L,children:E})):null,me=e.useMemo(()=>b&&f!==void 0&&g!==void 0&&a!==void 0&&g<=a?u("div",{className:N,children:b({remaining:g,max:f})}):null,[b,N,a,f,g]),pe=e.useMemo(()=>d&&M?"required":q&&!M?"optional":null,[d,q,M]),ae={ref:oe,value:O,errors:y,onChange:fe,onDOMChange:re,onValidate:ce,id:ee,className:I,"aria-describedby":p?Y:void 0,"aria-invalid":!B,"aria-errormessage":B?void 0:Z,maxLength:f,required:M,validators:s,validateOnChange:o,validateOnDOMChange:m,...se};return j("div",{className:V(C,{[H]:!B}),id:_,children:[u(ge,{htmlFor:ee,label:w,indicator:pe,labelId:ue,labelClass:F,descriptionClass:x,descriptionId:Y,description:p}),u("div",{className:l?"":h,children:l?u($,{...ae,className:V(h,I),multiline:l,autoSize:D}):j(he,{children:[P(v),u(ye,{...ae,type:le}),P(k)]})}),j(ve,{className:c,errorsId:Z,errors:y,errorsClass:i,children:[S,me]})]})}),ne=a=>{const[s,o]=e.useState("");return u(X,{value:s,onChange:m=>{o(m.target.value);const{onChange:d}=a;d&&d(m)},...a})};try{X.displayName="TextField",X.__docgenInfo={description:"",displayName:"TextField",props:{type:{defaultValue:{value:"defaultProps.type"},description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},counterStart:{defaultValue:{value:"defaultProps.counterStart"},description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number"}},counter:{defaultValue:{value:"defaultProps.counter"},description:`A function that takes the remaining number of characters and the maximum
number of characters and returns the string or element that will be
rendered in the character counter slot.`,name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode)"}},baseName:{defaultValue:{value:"nds-field"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},inputClass:{defaultValue:{value:"classNames(`${baseName}__${multiline ? 'textarea' : 'input'}`, `${baseName}__${multiline ? 'textarea' : 'input'}--text`)"},description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string"}},addonClass:{defaultValue:{value:"`${baseName}__addon`"},description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string"}},groupClass:{defaultValue:{value:"classNames(`${baseName}__group${multiline ? '--textarea' : ''}`, `${baseName}__group--text`)"},description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string"}},feedbackClass:{defaultValue:null,description:`The className for the TextField's feedback section, which contains the
error text and character count.`,name:"feedbackClass",required:!1,type:{name:"string"}},counterClass:{defaultValue:{value:"`${baseName}__counter`"},description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string"}},invalidClass:{defaultValue:{value:"`${baseName}--invalid`"},description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement>"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number) => void)"}},multiline:{defaultValue:{value:"false"},description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean"}},autoSize:{defaultValue:{value:"false"},description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:`A list of error strings. If provided, this will be set as an unordered
list in the first child slot.
A list of validation errors. When the input is submitted in a form, the
list will be concatenated into a single string with a new line separator.`,name:"errors",required:!1,type:{name:"string[]"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string"}},validators:{defaultValue:null,description:`A list of validators. A validator contains a function that tests the value
for validity and a corresponding message that conveys why the test failed.`,name:"validators",required:!1,type:{name:"ValidatorEntry[]"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void))"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void))"}}}}}catch{}try{ne.displayName="TextFieldUncontrolled",ne.__docgenInfo={description:"An uncontrolled variant of the `TextField` component. The `value` prop doesn't\nexist on this version, as it is managed internally. Use when the value does not\nneed to be controlled via React state, such as prototyping or when\nvalues are submitted with native APIs like\n[HTMLFormElement.submit()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit).",displayName:"TextFieldUncontrolled",props:{baseName:{defaultValue:{value:"nds-field"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},type:{defaultValue:{value:"defaultProps.type"},description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},counterStart:{defaultValue:{value:"defaultProps.counterStart"},description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number"}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},counter:{defaultValue:{value:"defaultProps.counter"},description:`A function that takes the remaining number of characters and the maximum
number of characters and returns the string or element that will be
rendered in the character counter slot.`,name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode)"}},inputClass:{defaultValue:{value:"classNames(`${baseName}__${multiline ? 'textarea' : 'input'}`, `${baseName}__${multiline ? 'textarea' : 'input'}--text`)"},description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string"}},addonClass:{defaultValue:{value:"`${baseName}__addon`"},description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string"}},groupClass:{defaultValue:{value:"classNames(`${baseName}__group${multiline ? '--textarea' : ''}`, `${baseName}__group--text`)"},description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string"}},feedbackClass:{defaultValue:null,description:`The className for the TextField's feedback section, which contains the
error text and character count.`,name:"feedbackClass",required:!1,type:{name:"string"}},counterClass:{defaultValue:{value:"`${baseName}__counter`"},description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string"}},invalidClass:{defaultValue:{value:"`${baseName}--invalid`"},description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement>"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number) => void)"}},multiline:{defaultValue:{value:"false"},description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean"}},autoSize:{defaultValue:{value:"false"},description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:`A list of error strings. If provided, this will be set as an unordered
list in the first child slot.
A list of validation errors. When the input is submitted in a form, the
list will be concatenated into a single string with a new line separator.`,name:"errors",required:!1,type:{name:"string[]"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string"}},validators:{defaultValue:null,description:`A list of validators. A validator contains a function that tests the value
for validity and a corresponding message that conveys why the test failed.`,name:"validators",required:!1,type:{name:"ValidatorEntry[]"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void))"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void))"}}}}}catch{}export{X as T};
//# sourceMappingURL=TextField-bf89e361.js.map
