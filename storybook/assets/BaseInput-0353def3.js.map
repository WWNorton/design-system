{"version":3,"file":"BaseInput-0353def3.js","sources":["../../../../packages/react/src/components/BaseInput/BaseInput.tsx"],"sourcesContent":["import React from 'react';\nimport {\n\tuseForwardedRef,\n\tuseLayoutEffect,\n\tuseValidation,\n} from '../../utilities';\nimport { BaseInputProps } from './types';\n\nconst defaultProps: BaseInputProps = {\n\tvalidateOnDOMChange: true,\n};\n\n/**\n * A base `<input>` component. Adds a callback for the DOM's `change` event\n * (`onDOMChange`), which does not exist in React.\n */\nexport const BaseInput = React.forwardRef<HTMLInputElement, BaseInputProps>(({\n\terrors: errorsProp,\n\tvalidateOnChange,\n\tvalidateOnDOMChange = defaultProps.validateOnDOMChange,\n\tvalidators,\n\t// pull out maxLength because it prevents user input past the given\n\t// length, which is an anti-pattern according to our usage guidelines.\n\tmaxLength,\n\tmaxLengthRestrictsInput = false,\n\tonInput,\n\tonDOMChange,\n\tonValidate,\n\t...props\n}: BaseInputProps, ref): React.ReactElement => {\n\tconst [input, setInput] = useForwardedRef(ref);\n\tconst [errors, setErrors] = React.useState(errorsProp);\n\n\t// treat the prop version of `errors` as the source of truth\n\tReact.useEffect(() => setErrors(errorsProp), [errorsProp]);\n\n\tconst validator = useValidation(validators);\n\tconst validate = React.useCallback(({\n\t\tmax,\n\t\tmaxLength: elMaxLength,\n\t\tmin,\n\t\tminLength,\n\t\tpattern,\n\t\trequired,\n\t\tstep,\n\t\ttype,\n\t\tvalue,\n\t\tvalidity,\n\t}: HTMLInputElement) => {\n\t\tconst errs = validator({\n\t\t\tmax,\n\t\t\tmaxLength: maxLength || elMaxLength,\n\t\t\tmin,\n\t\t\tminLength,\n\t\t\tpattern,\n\t\t\trequired,\n\t\t\tstep,\n\t\t\ttype,\n\t\t\tvalue,\n\t\t\tvalidity,\n\t\t});\n\t\tif (onValidate) onValidate(errs);\n\t\tif (!errorsProp) setErrors(errs);\n\t}, [validator, onValidate, errorsProp, maxLength]);\n\n\t/**\n\t * Unlike `onChange`, `onInput` will trigger even when the user enters a bad\n\t * value, such as entering a letter in a `type=\"number\"` field, so run\n\t * validation here to catch the `ValidityState.badInput` errors.\n\t */\n\tconst inputHandler = (e: React.FormEvent<HTMLInputElement>): void => {\n\t\tif (onInput) onInput(e);\n\n\t\tif (validateOnChange) validate(e.currentTarget);\n\t};\n\n\tconst domChangeHandler = React.useCallback((e: Event): void => {\n\t\tif (onDOMChange) onDOMChange(e);\n\t\tif (validateOnDOMChange) validate(e.target as HTMLInputElement);\n\t}, [onDOMChange, validateOnDOMChange, validate]);\n\n\t// Reflect errors on the DOM's constraint validation API. This ensures that\n\t// browser tooltip text always matches the custom errors.\n\tReact.useEffect(() => {\n\t\tif (input && input.willValidate) {\n\t\t\tconst errString = (!errors || !errors.length) ? '' : errors.join('\\n');\n\t\t\tinput.setCustomValidity(errString);\n\t\t}\n\t}, [input, errors]);\n\n\t// Polyfill the DOM `change` listener\n\tuseLayoutEffect(() => {\n\t\tif (input && domChangeHandler) {\n\t\t\tinput.addEventListener('change', domChangeHandler);\n\t\t}\n\t\treturn (): void => {\n\t\t\tif (input && domChangeHandler) {\n\t\t\t\tinput.removeEventListener('change', domChangeHandler);\n\t\t\t}\n\t\t};\n\t}, [input, domChangeHandler]);\n\n\treturn (\n\t\t<input\n\t\t\tref={setInput}\n\t\t\tonInput={inputHandler}\n\t\t\tmaxLength={(maxLengthRestrictsInput) ? maxLength : undefined}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\n\nBaseInput.defaultProps = defaultProps;\n"],"names":["defaultProps","BaseInput","React","errorsProp","validateOnChange","validateOnDOMChange","validators","maxLength","maxLengthRestrictsInput","onInput","onDOMChange","onValidate","props","ref","input","setInput","useForwardedRef","errors","setErrors","validator","useValidation","validate","max","elMaxLength","min","minLength","pattern","required","step","type","value","validity","errs","inputHandler","e","domChangeHandler","errString","useLayoutEffect","jsx"],"mappings":"qIAQA,MAAAA,EAAA,CAAqC,oBAAA,EAErC,EAMOC,EAAAC,EAAA,WAAA,CAAA,CAAsE,OAAAC,EACpE,iBAAAC,EACR,oBAAAC,EAAAL,EAAA,oBACmC,WAAAM,EACnC,UAAAC,EAGA,wBAAAC,EAAA,GAC0B,QAAAC,EAC1B,YAAAC,EACA,WAAAC,EACA,GAAAC,CAED,EAAAC,IAAA,CACC,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAH,CAAA,EACA,CAAAI,EAAAC,CAAA,EAAAhB,EAAA,SAAAC,CAAA,EAGAD,EAAA,UAAA,IAAAgB,EAAAf,CAAA,EAAA,CAAAA,CAAA,CAAA,EAEA,MAAAgB,EAAAC,EAAAd,CAAA,EACAe,EAAAnB,EAAA,YAAA,CAAA,CAAoC,IAAAoB,EACnC,UAAAC,EACW,IAAAC,EACX,UAAAC,EACA,QAAAC,EACA,SAAAC,EACA,KAAAC,EACA,KAAAC,EACA,MAAAC,EACA,SAAAC,CACA,IAAA,CAEA,MAAAC,EAAAb,EAAA,CAAuB,IAAAG,EACtB,UAAAf,GAAAgB,EACwB,IAAAC,EACxB,UAAAC,EACA,QAAAC,EACA,SAAAC,EACA,KAAAC,EACA,KAAAC,EACA,MAAAC,EACA,SAAAC,CACA,CAAA,EAEDpB,GAAgBA,EAAAqB,CAAA,EAChB7B,GAAiBe,EAAAc,CAAA,CAAc,EAAA,CAAAb,EAAAR,EAAAR,EAAAI,CAAA,CAAA,EAQhC0B,EAAAC,GAAA,CACCzB,GAAaA,EAAAyB,CAAA,EAEb9B,GAAsBiB,EAAAa,EAAA,aAAA,CAAwB,EAG/CC,EAAAjC,EAAA,YAAAgC,GAAA,CACCxB,GAAiBA,EAAAwB,CAAA,EACjB7B,GAAyBgB,EAAAa,EAAA,MAAA,CAAqC,EAAA,CAAAxB,EAAAL,EAAAgB,CAAA,CAAA,EAK/D,OAAAnB,EAAA,UAAA,IAAA,CACC,GAAAY,GAAAA,EAAA,aAAA,CACC,MAAAsB,EAAA,CAAAnB,GAAA,CAAAA,EAAA,OAAA,GAAAA,EAAA,KAAA;AAAA,CAAA,EACAH,EAAA,kBAAAsB,CAAA,CAAiC,CAClC,EAAA,CAAAtB,EAAAG,CAAA,CAAA,EAIDoB,EAAA,KACCvB,GAAAqB,GACCrB,EAAA,iBAAA,SAAAqB,CAAA,EAED,IAAA,CACCrB,GAAAqB,GACCrB,EAAA,oBAAA,SAAAqB,CAAA,CACD,GACD,CAAArB,EAAAqB,CAAA,CAAA,EAGDG,EACC,QAAC,CAAA,IAAAvB,EACK,QAAAkB,EACI,UAAAzB,EAAAD,EAAA,OAC0C,GAAAK,CAC/C,CAAA,CAGP,CAAA,EAEAX,EAAA,aAAAD;;"}