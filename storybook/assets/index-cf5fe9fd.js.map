{"version":3,"file":"index-cf5fe9fd.js","sources":["../../../../packages/react/src/providers/ThemeProvider/index.tsx","../../../../packages/react/src/providers/AppProvider/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useMediaQuery } from '../../utilities/mediaQuery';\nimport { ThemeContext, ColorScheme } from '../../utilities/theme';\nimport { useLayoutEffect } from '../../utilities';\n\nconst getColorScheme = (\n\tscheme?: ColorScheme | 'inverse',\n\tparentScheme?: ColorScheme,\n): ColorScheme => {\n\tif (scheme === 'inverse') {\n\t\tif (parentScheme) {\n\t\t\treturn (parentScheme === 'light') ? 'dark' : 'light';\n\t\t}\n\t\tthrow new Error('colorScheme cannot be inverted on the root <ThemeProvider>.');\n\t}\n\treturn scheme || 'light';\n};\n\nexport type ThemeProviderProps = React.PropsWithChildren<{\n\t/**\n\t * The desired color scheme.\n\t *\n\t * - `\"light\"` – dark text on light background.\n\t * - `\"dark\"` – light text on dark background.\n\t * - `\"inverse\"` – the opposite color scheme from the parent `<ThemeProvider>`.\n\t * Cannot be used on the root `<ThemeProvider>`.\n\t * - `undefined` – use the user's preferred color scheme. If `ignoreOSColorScheme`\n\t * is `true`, `\"light\"` will be used as a fallback.\n\t *\n\t * Reference: [prefers-color-scheme media query](https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme).\n\t */\n\tcolorScheme?: ColorScheme | 'inverse';\n\t/** If set, the user's operating system color scheme setting will be ignored. */\n\tignoreOSColorScheme?: boolean;\n\t/**\n\t * A callback function that will trigger any time the `colorScheme` changes.\n\t * Use to update the color scheme store when it's changed by the user.\n\t */\n\tonColorSchemeChange?: (scheme: ColorScheme) => void;\n}>;\n\n/** A context provider for theming the Norton Design System. */\nexport const ThemeProvider: React.FunctionComponent<ThemeProviderProps> = ({\n\tcolorScheme: schemeProp,\n\tignoreOSColorScheme,\n\tonColorSchemeChange,\n\tchildren,\n}: ThemeProviderProps) => {\n\tconst parentContext = React.useContext(ThemeContext);\n\tconst parentColorScheme = (parentContext) ? parentContext.colorScheme : undefined;\n\tconst isRoot = parentContext === undefined;\n\n\tconst prefersDark = useMediaQuery('(prefers-color-scheme: dark)');\n\tconst preferredScheme = React.useMemo(() => ((prefersDark) ? 'dark' : 'light'), [prefersDark]);\n\tconst prevPreference = React.useRef(preferredScheme);\n\n\tconst [colorScheme, setColorScheme] = React.useState<ColorScheme>(\n\t\tgetColorScheme(\n\t\t\tschemeProp || ((ignoreOSColorScheme) ? undefined : preferredScheme),\n\t\t\tparentColorScheme,\n\t\t),\n\t);\n\n\t// root <ThemeProvider>: update colorScheme when the user changes their OS scheme\n\tReact.useEffect(() => {\n\t\tif (ignoreOSColorScheme || !isRoot) return;\n\t\tif (preferredScheme !== prevPreference.current) {\n\t\t\tsetColorScheme(preferredScheme);\n\t\t\tprevPreference.current = preferredScheme;\n\t\t}\n\t}, [isRoot, preferredScheme, ignoreOSColorScheme]);\n\n\t// root <ThemeProvider>: set data-color-scheme on :root\n\tuseLayoutEffect(() => {\n\t\tif (isRoot) {\n\t\t\tif (colorScheme) {\n\t\t\t\tdocument.documentElement.setAttribute('data-color-scheme', colorScheme);\n\t\t\t} else {\n\t\t\t\tdocument.documentElement.removeAttribute('data-color-scheme');\n\t\t\t}\n\t\t}\n\t}, [colorScheme, isRoot]);\n\n\t// child <ThemeProvider>: inverse when parent colorScheme changes\n\tReact.useEffect(() => {\n\t\tif (parentColorScheme && schemeProp === 'inverse') {\n\t\t\tsetColorScheme((parentColorScheme === 'dark') ? 'light' : 'dark');\n\t\t}\n\t}, [parentColorScheme, schemeProp]);\n\n\tReact.useEffect(() => {\n\t\tif (onColorSchemeChange) onColorSchemeChange(colorScheme);\n\t}, [colorScheme, onColorSchemeChange]);\n\n\tconst theme = React.useMemo(() => ({\n\t\tcolorScheme,\n\t\tsetColorScheme: (scheme: ColorScheme) => setColorScheme(scheme),\n\t}), [colorScheme]);\n\n\treturn (\n\t\t<ThemeContext.Provider value={theme}>\n\t\t\t{ (isRoot) ? children : <div data-color-scheme={colorScheme}>{ children }</div> }\n\t\t</ThemeContext.Provider>\n\t);\n};\n","import React from 'react';\nimport { LinkComponent, LinkContext } from '../../utilities/link';\nimport { ThemeProvider, ThemeProviderProps } from '../ThemeProvider';\n\nexport type AppProviderProps = ThemeProviderProps & {\n\t/**\n\t * When defined, the design system `<Link>` component will render with the\n\t * provided link component instead of its own render function.\n\t */\n\tlinkComponent?: LinkComponent;\n};\n\n/** The main application-level provider for design system configuration. */\nexport const AppProvider: React.FunctionComponent<AppProviderProps> = ({\n\tlinkComponent,\n\tcolorScheme,\n\tignoreOSColorScheme,\n\tonColorSchemeChange,\n\tchildren,\n}: AppProviderProps) => (\n\t<LinkContext.Provider value={linkComponent}>\n\t\t<ThemeProvider\n\t\t\tcolorScheme={colorScheme}\n\t\t\tignoreOSColorScheme={ignoreOSColorScheme}\n\t\t\tonColorSchemeChange={onColorSchemeChange}\n\t\t>\n\t\t\t{ children }\n\t\t</ThemeProvider>\n\t</LinkContext.Provider>\n);\n"],"names":["getColorScheme","scheme","parentScheme","ThemeProvider","schemeProp","ignoreOSColorScheme","onColorSchemeChange","children","parentContext","React","ThemeContext","parentColorScheme","isRoot","prefersDark","useMediaQuery","preferredScheme","prevPreference","colorScheme","setColorScheme","useLayoutEffect","theme","jsx","AppProvider","linkComponent","LinkContext"],"mappings":"4IAKA,MAAAA,EAAA,CAAAC,EAAAC,IAAA,CAIC,GAAAD,IAAA,UAAA,CACC,GAAAC,EACC,OAAAA,IAAA,QAAA,OAAA,QAED,MAAA,IAAA,MAAA,6DAAA,CAA6E,CAE9E,OAAAD,GAAA,OACD,EA0BOE,EAAA,CAAA,CAAoE,YAAAC,EAC7D,oBAAAC,EACb,oBAAAC,EACA,SAAAC,CAED,IAAA,CACC,MAAAC,EAAAC,EAAA,WAAAC,CAAA,EACAC,EAAAH,EAAAA,EAAA,YAAA,OACAI,EAAAJ,IAAA,OAEAK,EAAAC,EAAA,8BAAA,EACAC,EAAAN,EAAA,QAAA,IAAAI,EAAA,OAAA,QAAA,CAAAA,CAAA,CAAA,EACAG,EAAAP,EAAA,OAAAM,CAAA,EAEA,CAAAE,EAAAC,CAAA,EAAAT,EAAA,SAA4CT,EAC3CI,IAAAC,EAAA,OAAAU,GACoDJ,CACnD,CACD,EAIDF,EAAA,UAAA,IAAA,CACCJ,GAAA,CAAAO,GACAG,IAAAC,EAAA,UACCE,EAAAH,CAAA,EACAC,EAAA,QAAAD,EACD,EAAA,CAAAH,EAAAG,EAAAV,CAAA,CAAA,EAIDc,EAAA,IAAA,CACCP,IACCK,EACC,SAAA,gBAAA,aAAA,oBAAAA,CAAA,EAEA,SAAA,gBAAA,gBAAA,mBAAA,EAEF,EAAA,CAAAA,EAAAL,CAAA,CAAA,EAIDH,EAAA,UAAA,IAAA,CACCE,GAAAP,IAAA,WACCc,EAAAP,IAAA,OAAA,QAAA,MAAA,CACD,EAAA,CAAAA,EAAAP,CAAA,CAAA,EAGDK,EAAA,UAAA,IAAA,CACCH,GAAyBA,EAAAW,CAAA,CAA+B,EAAA,CAAAA,EAAAX,CAAA,CAAA,EAGzD,MAAAc,EAAAX,EAAA,QAAA,KAAA,CAAmC,YAAAQ,EAClC,eAAAhB,GAAAiB,EAAAjB,CAAA,CAC8D,GAAA,CAAAgB,CAAA,CAAA,EAG/D,OAAAI,EAAAX,EAAA,SAAA,CAAA,MAAAU,EAAA,SAAAR,EAAAL,EAAAc,EAAA,MAAA,CAAA,oBAAAJ,EAAA,SAAAV,CAAA,CAAA,CAAA,CAAA,CAKD,swCC3FO,MAAAe,EAAA,CAAA,CAAgE,cAAAC,EACtE,YAAAN,EACA,oBAAAZ,EACA,oBAAAC,EACA,SAAAC,CAED,IAAAc,EAAAG,EAAA,SAAA,CAAA,MAAAD,EAAA,SAAAF,EAEElB,EAAC,CAAA,YAAAc,EACA,oBAAAZ,EACA,oBAAAC,EACA,SAAAC,CAEE,CACH,CAAA,CAAA"}