import{j as s,a as P,c as E}from"./index-a1e85e29.js";import{R as t}from"./index-0cbcd92a.js";import{B as $}from"./IconButton-488799a2.js";import{F as j}from"./FieldInfo-942aaa1a.js";import{T as L}from"./Icon-04f449eb.js";import{b as H,c as M}from"./hook-0eff1646.js";const f=t.forwardRef(({baseName:l="nds-switch",labelClass:h,descriptionClass:m,checked:n=!1,tooltipProps:b,children:y,className:v,description:w,disabled:V,displayDefault:q=!0,label:o,tipped:r,id:g,labelId:I,descriptionId:N,onClick:d,onToggle:i,...u},x)=>{const[e,c]=t.useState(n),[R,F]=t.useState("OFF"),p=t.useRef(e),[k,C]=H(x),T=M(),a=g||T,_=I||`${a}-label`,A=N||`${a}-desc`;t.useEffect(()=>c(n),[n]),t.useEffect(()=>{F(e?"ON":"OFF"),i&&e!==p.current&&i(e),p.current=e},[e,i]);const B=D=>{d?d(D):c(!e)},O=r?s(L,{asLabel:!0,reference:k,...b,children:o}):s(j,{htmlFor:a,label:o,labelClass:h,labelId:_,description:w,descriptionClass:m,descriptionId:A}),S=r?u:{id:a,"aria-labelledby":`${a}-label`,...u};return P("div",{className:l,children:[O,s($,{"aria-checked":e?"true":"false",className:E(`${l}__control`,v),disabled:V,onClick:B,ref:C,role:"switch",...S,children:y||(q?R:void 0)})]})});try{f.displayName="Switch",f.__docgenInfo={description:"",displayName:"Switch",props:{label:{defaultValue:null,description:"The name of the Switch. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"Children are set inside the Switch control. Default is 'ON' when `checked`\nand `OFF` when unchecked. Disable default with `displayDefault={false}`.",name:"children",required:!1,type:{name:"ReactNode"}},tipped:{defaultValue:null,description:"Indicates that the label should be rendered as a tooltip.",name:"tipped",required:!1,type:{name:"boolean"}},checked:{defaultValue:null,description:`The switch's initial "on" state.`,name:"checked",required:!1,type:{name:"boolean"}},onToggle:{defaultValue:null,description:"A function to call when the switch is toggled.",name:"onToggle",required:!1,type:{name:"((checked: boolean) => void)"}},displayDefault:{defaultValue:{value:"true"},description:'Indicates whether the default control text should be used when no children\nare provided. "ON" when `checked=true` and "OFF" when `checked=false`.',name:"displayDefault",required:!1,type:{name:"boolean"}},baseName:{defaultValue:{value:"nds-switch"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string"}},tooltipProps:{defaultValue:null,description:`Tooltip props that should be included when the switch's label is rendered
as a tooltip.`,name:"tooltipProps",required:!1,type:{name:"Partial<TooltipCoreProps>"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string"}},color:{defaultValue:null,description:'The button\'s color, restricted to [design system colors](https://wwnorton.github.io/design-system/docs/color),\nexcluding `disabled` (prefer the `disabled` prop). Note that an `undefined`\ncolor will result in the "primary" color being used.',name:"color",required:!1,type:{name:"enum",value:[{value:'"base"'},{value:'"warning"'},{value:'"blue"'},{value:'"cyan"'},{value:'"gray"'},{value:'"green"'},{value:'"navy"'},{value:'"purple"'},{value:'"red"'},{value:'"teal"'},{value:'"yellow"'},{value:'"primary"'},{value:'"error"'},{value:'"success"'}]}},icon:{defaultValue:null,description:"An icon to include in the button.",name:"icon",required:!1,type:{name:"IconVariant | SVGIcon"}},iconClass:{defaultValue:null,description:"The className for the Button's icon, if one exists.",name:"iconClass",required:!1,type:{name:"string"}},variant:{defaultValue:null,description:"Button variant conveys the button's level of visual emphasis.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"solid"'},{value:'"outline"'},{value:'"ghost"'}]}},iconOnly:{defaultValue:null,description:"Indicates whether the button's contents should only be the icon. When\n`true`, the button's text is still required but will be used as the icon's\n`aria-label`. If no `icon` is specified, this prop has no effect.",name:"iconOnly",required:!1,type:{name:"boolean"}},iconRight:{defaultValue:null,description:`Indicates whether the icon should be to the right of the text. By default,
the icon is to the left of the text.`,name:"iconRight",required:!1,type:{name:"boolean"}},buttonRef:{defaultValue:null,description:"A reference to the inner `<button>` element.",name:"buttonRef",required:!1,type:{name:"Ref<HTMLButtonElement>"}},textClass:{defaultValue:null,description:"The className for the Button's text, which will be placed in a `<span>`",name:"textClass",required:!1,type:{name:"string"}},active:{defaultValue:null,description:"Whether the button is currently depressed. Polyfill for :active on keydown.",name:"active",required:!1,type:{name:"boolean"}},activeClass:{defaultValue:null,description:"A class to convey :active.",name:"activeClass",required:!1,type:{name:"string"}}}}}catch{}export{f as S};
//# sourceMappingURL=Switch-b221f64e.js.map
