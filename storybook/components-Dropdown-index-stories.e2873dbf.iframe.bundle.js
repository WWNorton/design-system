(self.webpackChunkwwnds=self.webpackChunkwwnds||[]).push([[91],{"./packages/react/src/components/Dropdown/index.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ComplexOptions:function(){return ComplexOptions},Default:function(){return Default},DifferentChildrenTypes:function(){return DifferentChildrenTypes},FlippingPlacement:function(){return FlippingPlacement},FullyControlled:function(){return FullyControlled},MatchButtonWidth:function(){return MatchButtonWidth},MatchListboxWidth:function(){return MatchListboxWidth},__namedExportsOrder:function(){return __namedExportsOrder}});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js");var react__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/react/index.js"),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js"),_Button__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("./packages/react/src/components/Button/index.ts"),___WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("./packages/react/src/components/Dropdown/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}__webpack_exports__.default={title:"Dropdown",component:___WEBPACK_IMPORTED_MODULE_16__.L};var options=["Americium","Berkelium","Bohrium","Californium","Copernicium","Curium","Darmstadtium","Dubnium","Einsteinium","Fermium","Flerovium","Hassium","Lawrencium","Livermorium","Meitnerium","Mendelevium","Moscovium","Neptunium","Nihonium","Nobelium","Oganesson","Plutonium","Roentgenium","Rutherfordium","Seaborgium","Tennessine"],defaultArgs={label:"Choose an element",children:options},DropdownTemplate=function DropdownTemplate(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L,Object.assign({},args))};DropdownTemplate.displayName="DropdownTemplate";var Default=DropdownTemplate.bind({});Default.args=defaultArgs;var MatchListboxWidth=DropdownTemplate.bind({});MatchListboxWidth.args=Object.assign({matchWidth:"listbox"},defaultArgs);var MatchButtonWidth=DropdownTemplate.bind({});MatchButtonWidth.args=Object.assign({matchWidth:"button",buttonWidth:256},defaultArgs);var FlippingPlacement=function FlippingPlacement(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("div",{className:"scrollbox",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L,Object.assign({},args))})};FlippingPlacement.displayName="FlippingPlacement",FlippingPlacement.args=Object.assign({description:"Open the dropdown and then scroll down to see it flip from top to bottom."},defaultArgs);var ComplexOptions=function ComplexOptions(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(___WEBPACK_IMPORTED_MODULE_16__.L,Object.assign({},args,{label:"Select your native fruit",matchWidth:"button",buttonWidth:"6rem",buttonClass:"dropdown__button fruits",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"apple",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("span",{role:"img","aria-label":"Apple",title:"Apple",children:"🍎"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"peach",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("span",{role:"img","aria-label":"Peach",title:"Peach",children:"🍑"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"pear",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("span",{role:"img","aria-label":"Pear",title:"Pear",children:"🍐"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"cherry",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("span",{role:"img","aria-label":"Cherry",title:"Cherry",children:"🍒"})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"orange",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("span",{role:"img","aria-label":"Orange",title:"Orange",children:"🍊"})})]}))};ComplexOptions.displayName="ComplexOptions";var DifferentChildrenTypes=function DifferentChildrenTypes(args){var _React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_13__.useState(),2),selected=_React$useState2[0],setSelected=_React$useState2[1];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(___WEBPACK_IMPORTED_MODULE_16__.L,Object.assign({},args,{label:"My dropdown",selected:selected,onChange:function changeHandler(_ref){var value=_ref.value;return setSelected(value)},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"foo",children:"Foo"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"bar",children:"Bar"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L.Option,{value:"baz"}),"Qux"]}))};DifferentChildrenTypes.displayName="DifferentChildrenTypes";var FullyControlled=function FullyControlled(args){var _React$useState4=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_13__.useState("Mendelevium"),2),selected=_React$useState4[0],setSelected=_React$useState4[1],_React$useState6=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_13__.useState("Select something"),2),buttonContents=_React$useState6[0],setButtonContents=_React$useState6[1],_React$useState8=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_13__.useState(!1),2),submitted=_React$useState8[0],setSubmitted=_React$useState8[1],_React$useState10=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_13__.useState(!1),2),isOpen=_React$useState10[0],setOpen=_React$useState10[1];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)("form",{onSubmit:function submit(e){(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_14__.action)("onSubmit")(selected),alert(selected+" submitted!"),setSubmitted(!0),e.preventDefault()},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(___WEBPACK_IMPORTED_MODULE_16__.L,Object.assign({},args,{label:"Choose an element",isOpen:isOpen,selected:selected,buttonContents:buttonContents,disabled:submitted,onChange:function changeHandler(_ref2){var value=_ref2.value,contents=_ref2.contents;setSelected(value),setButtonContents(contents||value)},onRequestClose:function closeHandler(){return setOpen(!1)},onRequestOpen:function openHandler(){return setOpen(!0)},children:options})),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_15__.z,{type:"submit",variant:"solid",disabled:submitted,style:{marginTop:"1rem"},children:"Submit"})]})};FullyControlled.displayName="FullyControlled",Default.parameters=Object.assign({storySource:{source:"(args: DropdownProps) => <Dropdown {...args} />"}},Default.parameters),MatchListboxWidth.parameters=Object.assign({storySource:{source:"(args: DropdownProps) => <Dropdown {...args} />"}},MatchListboxWidth.parameters),MatchButtonWidth.parameters=Object.assign({storySource:{source:"(args: DropdownProps) => <Dropdown {...args} />"}},MatchButtonWidth.parameters),FlippingPlacement.parameters=Object.assign({storySource:{source:'(args: DropdownProps) => (\n\t// cspell:ignore scrollbox\n\t<div className="scrollbox">\n\t\t<Dropdown {...args} />\n\t</div>\n)'}},FlippingPlacement.parameters),ComplexOptions.parameters=Object.assign({storySource:{source:'(args: DropdownProps) => (\n\t<Dropdown\n\t\t{...args}\n\t\tlabel="Select your native fruit"\n\t\tmatchWidth="button"\n\t\tbuttonWidth="6rem"\n\t\tbuttonClass="dropdown__button fruits"\n\t>\n\t\t<Dropdown.Option value="apple">\n\t\t\t<span role="img" aria-label="Apple" title="Apple">\n\t\t\t\t🍎\n\t\t\t</span>\n\t\t</Dropdown.Option>\n\t\t<Dropdown.Option value="peach">\n\t\t\t<span role="img" aria-label="Peach" title="Peach">\n\t\t\t\t🍑\n\t\t\t</span>\n\t\t</Dropdown.Option>\n\t\t<Dropdown.Option value="pear">\n\t\t\t<span role="img" aria-label="Pear" title="Pear">\n\t\t\t\t🍐\n\t\t\t</span>\n\t\t</Dropdown.Option>\n\t\t<Dropdown.Option value="cherry">\n\t\t\t<span role="img" aria-label="Cherry" title="Cherry">\n\t\t\t\t🍒\n\t\t\t</span>\n\t\t</Dropdown.Option>\n\t\t<Dropdown.Option value="orange">\n\t\t\t<span role="img" aria-label="Orange" title="Orange">\n\t\t\t\t🍊\n\t\t\t</span>\n\t\t</Dropdown.Option>\n\t</Dropdown>\n)'}},ComplexOptions.parameters),DifferentChildrenTypes.parameters=Object.assign({storySource:{source:'(args: DropdownProps) => {\n\tconst [selected, setSelected] = React.useState<React.ReactText>();\n\tconst changeHandler = ({ value }: { value: React.ReactText }): void => setSelected(value);\n\treturn (\n\t\t<Dropdown {...args} label="My dropdown" selected={selected} onChange={changeHandler}>\n\t\t\t{/* explicit value ("foo"); explicit rendered contents ("Foo"); recommended. */}\n\t\t\t<Dropdown.Option value="foo">Foo</Dropdown.Option>\n\t\t\t{/* implicit value ("Bar"); explicit rendered contents ("Bar") */}\n\t\t\t<Dropdown.Option value="bar">Bar</Dropdown.Option>\n\t\t\t{/* explicit value ("baz"); implicit rendered contents ("baz") */}\n\t\t\t<Dropdown.Option value="baz" />\n\t\t\t{/* implicit Option. value & contents both equal "Qux" */}\n\t\t\tQux\n\t\t</Dropdown>\n\t);\n}'}},DifferentChildrenTypes.parameters),FullyControlled.parameters=Object.assign({storySource:{source:"(args: DropdownProps) => {\n\tconst [selected, setSelected] = React.useState<React.ReactText>('Mendelevium');\n\tconst [buttonContents, setButtonContents] = React.useState<React.ReactNode>('Select something');\n\tconst [submitted, setSubmitted] = React.useState(false);\n\tconst [isOpen, setOpen] = React.useState(false);\n\tconst changeHandler: DropdownProps['onChange'] = ({ value, contents }): void => {\n\t\tsetSelected(value);\n\t\tsetButtonContents(contents || value);\n\t};\n\tconst closeHandler = (): void => setOpen(false);\n\tconst openHandler = (): void => setOpen(true);\n\tconst submit = (e: React.FormEvent<HTMLFormElement>): void => {\n\t\taction('onSubmit')(selected);\n\t\talert(`${selected} submitted!`); \n\t\tsetSubmitted(true);\n\t\te.preventDefault();\n\t};\n\treturn (\n\t\t<form onSubmit={submit}>\n\t\t\t<Dropdown\n\t\t\t\t{...args}\n\t\t\t\tlabel=\"Choose an element\"\n\t\t\t\tisOpen={isOpen}\n\t\t\t\tselected={selected}\n\t\t\t\tbuttonContents={buttonContents}\n\t\t\t\tdisabled={submitted}\n\t\t\t\tonChange={changeHandler}\n\t\t\t\tonRequestClose={closeHandler}\n\t\t\t\tonRequestOpen={openHandler}\n\t\t\t>\n\t\t\t\t{options}\n\t\t\t</Dropdown>\n\t\t\t<Button\n\t\t\t\ttype=\"submit\"\n\t\t\t\tvariant=\"solid\"\n\t\t\t\tdisabled={submitted}\n\t\t\t\tstyle={{ marginTop: '1rem' }}\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</Button>\n\t\t</form>\n\t);\n}"}},FullyControlled.parameters);var __namedExportsOrder=["Default","MatchListboxWidth","MatchButtonWidth","FlippingPlacement","ComplexOptions","DifferentChildrenTypes","FullyControlled"];try{Default.displayName="Default",Default.__docgenInfo={description:"",displayName:"Default",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#Default"]={docgenInfo:Default.__docgenInfo,name:"Default",path:"packages/react/src/components/Dropdown/index.stories.tsx#Default"})}catch(__react_docgen_typescript_loader_error){}try{MatchListboxWidth.displayName="MatchListboxWidth",MatchListboxWidth.__docgenInfo={description:"",displayName:"MatchListboxWidth",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#MatchListboxWidth"]={docgenInfo:MatchListboxWidth.__docgenInfo,name:"MatchListboxWidth",path:"packages/react/src/components/Dropdown/index.stories.tsx#MatchListboxWidth"})}catch(__react_docgen_typescript_loader_error){}try{MatchButtonWidth.displayName="MatchButtonWidth",MatchButtonWidth.__docgenInfo={description:"",displayName:"MatchButtonWidth",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#MatchButtonWidth"]={docgenInfo:MatchButtonWidth.__docgenInfo,name:"MatchButtonWidth",path:"packages/react/src/components/Dropdown/index.stories.tsx#MatchButtonWidth"})}catch(__react_docgen_typescript_loader_error){}try{FlippingPlacement.displayName="FlippingPlacement",FlippingPlacement.__docgenInfo={description:"",displayName:"FlippingPlacement",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#FlippingPlacement"]={docgenInfo:FlippingPlacement.__docgenInfo,name:"FlippingPlacement",path:"packages/react/src/components/Dropdown/index.stories.tsx#FlippingPlacement"})}catch(__react_docgen_typescript_loader_error){}try{ComplexOptions.displayName="ComplexOptions",ComplexOptions.__docgenInfo={description:"",displayName:"ComplexOptions",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#ComplexOptions"]={docgenInfo:ComplexOptions.__docgenInfo,name:"ComplexOptions",path:"packages/react/src/components/Dropdown/index.stories.tsx#ComplexOptions"})}catch(__react_docgen_typescript_loader_error){}try{DifferentChildrenTypes.displayName="DifferentChildrenTypes",DifferentChildrenTypes.__docgenInfo={description:"",displayName:"DifferentChildrenTypes",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#DifferentChildrenTypes"]={docgenInfo:DifferentChildrenTypes.__docgenInfo,name:"DifferentChildrenTypes",path:"packages/react/src/components/Dropdown/index.stories.tsx#DifferentChildrenTypes"})}catch(__react_docgen_typescript_loader_error){}try{FullyControlled.displayName="FullyControlled",FullyControlled.__docgenInfo={description:"",displayName:"FullyControlled",props:{label:{defaultValue:null,description:"The name of the dropdown. Required.",name:"label",required:!0,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The options for the listbox. Each will be rendered inside an `Option`\ncomponent. When specifying an option as an `OptionProps` object,\nthe option's value must be the `OptionProps['children']`.",name:"children",required:!0,type:{name:"ReactChild[]"}},sort:{defaultValue:null,description:"Sort options by value. `undefined` will leave the options unsorted.",name:"sort",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"ascending"'},{value:'"descending"'}]}},selected:{defaultValue:null,description:"A list of selected options.",name:"selected",required:!1,type:{name:"ReactText | undefined"}},buttonContents:{defaultValue:null,description:"The contents of the button. Default is 'Select' on load and then it will\nmatch the contents of the currently selected option if no `onChange`\ncallback is provided.",name:"buttonContents",required:!1,type:{name:"ReactNode"}},isOpen:{defaultValue:null,description:"Indicates whether the listbox is open.",name:"isOpen",required:!1,type:{name:"boolean | undefined"}},closeOnExternalClick:{defaultValue:null,description:"Indicates whether clicking outside the listbox should close the listbox.",name:"closeOnExternalClick",required:!1,type:{name:"boolean | undefined"}},closeOnDocumentEscape:{defaultValue:null,description:"Indicates whether the dropdown should be closed on `Escape`.",name:"closeOnDocumentEscape",required:!1,type:{name:"boolean | undefined"}},matchWidth:{defaultValue:null,description:"Indicates that the button and listbox should match widths.\n* `button` - the listbox will match the width of the button.\n* `listbox` - the button will match the width of the listbox.\n* `undefined` - no width matching should be done.",name:"matchWidth",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"button"'},{value:'"listbox"'}]}},buttonWidth:{defaultValue:null,description:'Set the width of the button. Use when `matchWidth="button"` and the\nbutton\'s width is not set with CSS.',name:"buttonWidth",required:!1,type:{name:"string | number | undefined"}},name:{defaultValue:null,description:"The `name` attribute for the internal `<select>`.",name:"name",required:!1,type:{name:"string | undefined"}},baseName:{defaultValue:null,description:'The base class name according to BEM conventions. Default is "dropdown".',name:"baseName",required:!1,type:{name:"string | undefined"}},labelClass:{defaultValue:null,description:"The class name for the label.",name:"labelClass",required:!1,type:{name:"string | undefined"}},buttonClass:{defaultValue:null,description:"The class name for the button.",name:"buttonClass",required:!1,type:{name:"string | undefined"}},listboxClass:{defaultValue:null,description:"The class name for the listbox.",name:"listboxClass",required:!1,type:{name:"string | undefined"}},optionClass:{defaultValue:null,description:"The class name for all listbox options.",name:"optionClass",required:!1,type:{name:"string | undefined"}},popperClass:{defaultValue:null,description:"The class name for the popper.",name:"popperClass",required:!1,type:{name:"string | undefined"}},buttonId:{defaultValue:null,description:"An id for the button.",name:"buttonId",required:!1,type:{name:"string | undefined"}},listboxId:{defaultValue:null,description:"An id for the listbox.",name:"listboxId",required:!1,type:{name:"string | undefined"}},onRequestClose:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to close its\nlistbox. This will occur under the following conditions:\n* The user clicks outside of the listbox and `closeOnExternalClick` is\n`true`.\n* The user presses `Escape` and `closeOnDocumentEscape` is `true`.\n* The user presses `Tab` while the listbox is open.",name:"onRequestClose",required:!1,type:{name:"(() => void) | undefined"}},onRequestOpen:{defaultValue:null,description:"Callback function that is called when the dropdown attempts to open its\nlistbox. This will occur under the following conditions:\n* The user clicks the dropdown button (default: `.dropdown__button`).\n* The user presses `ArrowUp` or `ArrowDown` while on the dropdown button.",name:"onRequestOpen",required:!1,type:{name:"(() => void) | undefined"}},onChange:{defaultValue:null,description:"Callback function that is called when an option is selected. This will\noccur under the following conditions:\n* When the user clicks an option.\n* When the user presses `Enter` on the currently focused option.\n* When the user releases the space bar on the currently focused option.",name:"onChange",required:!1,type:{name:"((payload: { value: ReactText; contents: ReactNode; }) => void) | undefined"}},autofocus:{defaultValue:null,description:"If set, the focusable dropdown option should be focused when it is rendered.",name:"autofocus",required:!1,type:{name:"boolean | undefined"}},selectedMarker:{defaultValue:null,description:"Set the visual indicator for the selected option.",name:"selectedMarker",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"check"'},{value:'"dot"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},transition:{defaultValue:null,description:"The animation transition class applied to the popper as it enters or exits.\nA single name can be provided and it will be suffixed for each stage.\n\nFor example, `transition=\"fade\"` applies:\n\n- `fade-enter`\n- `fade-enter-active`\n- `fade-exit`\n- `fade-exit-active`\n- `fade-appear`\n- `fade-appear-active`\n\nEach individual stage can also be specified independently:\n\n```js\ntransition={{\n\tappear: 'my-appear',\n\tappearActive: 'my-appear-active',\n\tappearDone: 'my-appear-done',\n\tenter: 'my-enter',\n\tenterActive: 'my-enter-active',\n\tenterDone: 'my-enter-done',\n\texit: 'my-exit',\n\texitActive: 'my-exit-active',\n\texitDone: 'my-exit-done'\n}}\n```\n\nReference: [react-transition-group's CSSTransition](http://reactcommunity.org/react-transition-group/css-transition).",name:"transition",required:!1,type:{name:"string | CSSTransitionClassNames | undefined"}},distance:{defaultValue:null,description:"The [offset distance](https://popper.js.org/docs/v2/modifiers/offset/#distance-1)\n(in pixels) from the reference. Will only be used if `offset` is undefined.",name:"distance",required:!1,type:{name:"number | undefined"}},placement:{defaultValue:null,description:"The [Popper.js placement option](https://popper.js.org/docs/v2/constructors/#placement).",name:"placement",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"auto"'},{value:'"auto-start"'},{value:'"auto-end"'},{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},modifiers:{defaultValue:null,description:"The [Popper.js modifiers option](https://popper.js.org/docs/v2/constructors/#modifiers).",name:"modifiers",required:!1,type:{name:"Partial<Modifier<any, any>>[] | undefined"}},strategy:{defaultValue:null,description:"The [Popper.js strategy option](https://popper.js.org/docs/v2/constructors/#strategy).",name:"strategy",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"absolute"'},{value:'"fixed"'}]}},onFirstUpdate:{defaultValue:null,description:"The [Popper.js onFirstUpdate option](https://popper.js.org/docs/v2/constructors/#onFirstUpdate).",name:"onFirstUpdate",required:!1,type:{name:"((arg0: Partial<State>) => void) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Dropdown/index.stories.tsx#FullyControlled"]={docgenInfo:FullyControlled.__docgenInfo,name:"FullyControlled",path:"packages/react/src/components/Dropdown/index.stories.tsx#FullyControlled"})}catch(__react_docgen_typescript_loader_error){}},"./packages/react/src/components/Field/FieldAddon.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{k:function(){return FieldAddon}});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),FieldAddon=function FieldAddon(_ref){var children=_ref.children,_ref$baseName=_ref.baseName,baseName=void 0===_ref$baseName?"nds-field":_ref$baseName,_ref$className=_ref.className,className=void 0===_ref$className?baseName+"__addon":_ref$className;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("span",{className:className,children:children})};FieldAddon.displayName="FieldAddon";try{FieldAddon.displayName="FieldAddon",FieldAddon.__docgenInfo={description:"",displayName:"FieldAddon",props:{baseName:{defaultValue:{value:"nds-field"},description:"",name:"baseName",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Field/FieldAddon.tsx#FieldAddon"]={docgenInfo:FieldAddon.__docgenInfo,name:"FieldAddon",path:"packages/react/src/components/Field/FieldAddon.tsx#FieldAddon"})}catch(__react_docgen_typescript_loader_error){}},"./packages/react/src/components/Field/FieldFeedback.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{S:function(){return FieldFeedback}});__webpack_require__("./node_modules/core-js/modules/es.array.map.js");var react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js"),FieldFeedback=function FieldFeedback(_ref){var errors=_ref.errors,_ref$liveErrors=_ref.liveErrors,liveErrors=void 0===_ref$liveErrors||_ref$liveErrors,_ref$baseName=_ref.baseName,baseName=void 0===_ref$baseName?"nds-field":_ref$baseName,_ref$errorsClass=_ref.errorsClass,errorsClass=void 0===_ref$errorsClass?baseName+"__errors":_ref$errorsClass,errorsId=_ref.errorsId,children=_ref.children,_ref$className=_ref.className,className=void 0===_ref$className?baseName+"__feedback":_ref$className,id=_ref.id,Errors=react__WEBPACK_IMPORTED_MODULE_1__.useMemo((function(){return errors&&errors.length?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("ul",{className:errorsClass,id:errorsId,"aria-label":"Errors","aria-live":liveErrors?"assertive":void 0,"aria-atomic":liveErrors?"true":void 0,children:errors.map((function(err){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("li",{children:err},err)}))}):null}),[errors,errorsClass,errorsId,liveErrors]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div",{id:id,className:className,children:[Errors,children]})};FieldFeedback.displayName="FieldFeedback";try{FieldFeedback.displayName="FieldFeedback",FieldFeedback.__docgenInfo={description:"A container for field feedback. Use to display content based on field input.",displayName:"FieldFeedback",props:{liveErrors:{defaultValue:{value:"true"},description:"Indicates whether errors should be a live region. Default is `true`. Only\nset to `false` if you intend to communicate errors to screen reader users\nthrough some other mechanism.",name:"liveErrors",required:!1,type:{name:"boolean | undefined"}},baseName:{defaultValue:{value:"nds-field"},description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:{value:"`${baseName}__errors`"},description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Field/FieldFeedback.tsx#FieldFeedback"]={docgenInfo:FieldFeedback.__docgenInfo,name:"FieldFeedback",path:"packages/react/src/components/Field/FieldFeedback.tsx#FieldFeedback"})}catch(__react_docgen_typescript_loader_error){}},"./packages/react/src/components/Field/FieldInfo.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{y:function(){return FieldInfo}});__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var react__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/index.js"),classnames__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/classnames/index.js"),classnames__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_4__),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js"),FieldInfo=function FieldInfo(_ref){var label=_ref.label,labelTag=_ref.labelTag,indicator=_ref.indicator,description=_ref.description,_ref$baseName=_ref.baseName,baseName=void 0===_ref$baseName?"nds-field":_ref$baseName,_ref$labelClass=_ref.labelClass,labelClass=void 0===_ref$labelClass?baseName+"__label":_ref$labelClass,_ref$indicatorClass=_ref.indicatorClass,indicatorClass=void 0===_ref$indicatorClass?baseName+"__indicator":_ref$indicatorClass,_ref$descriptionClass=_ref.descriptionClass,descriptionClass=void 0===_ref$descriptionClass?baseName+"__desc":_ref$descriptionClass,labelId=_ref.labelId,descriptionId=_ref.descriptionId,children=_ref.children,className=_ref.className,htmlFor=_ref.htmlFor,id=_ref.id,Indicator=react__WEBPACK_IMPORTED_MODULE_3__.useMemo((function(){return indicator?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[" ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("span",{className:indicatorClass,children:["(",indicator,")"]})]}):null}),[indicator,indicatorClass]),Label=react__WEBPACK_IMPORTED_MODULE_3__.useMemo((function(){var labelProps={className:labelClass,htmlFor:htmlFor,id:labelId,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[label,Indicator]})},LabelTag=htmlFor?"label":labelTag||"div";return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(LabelTag,Object.assign({},labelProps))}),[label,labelClass,htmlFor,labelId,Indicator,labelTag]),Description=react__WEBPACK_IMPORTED_MODULE_3__.useMemo((function(){return"legend"===labelTag||description?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)("div",{className:descriptionClass,id:descriptionId,children:description}):null}),[labelTag,description,descriptionClass,descriptionId]);return"legend"===labelTag?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.Fragment,{children:[Label,Description,children]}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)("div",{className:classnames__WEBPACK_IMPORTED_MODULE_4___default()(baseName+"__info",className),id:id,children:[Label,Description,children]})};FieldInfo.displayName="FieldInfo";try{FieldInfo.displayName="FieldInfo",FieldInfo.__docgenInfo={description:"Information about a related field. Will always contain a label for the field\nand can contain an optional description. Make sure to include a valid `htmlFor`\nprop when used with form controls such as an `<input>`.",displayName:"FieldInfo",props:{baseName:{defaultValue:{value:"nds-field"},description:"",name:"baseName",required:!1,type:{name:"string | undefined"}},label:{defaultValue:null,description:"The name of the field. Required.",name:"label",required:!0,type:{name:"ReactNode"}},indicator:{defaultValue:null,description:'An additional label indicator, displayed as a parenthetical inside the\nlabel container. For instance, `indicator="required"` would result in\nlabel text content of `"{label} (required)"`.',name:"indicator",required:!1,type:{name:"string | null | undefined"}},indicatorClass:{defaultValue:{value:"`${baseName}__indicator`"},description:"A className for the indicator `<span>`.",name:"indicatorClass",required:!1,type:{name:"string | undefined"}},labelTag:{defaultValue:null,description:"The HTML element name for the label. If `htmlFor` is included, this will\nautomatically be `label`. If undefined, this will be `div`.",name:"labelTag",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"div"'},{value:'"label"'},{value:'"legend"'}]}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:{value:"`${baseName}__label`"},description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:{value:"`${baseName}__desc`"},description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/Field/FieldInfo.tsx#FieldInfo"]={docgenInfo:FieldInfo.__docgenInfo,name:"FieldInfo",path:"packages/react/src/components/Field/FieldInfo.tsx#FieldInfo"})}catch(__react_docgen_typescript_loader_error){}},"./packages/react/src/components/Field/index.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,{FieldAddon:function(){return _FieldAddon__WEBPACK_IMPORTED_MODULE_0__.k},FieldFeedback:function(){return _FieldFeedback__WEBPACK_IMPORTED_MODULE_1__.S},FieldInfo:function(){return _FieldInfo__WEBPACK_IMPORTED_MODULE_2__.y}});var _FieldAddon__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/react/src/components/Field/FieldAddon.tsx"),_FieldFeedback__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./packages/react/src/components/Field/FieldFeedback.tsx"),_FieldInfo__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/react/src/components/Field/FieldInfo.tsx"),_types__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/react/src/components/Field/types.ts");__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_3__,"Icon")&&__webpack_require__.d(__webpack_exports__,{Icon:function(){return _types__WEBPACK_IMPORTED_MODULE_3__.Icon}}),__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_3__,"Listbox")&&__webpack_require__.d(__webpack_exports__,{Listbox:function(){return _types__WEBPACK_IMPORTED_MODULE_3__.Listbox}}),__webpack_require__.o(_types__WEBPACK_IMPORTED_MODULE_3__,"Option")&&__webpack_require__.d(__webpack_exports__,{Option:function(){return _types__WEBPACK_IMPORTED_MODULE_3__.Option}})},"./packages/react/src/components/Field/types.ts":function(){}}]);