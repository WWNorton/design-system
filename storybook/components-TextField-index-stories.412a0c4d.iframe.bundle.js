"use strict";(self.webpackChunkwwnds=self.webpackChunkwwnds||[]).push([[454],{"./packages/react/src/components/TextField/index.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomValidation:function(){return CustomValidation},Default:function(){return Default},Email:function(){return Email},ExampleLoginForm:function(){return ExampleLoginForm},Number:function(){return Number},Password:function(){return Password},WithAddonAfter:function(){return WithAddonAfter},WithAddonBefore:function(){return WithAddonBefore},WithMaxLength:function(){return WithMaxLength},__namedExportsOrder:function(){return __namedExportsOrder}});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.string.starts-with.js"),__webpack_require__("./node_modules/core-js/modules/es.string.ends-with.js");var react__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("./node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_19__=__webpack_require__("./packages/react/src/components/TextField/index.ts"),_Button__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__("./packages/react/src/components/Button/index.ts"),_Icon__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("./packages/react/src/components/Icon/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_excluded=["minLength","maxLength"],_excluded2=["firstName","lastName"];function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}__webpack_exports__.default={title:"Text Field",component:___WEBPACK_IMPORTED_MODULE_19__.n,argTypes:{maxLength:{control:{type:"range",min:5,step:1}},maxLengthRestrictsInput:{control:{type:"boolean"}},counterStart:{control:{type:"range",min:5,step:1}},validateOnChange:{control:{type:"boolean"}}}};var TextFieldTemplate=function TextFieldTemplate(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(___WEBPACK_IMPORTED_MODULE_19__.n,Object.assign({},args))};TextFieldTemplate.displayName="TextFieldTemplate";var Default=TextFieldTemplate.bind({});Default.args={children:"Default Text Field",description:'The default Text Field has a type of "text".'};var Email=TextFieldTemplate.bind({});Email.args={children:"Email",description:"Email fields show an error if the value is not an email address.",type:"email",validateOnChange:!0};var Number=TextFieldTemplate.bind({});Number.args={children:"Number",description:"Email fields can be incremented with arrow keys and show an error if the value is not a number.",type:"number",validateOnChange:!0};var Password=TextFieldTemplate.bind({});Password.args={children:"Password",description:"Password fields obscure their value.",type:"password",validateOnChange:!0};var WithMaxLength=TextFieldTemplate.bind({});WithMaxLength.args={maxLengthRestrictsInput:!1,maxLength:10,counterStart:8,validateOnChange:!0,children:"TextField with max length",description:"Control the maximum length and optionally prevent input after that number of characters."};var WithAddonBefore=TextFieldTemplate.bind({});WithAddonBefore.args={addonBefore:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_20__.z,{variant:"ghost",children:"Do something"}),children:"Text field with a button addon before the input"};var WithAddonAfter=TextFieldTemplate.bind({});WithAddonAfter.args={addonAfter:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_20__.z,{variant:"outline",children:"Do something else"}),children:"Text field with a button addon after the input"};var show={children:"Show",icon:{d:"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"}},hide={children:"Hide",icon:{d:"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"}},invalid={variant:"close",color:"var(--nds-error-color)","aria-label":"Invalid"},valid={variant:"check",color:"var(--nds-success-color)","aria-label":"Valid"},neutralUser={variant:"account"},neutralPW={variant:"info"},ExampleLoginForm=function ExampleLoginForm(_ref){var minLength=_ref.minLength,maxLength=_ref.maxLength,args=_objectWithoutProperties(_ref,_excluded),_React$useState2=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState("password"),2),type=_React$useState2[0],setType=_React$useState2[1],_React$useState4=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(null),2),userField=_React$useState4[0],setUserField=_React$useState4[1],_React$useState6=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(null),2),pwField=_React$useState6[0],setPwField=_React$useState6[1],_React$useState8=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(""),2),username=_React$useState8[0],setUsername=_React$useState8[1],_React$useState10=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(""),2),password=_React$useState10[0],setPassword=_React$useState10[1],_React$useState12=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(show),2),buttonProps=_React$useState12[0],setButtonProps=_React$useState12[1],_React$useState14=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(),2),userErrors=_React$useState14[0],setUserErrors=_React$useState14[1],_React$useState16=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(),2),pwErrors=_React$useState16[0],setPwErrors=_React$useState16[1],_React$useState18=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(!1),2),isSame=_React$useState18[0],setIsSame=_React$useState18[1],_React$useState20=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(neutralPW),2),pwIcon=_React$useState20[0],setPWIcon=_React$useState20[1],errors=react__WEBPACK_IMPORTED_MODULE_18__.useCallback((function(errs){var sameError="Username and password cannot be the same.";return isSame?errs?[].concat(_toConsumableArray(errs),[sameError]):[sameError]:errs||[]}),[isSame]);react__WEBPACK_IMPORTED_MODULE_18__.useEffect((function(){(username||password)&&setIsSame(username===password)}),[username,password]),react__WEBPACK_IMPORTED_MODULE_18__.useEffect((function(){setPWIcon(pwErrors?pwErrors.length?invalid:valid:neutralPW)}),[pwErrors]),react__WEBPACK_IMPORTED_MODULE_18__.useEffect((function(){setButtonProps("password"===type?show:hide)}),[type]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("form",{className:"form",onSubmit:function submitHandler(e){e.preventDefault()},onChange:function changeHandler(e){var val=e.target.value;switch(e.target){case userField:setUsername(val);break;case pwField:setPassword(val)}},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(___WEBPACK_IMPORTED_MODULE_19__.n,Object.assign({type:"text",value:username,errors:errors(userErrors),onValidate:setUserErrors,validateOnChange:!0,required:!0,addonBefore:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_Icon__WEBPACK_IMPORTED_MODULE_21__.JO,Object.assign({},neutralUser)),ref:setUserField},args,{children:"Username"})),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(___WEBPACK_IMPORTED_MODULE_19__.n,Object.assign({type:type,value:password,errors:errors(pwErrors),required:!0,minLength:minLength,maxLength:maxLength,onValidate:setPwErrors,validateOnChange:!0,addonBefore:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_Icon__WEBPACK_IMPORTED_MODULE_21__.JO,Object.assign({className:"addon-icon"},pwIcon)),addonAfter:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_20__.z,Object.assign({iconOnly:!0,variant:"ghost",onClick:function toggle(){setType("password"===type?"text":"password")}},buttonProps)),ref:setPwField},args,{children:"Password"})),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_20__.z,{variant:"solid",type:"submit",children:"Submit"})]})};ExampleLoginForm.displayName="ExampleLoginForm",ExampleLoginForm.args={minLength:8,maxLength:32};var CustomValidation=function CustomValidation(_ref3){var firstName=_ref3.firstName,lastName=_ref3.lastName,args=_objectWithoutProperties(_ref3,_excluded2),_React$useState22=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(""),2),value=_React$useState22[0],setValue=_React$useState22[1],_React$useState24=_slicedToArray(react__WEBPACK_IMPORTED_MODULE_18__.useState(),2),errors=_React$useState24[0],setErrors=_React$useState24[1],feedback=react__WEBPACK_IMPORTED_MODULE_18__.useMemo((function(){if(errors&&!errors.length)return"Well done, "+value+"!"}),[errors,value]);return react__WEBPACK_IMPORTED_MODULE_18__.useEffect((function(){if(value){var newErrors=[];value.startsWith(firstName)||newErrors.push('Must begin with "'+firstName+'".'),value.endsWith(lastName)||newErrors.push('Must end with "'+lastName+'".'),setErrors(newErrors)}}),[value,firstName,lastName]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(___WEBPACK_IMPORTED_MODULE_19__.n,Object.assign({value:value,errors:errors,onChange:function changeHandler(e){return setValue(e.target.value)},description:"Change the required name in the Storybook controls below.",feedback:feedback,required:!0},args,{children:"Full name"}))};CustomValidation.displayName="CustomValidation",CustomValidation.args={firstName:"Jane",lastName:"Doe"},Default.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},Default.parameters),Email.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},Email.parameters),Number.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},Number.parameters),Password.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},Password.parameters),WithMaxLength.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},WithMaxLength.parameters),WithAddonBefore.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},WithAddonBefore.parameters),WithAddonAfter.parameters=Object.assign({storySource:{source:"(args: TextFieldProps) => <TextField {...args} />"}},WithAddonAfter.parameters),ExampleLoginForm.parameters=Object.assign({storySource:{source:"({ minLength, maxLength, ...args }: TextFieldProps) => {\n\tconst [type, setType] = React.useState<TextFieldProps['type']>('password');\n\tconst [userField, setUserField] = React.useState<HTMLInputElement | null>(null);\n\tconst [pwField, setPwField] = React.useState<HTMLInputElement | null>(null);\n\tconst [username, setUsername] = React.useState('');\n\tconst [password, setPassword] = React.useState('');\n\tconst [buttonProps, setButtonProps] = React.useState<ButtonProps>(show);\n\tconst [userErrors, setUserErrors] = React.useState<string[]>();\n\tconst [pwErrors, setPwErrors] = React.useState<string[]>();\n\tconst [isSame, setIsSame] = React.useState(false);\n\tconst [pwIcon, setPWIcon] = React.useState<IconProps>(neutralPW);\n\n\tconst toggle = (): void => {\n\t\tsetType((type === 'password') ? 'text' : 'password');\n\t};\n\n\tconst errors = React.useCallback((errs?: string[]) => {\n\t\tconst sameError = 'Username and password cannot be the same.';\n\t\tif (isSame) return (errs) ? [...errs, sameError] : [sameError];\n\t\treturn errs || [];\n\t}, [isSame]);\n\n\tReact.useEffect(() => {\n\t\tif (username || password) {\n\t\t\tsetIsSame(username === password);\n\t\t}\n\t}, [username, password]);\n\n\tReact.useEffect(() => {\n\t\tif (pwErrors) {\n\t\t\tsetPWIcon((pwErrors.length) ? invalid : valid);\n\t\t} else {\n\t\t\tsetPWIcon(neutralPW);\n\t\t}\n\t}, [pwErrors]);\n\n\tReact.useEffect(() => {\n\t\tsetButtonProps((type === 'password') ? show : hide);\n\t}, [type]);\n\n\tconst submitHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n\t\te.preventDefault();\n\t};\n\n\tconst changeHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n\t\tconst { value: val } = e.target as HTMLInputElement;\n\t\tswitch (e.target) {\n\t\t\tcase userField:\n\t\t\t\tsetUsername(val);\n\t\t\t\tbreak;\n\t\t\tcase pwField:\n\t\t\t\tsetPassword(val);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t};\n\n\treturn (\n\t\t<form className=\"form\" onSubmit={submitHandler} onChange={changeHandler}>\n\t\t\t<TextField\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={username}\n\t\t\t\terrors={errors(userErrors)}\n\t\t\t\tonValidate={setUserErrors}\n\t\t\t\tvalidateOnChange\n\t\t\t\trequired\n\t\t\t\taddonBefore={<Icon {...neutralUser} />}\n\t\t\t\tref={setUserField}\n\t\t\t\t{...args}\n\t\t\t>\n\t\t\t\tUsername\n\t\t\t</TextField>\n\t\t\t<TextField\n\t\t\t\ttype={type}\n\t\t\t\tvalue={password}\n\t\t\t\terrors={errors(pwErrors)}\n\t\t\t\trequired\n\t\t\t\tminLength={minLength}\n\t\t\t\tmaxLength={maxLength}\n\t\t\t\tonValidate={setPwErrors}\n\t\t\t\tvalidateOnChange\n\t\t\t\taddonBefore={<Icon className=\"addon-icon\" {...pwIcon} />}\n\t\t\t\taddonAfter={(\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticonOnly\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tonClick={toggle}\n\t\t\t\t\t\t{...buttonProps}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\tref={setPwField}\n\t\t\t\t{...args}\n\t\t\t>\n\t\t\t\tPassword\n\t\t\t</TextField>\n\t\t\t<Button variant=\"solid\" type=\"submit\">Submit</Button>\n\t\t</form>\n\t);\n}"}},ExampleLoginForm.parameters),CustomValidation.parameters=Object.assign({storySource:{source:'({ firstName, lastName, ...args }: CustomValidationProps) => {\n\tconst [value, setValue] = React.useState(\'\');\n\tconst [errors, setErrors] = React.useState<string[]>();\n\n\tconst changeHandler = (e): void => setValue(e.target.value);\n\n\tconst feedback = React.useMemo(() => {\n\t\tif (errors && !errors.length) {\n\t\t\treturn `Well done, ${value}!`;\n\t\t}\n\t\treturn undefined;\n\t}, [errors, value]);\n\n\tReact.useEffect(() => {\n\t\tif (value) {\n\t\t\tconst newErrors: string[] = [];\n\t\t\tif (!value.startsWith(firstName)) newErrors.push(`Must begin with "${firstName}".`);\n\t\t\tif (!value.endsWith(lastName)) newErrors.push(`Must end with "${lastName}".`);\n\t\t\tsetErrors(newErrors);\n\t\t}\n\t}, [value, firstName, lastName]);\n\n\treturn (\n\t\t<TextField\n\t\t\tvalue={value}\n\t\t\terrors={errors}\n\t\t\tonChange={changeHandler}\n\t\t\tdescription="Change the required name in the Storybook controls below."\n\t\t\tfeedback={feedback}\n\t\t\trequired\n\t\t\t{...args}\n\t\t>\n\t\t\tFull name\n\t\t</TextField>\n\t);\n}'}},CustomValidation.parameters);var __namedExportsOrder=["Default","Email","Number","Password","WithMaxLength","WithAddonBefore","WithAddonAfter","ExampleLoginForm","CustomValidation"];try{Default.displayName="Default",Default.__docgenInfo={description:"",displayName:"Default",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#Default"]={docgenInfo:Default.__docgenInfo,name:"Default",path:"packages/react/src/components/TextField/index.stories.tsx#Default"})}catch(__react_docgen_typescript_loader_error){}try{Email.displayName="Email",Email.__docgenInfo={description:"",displayName:"Email",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#Email"]={docgenInfo:Email.__docgenInfo,name:"Email",path:"packages/react/src/components/TextField/index.stories.tsx#Email"})}catch(__react_docgen_typescript_loader_error){}try{Number.displayName="Number",Number.__docgenInfo={description:"",displayName:"Number",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#Number"]={docgenInfo:Number.__docgenInfo,name:"Number",path:"packages/react/src/components/TextField/index.stories.tsx#Number"})}catch(__react_docgen_typescript_loader_error){}try{Password.displayName="Password",Password.__docgenInfo={description:"",displayName:"Password",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#Password"]={docgenInfo:Password.__docgenInfo,name:"Password",path:"packages/react/src/components/TextField/index.stories.tsx#Password"})}catch(__react_docgen_typescript_loader_error){}try{WithMaxLength.displayName="WithMaxLength",WithMaxLength.__docgenInfo={description:"",displayName:"WithMaxLength",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#WithMaxLength"]={docgenInfo:WithMaxLength.__docgenInfo,name:"WithMaxLength",path:"packages/react/src/components/TextField/index.stories.tsx#WithMaxLength"})}catch(__react_docgen_typescript_loader_error){}try{WithAddonBefore.displayName="WithAddonBefore",WithAddonBefore.__docgenInfo={description:"",displayName:"WithAddonBefore",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#WithAddonBefore"]={docgenInfo:WithAddonBefore.__docgenInfo,name:"WithAddonBefore",path:"packages/react/src/components/TextField/index.stories.tsx#WithAddonBefore"})}catch(__react_docgen_typescript_loader_error){}try{WithAddonAfter.displayName="WithAddonAfter",WithAddonAfter.__docgenInfo={description:"",displayName:"WithAddonAfter",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#WithAddonAfter"]={docgenInfo:WithAddonAfter.__docgenInfo,name:"WithAddonAfter",path:"packages/react/src/components/TextField/index.stories.tsx#WithAddonAfter"})}catch(__react_docgen_typescript_loader_error){}try{ExampleLoginForm.displayName="ExampleLoginForm",ExampleLoginForm.__docgenInfo={description:"",displayName:"ExampleLoginForm",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#ExampleLoginForm"]={docgenInfo:ExampleLoginForm.__docgenInfo,name:"ExampleLoginForm",path:"packages/react/src/components/TextField/index.stories.tsx#ExampleLoginForm"})}catch(__react_docgen_typescript_loader_error){}try{CustomValidation.displayName="CustomValidation",CustomValidation.__docgenInfo={description:"",displayName:"CustomValidation",props:{type:{defaultValue:null,description:"Text fields can be a limited subset of `<input>` types.\n[DOM - `type`](https://html.spec.whatwg.org/multipage/input.html#attr-input-type)",name:"type",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"password"'}]}},addonBefore:{defaultValue:null,description:"One or more addon that should be included before the `<input>`.",name:"addonBefore",required:!1,type:{name:"ReactNode"}},addonAfter:{defaultValue:null,description:"One or more addon that should be included after the `<input>`.",name:"addonAfter",required:!1,type:{name:"ReactNode"}},feedback:{defaultValue:null,description:"Feedback about the user's current input value. By default, this will\ncontain validation errors and the counter, if `maxLength` is specified.",name:"feedback",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | undefined"}},counterStart:{defaultValue:null,description:"When the character counter should begin showing.",name:"counterStart",required:!1,type:{name:"number | undefined"}},counter:{defaultValue:null,description:"A function that takes the remaining number of characters and the maximum\nnumber of characters and returns the string or element that will be\nrendered in the character counter slot.",name:"counter",required:!1,type:{name:"false | (({ remaining, max }: { remaining: number; max: number; }) => ReactNode) | undefined"}},baseName:{defaultValue:null,description:"The base class name according to BEM conventions.",name:"baseName",required:!1,type:{name:"string | undefined"}},inputClass:{defaultValue:null,description:"The className for the TextField's `<input>` element.",name:"inputClass",required:!1,type:{name:"string | undefined"}},addonClass:{defaultValue:null,description:"The className for all of the addons (before and after).",name:"addonClass",required:!1,type:{name:"string | undefined"}},groupClass:{defaultValue:null,description:"The className for the wrapper that contains the `<input>` & addons.",name:"groupClass",required:!1,type:{name:"string | undefined"}},feedbackClass:{defaultValue:null,description:"The className for the TextField's feedback section, which contains the\nerror text and character count.",name:"feedbackClass",required:!1,type:{name:"string | undefined"}},counterClass:{defaultValue:null,description:"The className for the TextField's character counter element.",name:"counterClass",required:!1,type:{name:"string | undefined"}},invalidClass:{defaultValue:null,description:"A className that will be applied to the base element when the `<input>`\nis invalid.",name:"invalidClass",required:!1,type:{name:"string | undefined"}},inputRef:{defaultValue:null,description:"A reference to the internal `<input>` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement | HTMLTextAreaElement> | undefined"}},requiredIndicator:{defaultValue:null,description:'Indicates that the indicator should be "required" when `required=true`.',name:"requiredIndicator",required:!1,type:{name:"boolean | undefined"}},optionalIndicator:{defaultValue:null,description:'Indicates that the indicator should be "optional" when `required=false`.',name:"optionalIndicator",required:!1,type:{name:"boolean | undefined"}},onCount:{defaultValue:null,description:"Triggered any time the number of characters remaining is updated.",name:"onCount",required:!1,type:{name:"((remaining?: number | undefined) => void) | undefined"}},multiline:{defaultValue:null,description:"Allow for multiple lines of input",name:"multiline",required:!1,type:{name:"number | boolean | undefined"}},autoSize:{defaultValue:null,description:"If `true` increase the height of textarea automatically\nonly works when multiline prop it's `enable`",name:"autoSize",required:!1,type:{name:"boolean | undefined"}},description:{defaultValue:null,description:"An optional description. Use this in place of `placeholder` text or as\nhelp text for your field control.",name:"description",required:!1,type:{name:"ReactNode"}},labelClass:{defaultValue:null,description:"A className for the label element, which will be a `<label>` if `htmlFor`\nis included and a `<div>` otherwise.",name:"labelClass",required:!1,type:{name:"string | undefined"}},descriptionClass:{defaultValue:null,description:"A className for the description `<div>`.",name:"descriptionClass",required:!1,type:{name:"string | undefined"}},labelId:{defaultValue:null,description:"An id for the label element.",name:"labelId",required:!1,type:{name:"string | undefined"}},descriptionId:{defaultValue:null,description:"An id for the description `<div>`.",name:"descriptionId",required:!1,type:{name:"string | undefined"}},errors:{defaultValue:null,description:"A list of error strings. If provided, this will be set as an unordered\nlist in the first child slot.\nA list of validation errors. When the input is submitted in a form, the\nlist will be concatenated into a single string with a new line separator.",name:"errors",required:!1,type:{name:"string[] | undefined"}},errorsClass:{defaultValue:null,description:"A className for the error list.",name:"errorsClass",required:!1,type:{name:"string | undefined"}},errorsId:{defaultValue:null,description:"An id for the error list.",name:"errorsId",required:!1,type:{name:"string | undefined"}},validators:{defaultValue:null,description:"A list of validators. A validator contains a function that tests the value\nfor validity and a corresponding message that conveys why the test failed.",name:"validators",required:!1,type:{name:"ValidatorEntry[] | undefined"}},validateOnDOMChange:{defaultValue:null,description:"Indicates that validation should occur when the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\ncallback, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)",name:"validateOnDOMChange",required:!1,type:{name:"boolean | undefined"}},validateOnChange:{defaultValue:null,description:"Indicates that validation should occur when `onChange` is triggered. Alias\nof `validateOnInput`.",name:"validateOnChange",required:!1,type:{name:"boolean | undefined"}},maxLengthRestrictsInput:{defaultValue:null,description:"Indicates that a `maxLength` value should prevent input beyond the `maxLength`.",name:"maxLengthRestrictsInput",required:!1,type:{name:"boolean | undefined"}},onDOMChange:{defaultValue:null,description:"A callback that will be triggered any time the DOM's `change` event is\ntriggered. Note that this event is different from React's `onChange`\nevent, which triggers on the DOM's `input` event.\n\nReference:\n- [MDN - `change event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)\n- [MDN - `input event`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)",name:"onDOMChange",required:!1,type:{name:"(((e: Event) => void) & ((e: Event) => void)) | undefined"}},onValidate:{defaultValue:null,description:"A callback that will be triggered any time the input is validated. See\nrelated `validators`, `validateOnChange`, and `validateOnChange`.",name:"onValidate",required:!1,type:{name:"(((errors: string[]) => void) & ((errors: string[]) => void)) | undefined"}},firstName:{defaultValue:null,description:"",name:"firstName",required:!0,type:{name:"string"}},lastName:{defaultValue:null,description:"",name:"lastName",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/react/src/components/TextField/index.stories.tsx#CustomValidation"]={docgenInfo:CustomValidation.__docgenInfo,name:"CustomValidation",path:"packages/react/src/components/TextField/index.stories.tsx#CustomValidation"})}catch(__react_docgen_typescript_loader_error){}}}]);